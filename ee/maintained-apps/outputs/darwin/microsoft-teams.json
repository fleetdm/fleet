{
  "versions": [
    {
      "version": "25016.1904.3401.2239",
      "installer_url": "https://statics.teams.cdn.office.net/production-osx/25016.1904.3401.2239/MicrosoftTeams.pkg",
      "unique_identifier": "com.microsoft.teams2",
      "queries": {
        "exists": "SELECT 1 FROM apps WHERE bundle_identifier = 'com.microsoft.teams2';"
      },
      "install_script_ref": "19ac6a43-ed65-11ef-8c2d-0242ac12000a",
      "uninstall_script_ref": "19ac6e5f-ed65-11ef-8c2d-0242ac12000a",
      "sha256": "63a283bf5a022a221478df5630fb3e2b160bc20f3a7c13f09f350241cbf2b16e"
    }
  ],
  "refs": {
    "19ac6a43-ed65-11ef-8c2d-0242ac12000a": "#!/bin/sh\n\n# variables\nAPPDIR=\"/Applications/\"\nTMPDIR=$(dirname \"$(realpath $INSTALLER_PATH)\")\n\n# install pkg files\n\nCHOICE_XML=$(mktemp /tmp/choice_xml_XXX)\n\ncat << EOF > \"$CHOICE_XML\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <array>\n    <dict>\n      <key>attributeSetting</key>\n      <integer>0</integer>\n      <key>choiceAttribute</key>\n      <string>selected</string>\n      <key>choiceIdentifier</key>\n      <string>com.microsoft.autoupdate</string>\n    </dict>\n  </array>\n</plist>\n\nEOF\n\nsudo installer -pkg \"$TMPDIR\"/MicrosoftTeams.pkg -target / -applyChoiceChangesXML \"$CHOICE_XML\"\n\n",
    "19ac6e5f-ed65-11ef-8c2d-0242ac12000a": "#!/bin/sh\n\n# variables\nLOGGED_IN_USER=$(scutil <<< \"show State:/Users/ConsoleUser\" | awk '/Name :/ { print $3 }')\n# functions\n\nquit_application() {\n  local bundle_id=\"$1\"\n  local timeout_duration=10\n\n  # check if the application is running\n  if ! osascript -e \"application id \\\"$bundle_id\\\" is running\" 2>/dev/null; then\n    return\n  fi\n\n  local console_user\n  console_user=$(stat -f \"%Su\" /dev/console)\n  if [[ $EUID -eq 0 && \"$console_user\" == \"root\" ]]; then\n    echo \"Not logged into a non-root GUI; skipping quitting application ID '$bundle_id'.\"\n    return\n  fi\n\n  echo \"Quitting application '$bundle_id'...\"\n\n  # try to quit the application within the timeout period\n  local quit_success=false\n  SECONDS=0\n  while (( SECONDS < timeout_duration )); do\n    if osascript -e \"tell application id \\\"$bundle_id\\\" to quit\" >/dev/null 2>&1; then\n      if ! pgrep -f \"$bundle_id\" >/dev/null 2>&1; then\n        echo \"Application '$bundle_id' quit successfully.\"\n        quit_success=true\n        break\n      fi\n    fi\n    sleep 1\n  done\n\n  if [[ \"$quit_success\" = false ]]; then\n    echo \"Application '$bundle_id' did not quit.\"\n  fi\n}\n\n\nremove_launchctl_service() {\n  local service=\"$1\"\n  local booleans=(\"true\" \"false\")\n  local plist_status\n  local paths\n  local should_sudo\n\n  echo \"Removing launchctl service ${service}\"\n\n  for should_sudo in \"${booleans[@]}\"; do\n    plist_status=$(launchctl list \"${service}\" 2>/dev/null)\n\n    if [[ $plist_status == \\{* ]]; then\n      if [[ $should_sudo == \"true\" ]]; then\n        sudo launchctl remove \"${service}\"\n      else\n        launchctl remove \"${service}\"\n      fi\n      sleep 1\n    fi\n\n    paths=(\n      \"/Library/LaunchAgents/${service}.plist\"\n      \"/Library/LaunchDaemons/${service}.plist\"\n    )\n\n    # if not using sudo, prepend the home directory to the paths\n    if [[ $should_sudo == \"false\" ]]; then\n      for i in \"${!paths[@]}\"; do\n        paths[i]=\"${HOME}${paths[i]}\"\n      done\n    fi\n\n    for path in \"${paths[@]}\"; do\n      if [[ -e \"$path\" ]]; then\n        if [[ $should_sudo == \"true\" ]]; then\n          sudo rm -f -- \"$path\"\n        else\n          rm -f -- \"$path\"\n        fi\n      fi\n    done\n  done\n}\n\ntrash() {\n  local logged_in_user=\"$1\"\n  local target_file=\"$2\"\n  local timestamp=\"$(date +%Y-%m-%d-%s)\"\n  local rand=\"$(jot -r 1 0 99999)\"\n\n  # replace ~ with /Users/$logged_in_user\n  if [[ \"$target_file\" == ~* ]]; then\n    target_file=\"/Users/$logged_in_user${target_file:1}\"\n  fi\n\n  local trash=\"/Users/$logged_in_user/.Trash\"\n  local file_name=\"$(basename \"${target_file}\")\"\n\n  if [[ -e \"$target_file\" ]]; then\n    echo \"removing $target_file.\"\n    mv -f \"$target_file\" \"$trash/${file_name}_${timestamp}_${rand}\"\n  else\n    echo \"$target_file doesn't exist.\"\n  fi\n}\n\nremove_launchctl_service 'com.microsoft.teams.TeamsUpdaterDaemon'\nquit_application 'com.microsoft.autoupdate2'\nsudo pkgutil --forget 'com.microsoft.MSTeamsAudioDevice'\nsudo pkgutil --forget 'com.microsoft.package.Microsoft_AutoUpdate.app'\nsudo pkgutil --forget 'com.microsoft.teams2'\nsudo rm -rf '/Applications/Microsoft Teams.app'\nsudo rm -rf '/Library/Application Support/Microsoft/TeamsUpdaterDaemon'\nsudo rm -rf '/Library/Logs/Microsoft/MSTeams'\nsudo rm -rf '/Library/Logs/Microsoft/Teams'\nsudo rm -rf '/Library/Preferences/com.microsoft.teams.plist'\nsudo rmdir '~/Library/Application Support/Microsoft'\ntrash $LOGGED_IN_USER '~/Library/Application Scripts/*.com.microsoft.teams'\ntrash $LOGGED_IN_USER '~/Library/Application Scripts/com.microsoft.teams*'\ntrash $LOGGED_IN_USER '~/Library/Application Support/com.microsoft.teams'\ntrash $LOGGED_IN_USER '~/Library/Application Support/Microsoft/Teams'\ntrash $LOGGED_IN_USER '~/Library/Application Support/Teams'\ntrash $LOGGED_IN_USER '~/Library/Caches/com.microsoft.teams'\ntrash $LOGGED_IN_USER '~/Library/Containers/com.microsoft.teams*'\ntrash $LOGGED_IN_USER '~/Library/Cookies/com.microsoft.teams.binarycookies'\ntrash $LOGGED_IN_USER '~/Library/Group Containers/*.com.microsoft.teams'\ntrash $LOGGED_IN_USER '~/Library/HTTPStorages/com.microsoft.teams'\ntrash $LOGGED_IN_USER '~/Library/HTTPStorages/com.microsoft.teams.binarycookies'\ntrash $LOGGED_IN_USER '~/Library/Logs/Microsoft Teams Helper (Renderer)'\ntrash $LOGGED_IN_USER '~/Library/Logs/Microsoft Teams'\ntrash $LOGGED_IN_USER '~/Library/Preferences/com.microsoft.teams*.plist'\ntrash $LOGGED_IN_USER '~/Library/Saved Application State/com.microsoft.teams*.savedState'\ntrash $LOGGED_IN_USER '~/Library/WebKit/com.microsoft.teams'\n"
  }
}
