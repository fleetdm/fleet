{
  "versions": [
    {
      "version": "135.1.77.101",
      "queries": {
        "exists": "SELECT 1 FROM programs WHERE name = 'Brave' AND publisher = 'Brave Software Inc';"
      },
      "installer_url": "https://github.com/brave/brave-browser/releases/download/v1.77.101/BraveBrowserStandaloneSilentSetup.exe",
      "install_script_ref": "b677fe45",
      "uninstall_script_ref": "da8237ee",
      "sha256": "68c80e04d2c3397d484c2328b7b93de4f1c02ebe512268ffd9526cb81366f220"
    }
  ],
  "refs": {
    "b677fe45": ".\\BraveBrowserStandaloneSilentSetup.exe",
    "da8237ee": "# Define acceptable/expected exit codes\n$ExpectedExitCodes = @(0, 19)\n\n# Uninstall Registry Key\n$machineKey = 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\BraveSoftware Brave-Browser'\n\n# Additional uninstall args\n$uninstallArgs = \"--force-uninstall\"\n\n# Initialize exit code\n$exitCode = 0\n\ntry {\n    $key = Get-ItemProperty -Path $machineKey -ErrorAction Stop\n\n    # Get the uninstall command. Some uninstallers do not include 'QuietUninstallString'\n    $uninstallCommand = if ($key.QuietUninstallString) {\n        $key.QuietUninstallString\n    } else {\n        $key.UninstallString\n    }\n\n    # The uninstall command may contain command and args, like:\n    # \"C:\\Program Files\\Software\\uninstall.exe\" --uninstall --silent\n    # Split the command and args\n    $splitArgs = $uninstallCommand.Split('\"')\n    if ($splitArgs.Length -gt 1) {\n        if ($splitArgs.Length -eq 3) {\n            $uninstallArgs = \"$( $splitArgs[2] ) $uninstallArgs\".Trim()\n        } elseif ($splitArgs.Length -gt 3) {\n            Throw \"Uninstall command contains multiple quoted strings. Please update the uninstall script.`nUninstall command: $uninstallCommand\"\n        }\n        $uninstallCommand = $splitArgs[1]\n    }\n\n    Write-Host \"Uninstall command: $uninstallCommand\"\n    Write-Host \"Uninstall args: $uninstallArgs\"\n\n    $processOptions = @{\n        FilePath = $uninstallCommand\n        PassThru = $true\n        Wait     = $true\n    }\n    if ($uninstallArgs -ne '') {\n        $processOptions.ArgumentList = \"$uninstallArgs\"\n    }\n\n    # Start uninstall process\n    $process = Start-Process @processOptions\n    $exitCode = $process.ExitCode\n    Write-Host \"Uninstall exit code: $exitCode\"\n\n} catch {\n    Write-Host \"Error: $_\"\n    $exitCode = 1\n}\n\n# Treat acceptable exit codes as success\nif ($ExpectedExitCodes -contains $exitCode) {\n    Exit 0\n} else {\n    Exit $exitCode\n}\n"
  }
}