// Automatically generated by mockimpl. DO NOT EDIT!

package mock

import (
	"time"

	"github.com/fleetdm/fleet/v4/server/fleet"
)

var _ fleet.Datastore = (*DataStore)(nil)

type NewCarveFunc func(metadata *fleet.CarveMetadata) (*fleet.CarveMetadata, error)

type UpdateCarveFunc func(metadata *fleet.CarveMetadata) error

type CarveFunc func(carveId int64) (*fleet.CarveMetadata, error)

type CarveBySessionIdFunc func(sessionId string) (*fleet.CarveMetadata, error)

type CarveByNameFunc func(name string) (*fleet.CarveMetadata, error)

type ListCarvesFunc func(opt fleet.CarveListOptions) ([]*fleet.CarveMetadata, error)

type NewBlockFunc func(metadata *fleet.CarveMetadata, blockId int64, data []byte) error

type GetBlockFunc func(metadata *fleet.CarveMetadata, blockId int64) ([]byte, error)

type CleanupCarvesFunc func(now time.Time) (expired int, err error)

type NewUserFunc func(user *fleet.User) (*fleet.User, error)

type ListUsersFunc func(opt fleet.UserListOptions) ([]*fleet.User, error)

type UserByEmailFunc func(email string) (*fleet.User, error)

type UserByIDFunc func(id uint) (*fleet.User, error)

type SaveUserFunc func(user *fleet.User) error

type SaveUsersFunc func(users []*fleet.User) error

type DeleteUserFunc func(id uint) error

type PendingEmailChangeFunc func(userID uint, newEmail string, token string) error

type ConfirmPendingEmailChangeFunc func(userID uint, token string) (string, error)

type ApplyQueriesFunc func(authorID uint, queries []*fleet.Query) error

type NewQueryFunc func(query *fleet.Query, opts ...fleet.OptionalArg) (*fleet.Query, error)

type SaveQueryFunc func(query *fleet.Query) error

type DeleteQueryFunc func(name string) error

type DeleteQueriesFunc func(ids []uint) (uint, error)

type QueryFunc func(id uint) (*fleet.Query, error)

type ListQueriesFunc func(opt fleet.ListOptions) ([]*fleet.Query, error)

type QueryByNameFunc func(name string, opts ...fleet.OptionalArg) (*fleet.Query, error)

type NewDistributedQueryCampaignFunc func(camp *fleet.DistributedQueryCampaign) (*fleet.DistributedQueryCampaign, error)

type DistributedQueryCampaignFunc func(id uint) (*fleet.DistributedQueryCampaign, error)

type SaveDistributedQueryCampaignFunc func(camp *fleet.DistributedQueryCampaign) error

type DistributedQueryCampaignTargetIDsFunc func(id uint) (targets *fleet.HostTargets, err error)

type NewDistributedQueryCampaignTargetFunc func(target *fleet.DistributedQueryCampaignTarget) (*fleet.DistributedQueryCampaignTarget, error)

type CleanupDistributedQueryCampaignsFunc func(now time.Time) (expired uint, err error)

type ApplyPackSpecsFunc func(specs []*fleet.PackSpec) error

type GetPackSpecsFunc func() ([]*fleet.PackSpec, error)

type GetPackSpecFunc func(name string) (*fleet.PackSpec, error)

type NewPackFunc func(pack *fleet.Pack, opts ...fleet.OptionalArg) (*fleet.Pack, error)

type SavePackFunc func(pack *fleet.Pack) error

type DeletePackFunc func(name string) error

type PackFunc func(pid uint) (*fleet.Pack, error)

type ListPacksFunc func(opt fleet.PackListOptions) ([]*fleet.Pack, error)

type PackByNameFunc func(name string, opts ...fleet.OptionalArg) (*fleet.Pack, bool, error)

type ListPacksForHostFunc func(hid uint) (packs []*fleet.Pack, err error)

type EnsureGlobalPackFunc func() (*fleet.Pack, error)

type EnsureTeamPackFunc func(teamID uint) (*fleet.Pack, error)

type ApplyLabelSpecsFunc func(specs []*fleet.LabelSpec) error

type GetLabelSpecsFunc func() ([]*fleet.LabelSpec, error)

type GetLabelSpecFunc func(name string) (*fleet.LabelSpec, error)

type NewLabelFunc func(Label *fleet.Label, opts ...fleet.OptionalArg) (*fleet.Label, error)

type SaveLabelFunc func(label *fleet.Label) (*fleet.Label, error)

type DeleteLabelFunc func(name string) error

type LabelFunc func(lid uint) (*fleet.Label, error)

type ListLabelsFunc func(filter fleet.TeamFilter, opt fleet.ListOptions) ([]*fleet.Label, error)

type LabelQueriesForHostFunc func(host *fleet.Host, cutoff time.Time) (map[string]string, error)

type RecordLabelQueryExecutionsFunc func(host *fleet.Host, results map[uint]*bool, t time.Time) error

type ListLabelsForHostFunc func(hid uint) ([]*fleet.Label, error)

type ListHostsInLabelFunc func(filter fleet.TeamFilter, lid uint, opt fleet.HostListOptions) ([]*fleet.Host, error)

type ListUniqueHostsInLabelsFunc func(filter fleet.TeamFilter, labels []uint) ([]*fleet.Host, error)

type SearchLabelsFunc func(filter fleet.TeamFilter, query string, omit ...uint) ([]*fleet.Label, error)

type LabelIDsByNameFunc func(labels []string) ([]uint, error)

type NewHostFunc func(host *fleet.Host) (*fleet.Host, error)

type SaveHostFunc func(host *fleet.Host) error

type DeleteHostFunc func(hid uint) error

type HostFunc func(id uint) (*fleet.Host, error)

type EnrollHostFunc func(osqueryHostId string, nodeKey string, teamID *uint, cooldown time.Duration) (*fleet.Host, error)

type ListHostsFunc func(filter fleet.TeamFilter, opt fleet.HostListOptions) ([]*fleet.Host, error)

type AuthenticateHostFunc func(nodeKey string) (*fleet.Host, error)

type MarkHostSeenFunc func(host *fleet.Host, t time.Time) error

type MarkHostsSeenFunc func(hostIDs []uint, t time.Time) error

type SearchHostsFunc func(filter fleet.TeamFilter, query string, omit ...uint) ([]*fleet.Host, error)

type CleanupIncomingHostsFunc func(now time.Time) error

type GenerateHostStatusStatisticsFunc func(filter fleet.TeamFilter, now time.Time) (online uint, offline uint, mia uint, new uint, err error)

type HostIDsByNameFunc func(filter fleet.TeamFilter, hostnames []string) ([]uint, error)

type HostByIdentifierFunc func(identifier string) (*fleet.Host, error)

type AddHostsToTeamFunc func(teamID *uint, hostIDs []uint) error

type SaveHostAdditionalFunc func(host *fleet.Host) error

type CountHostsInTargetsFunc func(filter fleet.TeamFilter, targets fleet.HostTargets, now time.Time) (fleet.TargetMetrics, error)

type HostIDsInTargetsFunc func(filter fleet.TeamFilter, targets fleet.HostTargets) ([]uint, error)

type NewPasswordResetRequestFunc func(req *fleet.PasswordResetRequest) (*fleet.PasswordResetRequest, error)

type SavePasswordResetRequestFunc func(req *fleet.PasswordResetRequest) error

type DeletePasswordResetRequestFunc func(req *fleet.PasswordResetRequest) error

type DeletePasswordResetRequestsForUserFunc func(userID uint) error

type FindPassswordResetByIDFunc func(id uint) (*fleet.PasswordResetRequest, error)

type FindPassswordResetsByUserIDFunc func(id uint) ([]*fleet.PasswordResetRequest, error)

type FindPassswordResetByTokenFunc func(token string) (*fleet.PasswordResetRequest, error)

type FindPassswordResetByTokenAndUserIDFunc func(token string, id uint) (*fleet.PasswordResetRequest, error)

type SessionByKeyFunc func(key string) (*fleet.Session, error)

type SessionByIDFunc func(id uint) (*fleet.Session, error)

type ListSessionsForUserFunc func(id uint) ([]*fleet.Session, error)

type NewSessionFunc func(session *fleet.Session) (*fleet.Session, error)

type DestroySessionFunc func(session *fleet.Session) error

type DestroyAllSessionsForUserFunc func(id uint) error

type MarkSessionAccessedFunc func(session *fleet.Session) error

type NewAppConfigFunc func(info *fleet.AppConfig) (*fleet.AppConfig, error)

type AppConfigFunc func() (*fleet.AppConfig, error)

type SaveAppConfigFunc func(info *fleet.AppConfig) error

type VerifyEnrollSecretFunc func(secret string) (*fleet.EnrollSecret, error)

type GetEnrollSecretsFunc func(teamID *uint) ([]*fleet.EnrollSecret, error)

type ApplyEnrollSecretsFunc func(teamID *uint, secrets []*fleet.EnrollSecret) error

type NewInviteFunc func(i *fleet.Invite) (*fleet.Invite, error)

type ListInvitesFunc func(opt fleet.ListOptions) ([]*fleet.Invite, error)

type InviteFunc func(id uint) (*fleet.Invite, error)

type InviteByEmailFunc func(email string) (*fleet.Invite, error)

type InviteByTokenFunc func(token string) (*fleet.Invite, error)

type DeleteInviteFunc func(id uint) error

type ListScheduledQueriesInPackFunc func(id uint, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error)

type NewScheduledQueryFunc func(sq *fleet.ScheduledQuery, opts ...fleet.OptionalArg) (*fleet.ScheduledQuery, error)

type SaveScheduledQueryFunc func(sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error)

type DeleteScheduledQueryFunc func(id uint) error

type ScheduledQueryFunc func(id uint) (*fleet.ScheduledQuery, error)

type CleanupOrphanScheduledQueryStatsFunc func() error

type NewTeamFunc func(team *fleet.Team) (*fleet.Team, error)

type SaveTeamFunc func(team *fleet.Team) (*fleet.Team, error)

type TeamFunc func(tid uint) (*fleet.Team, error)

type DeleteTeamFunc func(tid uint) error

type TeamByNameFunc func(name string) (*fleet.Team, error)

type ListTeamsFunc func(filter fleet.TeamFilter, opt fleet.ListOptions) ([]*fleet.Team, error)

type SearchTeamsFunc func(filter fleet.TeamFilter, matchQuery string, omit ...uint) ([]*fleet.Team, error)

type TeamEnrollSecretsFunc func(teamID uint) ([]*fleet.EnrollSecret, error)

type SaveHostSoftwareFunc func(host *fleet.Host) error

type LoadHostSoftwareFunc func(host *fleet.Host) error

type AllSoftwareWithoutCPEIteratorFunc func() (fleet.SoftwareIterator, error)

type AddCPEForSoftwareFunc func(software fleet.Software, cpe string) error

type AllCPEsFunc func() ([]string, error)

type InsertCVEForCPEFunc func(cve string, cpes []string) error

type NewActivityFunc func(user *fleet.User, activityType string, details *map[string]interface{}) error

type ListActivitiesFunc func(opt fleet.ListOptions) ([]*fleet.Activity, error)

type ShouldSendStatisticsFunc func(frequency time.Duration) (fleet.StatisticsPayload, bool, error)

type RecordStatisticsSentFunc func() error

type NewGlobalPolicyFunc func(queryID uint) (*fleet.Policy, error)

type PolicyFunc func(id uint) (*fleet.Policy, error)

type RecordPolicyQueryExecutionsFunc func(host *fleet.Host, results map[uint]*bool, updated time.Time) error

type ListGlobalPoliciesFunc func() ([]*fleet.Policy, error)

type DeleteGlobalPoliciesFunc func(ids []uint) ([]uint, error)

type PolicyQueriesForHostFunc func(host *fleet.Host) (map[string]string, error)

type NameFunc func() string

type DropFunc func() error

type MigrateTablesFunc func() error

type MigrateDataFunc func() error

type MigrationStatusFunc func() (fleet.MigrationStatus, error)

type BeginFunc func() (fleet.Transaction, error)

type DataStore struct {
	NewCarveFunc        NewCarveFunc
	NewCarveFuncInvoked bool

	UpdateCarveFunc        UpdateCarveFunc
	UpdateCarveFuncInvoked bool

	CarveFunc        CarveFunc
	CarveFuncInvoked bool

	CarveBySessionIdFunc        CarveBySessionIdFunc
	CarveBySessionIdFuncInvoked bool

	CarveByNameFunc        CarveByNameFunc
	CarveByNameFuncInvoked bool

	ListCarvesFunc        ListCarvesFunc
	ListCarvesFuncInvoked bool

	NewBlockFunc        NewBlockFunc
	NewBlockFuncInvoked bool

	GetBlockFunc        GetBlockFunc
	GetBlockFuncInvoked bool

	CleanupCarvesFunc        CleanupCarvesFunc
	CleanupCarvesFuncInvoked bool

	NewUserFunc        NewUserFunc
	NewUserFuncInvoked bool

	ListUsersFunc        ListUsersFunc
	ListUsersFuncInvoked bool

	UserByEmailFunc        UserByEmailFunc
	UserByEmailFuncInvoked bool

	UserByIDFunc        UserByIDFunc
	UserByIDFuncInvoked bool

	SaveUserFunc        SaveUserFunc
	SaveUserFuncInvoked bool

	SaveUsersFunc        SaveUsersFunc
	SaveUsersFuncInvoked bool

	DeleteUserFunc        DeleteUserFunc
	DeleteUserFuncInvoked bool

	PendingEmailChangeFunc        PendingEmailChangeFunc
	PendingEmailChangeFuncInvoked bool

	ConfirmPendingEmailChangeFunc        ConfirmPendingEmailChangeFunc
	ConfirmPendingEmailChangeFuncInvoked bool

	ApplyQueriesFunc        ApplyQueriesFunc
	ApplyQueriesFuncInvoked bool

	NewQueryFunc        NewQueryFunc
	NewQueryFuncInvoked bool

	SaveQueryFunc        SaveQueryFunc
	SaveQueryFuncInvoked bool

	DeleteQueryFunc        DeleteQueryFunc
	DeleteQueryFuncInvoked bool

	DeleteQueriesFunc        DeleteQueriesFunc
	DeleteQueriesFuncInvoked bool

	QueryFunc        QueryFunc
	QueryFuncInvoked bool

	ListQueriesFunc        ListQueriesFunc
	ListQueriesFuncInvoked bool

	QueryByNameFunc        QueryByNameFunc
	QueryByNameFuncInvoked bool

	NewDistributedQueryCampaignFunc        NewDistributedQueryCampaignFunc
	NewDistributedQueryCampaignFuncInvoked bool

	DistributedQueryCampaignFunc        DistributedQueryCampaignFunc
	DistributedQueryCampaignFuncInvoked bool

	SaveDistributedQueryCampaignFunc        SaveDistributedQueryCampaignFunc
	SaveDistributedQueryCampaignFuncInvoked bool

	DistributedQueryCampaignTargetIDsFunc        DistributedQueryCampaignTargetIDsFunc
	DistributedQueryCampaignTargetIDsFuncInvoked bool

	NewDistributedQueryCampaignTargetFunc        NewDistributedQueryCampaignTargetFunc
	NewDistributedQueryCampaignTargetFuncInvoked bool

	CleanupDistributedQueryCampaignsFunc        CleanupDistributedQueryCampaignsFunc
	CleanupDistributedQueryCampaignsFuncInvoked bool

	ApplyPackSpecsFunc        ApplyPackSpecsFunc
	ApplyPackSpecsFuncInvoked bool

	GetPackSpecsFunc        GetPackSpecsFunc
	GetPackSpecsFuncInvoked bool

	GetPackSpecFunc        GetPackSpecFunc
	GetPackSpecFuncInvoked bool

	NewPackFunc        NewPackFunc
	NewPackFuncInvoked bool

	SavePackFunc        SavePackFunc
	SavePackFuncInvoked bool

	DeletePackFunc        DeletePackFunc
	DeletePackFuncInvoked bool

	PackFunc        PackFunc
	PackFuncInvoked bool

	ListPacksFunc        ListPacksFunc
	ListPacksFuncInvoked bool

	PackByNameFunc        PackByNameFunc
	PackByNameFuncInvoked bool

	ListPacksForHostFunc        ListPacksForHostFunc
	ListPacksForHostFuncInvoked bool

	EnsureGlobalPackFunc        EnsureGlobalPackFunc
	EnsureGlobalPackFuncInvoked bool

	EnsureTeamPackFunc        EnsureTeamPackFunc
	EnsureTeamPackFuncInvoked bool

	ApplyLabelSpecsFunc        ApplyLabelSpecsFunc
	ApplyLabelSpecsFuncInvoked bool

	GetLabelSpecsFunc        GetLabelSpecsFunc
	GetLabelSpecsFuncInvoked bool

	GetLabelSpecFunc        GetLabelSpecFunc
	GetLabelSpecFuncInvoked bool

	NewLabelFunc        NewLabelFunc
	NewLabelFuncInvoked bool

	SaveLabelFunc        SaveLabelFunc
	SaveLabelFuncInvoked bool

	DeleteLabelFunc        DeleteLabelFunc
	DeleteLabelFuncInvoked bool

	LabelFunc        LabelFunc
	LabelFuncInvoked bool

	ListLabelsFunc        ListLabelsFunc
	ListLabelsFuncInvoked bool

	LabelQueriesForHostFunc        LabelQueriesForHostFunc
	LabelQueriesForHostFuncInvoked bool

	RecordLabelQueryExecutionsFunc        RecordLabelQueryExecutionsFunc
	RecordLabelQueryExecutionsFuncInvoked bool

	ListLabelsForHostFunc        ListLabelsForHostFunc
	ListLabelsForHostFuncInvoked bool

	ListHostsInLabelFunc        ListHostsInLabelFunc
	ListHostsInLabelFuncInvoked bool

	ListUniqueHostsInLabelsFunc        ListUniqueHostsInLabelsFunc
	ListUniqueHostsInLabelsFuncInvoked bool

	SearchLabelsFunc        SearchLabelsFunc
	SearchLabelsFuncInvoked bool

	LabelIDsByNameFunc        LabelIDsByNameFunc
	LabelIDsByNameFuncInvoked bool

	NewHostFunc        NewHostFunc
	NewHostFuncInvoked bool

	SaveHostFunc        SaveHostFunc
	SaveHostFuncInvoked bool

	DeleteHostFunc        DeleteHostFunc
	DeleteHostFuncInvoked bool

	HostFunc        HostFunc
	HostFuncInvoked bool

	EnrollHostFunc        EnrollHostFunc
	EnrollHostFuncInvoked bool

	ListHostsFunc        ListHostsFunc
	ListHostsFuncInvoked bool

	AuthenticateHostFunc        AuthenticateHostFunc
	AuthenticateHostFuncInvoked bool

	MarkHostSeenFunc        MarkHostSeenFunc
	MarkHostSeenFuncInvoked bool

	MarkHostsSeenFunc        MarkHostsSeenFunc
	MarkHostsSeenFuncInvoked bool

	SearchHostsFunc        SearchHostsFunc
	SearchHostsFuncInvoked bool

	CleanupIncomingHostsFunc        CleanupIncomingHostsFunc
	CleanupIncomingHostsFuncInvoked bool

	GenerateHostStatusStatisticsFunc        GenerateHostStatusStatisticsFunc
	GenerateHostStatusStatisticsFuncInvoked bool

	HostIDsByNameFunc        HostIDsByNameFunc
	HostIDsByNameFuncInvoked bool

	HostByIdentifierFunc        HostByIdentifierFunc
	HostByIdentifierFuncInvoked bool

	AddHostsToTeamFunc        AddHostsToTeamFunc
	AddHostsToTeamFuncInvoked bool

	SaveHostAdditionalFunc        SaveHostAdditionalFunc
	SaveHostAdditionalFuncInvoked bool

	CountHostsInTargetsFunc        CountHostsInTargetsFunc
	CountHostsInTargetsFuncInvoked bool

	HostIDsInTargetsFunc        HostIDsInTargetsFunc
	HostIDsInTargetsFuncInvoked bool

	NewPasswordResetRequestFunc        NewPasswordResetRequestFunc
	NewPasswordResetRequestFuncInvoked bool

	SavePasswordResetRequestFunc        SavePasswordResetRequestFunc
	SavePasswordResetRequestFuncInvoked bool

	DeletePasswordResetRequestFunc        DeletePasswordResetRequestFunc
	DeletePasswordResetRequestFuncInvoked bool

	DeletePasswordResetRequestsForUserFunc        DeletePasswordResetRequestsForUserFunc
	DeletePasswordResetRequestsForUserFuncInvoked bool

	FindPassswordResetByIDFunc        FindPassswordResetByIDFunc
	FindPassswordResetByIDFuncInvoked bool

	FindPassswordResetsByUserIDFunc        FindPassswordResetsByUserIDFunc
	FindPassswordResetsByUserIDFuncInvoked bool

	FindPassswordResetByTokenFunc        FindPassswordResetByTokenFunc
	FindPassswordResetByTokenFuncInvoked bool

	FindPassswordResetByTokenAndUserIDFunc        FindPassswordResetByTokenAndUserIDFunc
	FindPassswordResetByTokenAndUserIDFuncInvoked bool

	SessionByKeyFunc        SessionByKeyFunc
	SessionByKeyFuncInvoked bool

	SessionByIDFunc        SessionByIDFunc
	SessionByIDFuncInvoked bool

	ListSessionsForUserFunc        ListSessionsForUserFunc
	ListSessionsForUserFuncInvoked bool

	NewSessionFunc        NewSessionFunc
	NewSessionFuncInvoked bool

	DestroySessionFunc        DestroySessionFunc
	DestroySessionFuncInvoked bool

	DestroyAllSessionsForUserFunc        DestroyAllSessionsForUserFunc
	DestroyAllSessionsForUserFuncInvoked bool

	MarkSessionAccessedFunc        MarkSessionAccessedFunc
	MarkSessionAccessedFuncInvoked bool

	NewAppConfigFunc        NewAppConfigFunc
	NewAppConfigFuncInvoked bool

	AppConfigFunc        AppConfigFunc
	AppConfigFuncInvoked bool

	SaveAppConfigFunc        SaveAppConfigFunc
	SaveAppConfigFuncInvoked bool

	VerifyEnrollSecretFunc        VerifyEnrollSecretFunc
	VerifyEnrollSecretFuncInvoked bool

	GetEnrollSecretsFunc        GetEnrollSecretsFunc
	GetEnrollSecretsFuncInvoked bool

	ApplyEnrollSecretsFunc        ApplyEnrollSecretsFunc
	ApplyEnrollSecretsFuncInvoked bool

	NewInviteFunc        NewInviteFunc
	NewInviteFuncInvoked bool

	ListInvitesFunc        ListInvitesFunc
	ListInvitesFuncInvoked bool

	InviteFunc        InviteFunc
	InviteFuncInvoked bool

	InviteByEmailFunc        InviteByEmailFunc
	InviteByEmailFuncInvoked bool

	InviteByTokenFunc        InviteByTokenFunc
	InviteByTokenFuncInvoked bool

	DeleteInviteFunc        DeleteInviteFunc
	DeleteInviteFuncInvoked bool

	ListScheduledQueriesInPackFunc        ListScheduledQueriesInPackFunc
	ListScheduledQueriesInPackFuncInvoked bool

	NewScheduledQueryFunc        NewScheduledQueryFunc
	NewScheduledQueryFuncInvoked bool

	SaveScheduledQueryFunc        SaveScheduledQueryFunc
	SaveScheduledQueryFuncInvoked bool

	DeleteScheduledQueryFunc        DeleteScheduledQueryFunc
	DeleteScheduledQueryFuncInvoked bool

	ScheduledQueryFunc        ScheduledQueryFunc
	ScheduledQueryFuncInvoked bool

	CleanupOrphanScheduledQueryStatsFunc        CleanupOrphanScheduledQueryStatsFunc
	CleanupOrphanScheduledQueryStatsFuncInvoked bool

	NewTeamFunc        NewTeamFunc
	NewTeamFuncInvoked bool

	SaveTeamFunc        SaveTeamFunc
	SaveTeamFuncInvoked bool

	TeamFunc        TeamFunc
	TeamFuncInvoked bool

	DeleteTeamFunc        DeleteTeamFunc
	DeleteTeamFuncInvoked bool

	TeamByNameFunc        TeamByNameFunc
	TeamByNameFuncInvoked bool

	ListTeamsFunc        ListTeamsFunc
	ListTeamsFuncInvoked bool

	SearchTeamsFunc        SearchTeamsFunc
	SearchTeamsFuncInvoked bool

	TeamEnrollSecretsFunc        TeamEnrollSecretsFunc
	TeamEnrollSecretsFuncInvoked bool

	SaveHostSoftwareFunc        SaveHostSoftwareFunc
	SaveHostSoftwareFuncInvoked bool

	LoadHostSoftwareFunc        LoadHostSoftwareFunc
	LoadHostSoftwareFuncInvoked bool

	AllSoftwareWithoutCPEIteratorFunc        AllSoftwareWithoutCPEIteratorFunc
	AllSoftwareWithoutCPEIteratorFuncInvoked bool

	AddCPEForSoftwareFunc        AddCPEForSoftwareFunc
	AddCPEForSoftwareFuncInvoked bool

	AllCPEsFunc        AllCPEsFunc
	AllCPEsFuncInvoked bool

	InsertCVEForCPEFunc        InsertCVEForCPEFunc
	InsertCVEForCPEFuncInvoked bool

	NewActivityFunc        NewActivityFunc
	NewActivityFuncInvoked bool

	ListActivitiesFunc        ListActivitiesFunc
	ListActivitiesFuncInvoked bool

	ShouldSendStatisticsFunc        ShouldSendStatisticsFunc
	ShouldSendStatisticsFuncInvoked bool

	RecordStatisticsSentFunc        RecordStatisticsSentFunc
	RecordStatisticsSentFuncInvoked bool

	NewGlobalPolicyFunc        NewGlobalPolicyFunc
	NewGlobalPolicyFuncInvoked bool

	PolicyFunc        PolicyFunc
	PolicyFuncInvoked bool

	RecordPolicyQueryExecutionsFunc        RecordPolicyQueryExecutionsFunc
	RecordPolicyQueryExecutionsFuncInvoked bool

	ListGlobalPoliciesFunc        ListGlobalPoliciesFunc
	ListGlobalPoliciesFuncInvoked bool

	DeleteGlobalPoliciesFunc        DeleteGlobalPoliciesFunc
	DeleteGlobalPoliciesFuncInvoked bool

	PolicyQueriesForHostFunc        PolicyQueriesForHostFunc
	PolicyQueriesForHostFuncInvoked bool

	NameFunc        NameFunc
	NameFuncInvoked bool

	DropFunc        DropFunc
	DropFuncInvoked bool

	MigrateTablesFunc        MigrateTablesFunc
	MigrateTablesFuncInvoked bool

	MigrateDataFunc        MigrateDataFunc
	MigrateDataFuncInvoked bool

	MigrationStatusFunc        MigrationStatusFunc
	MigrationStatusFuncInvoked bool

	BeginFunc        BeginFunc
	BeginFuncInvoked bool
}

func (s *DataStore) NewCarve(metadata *fleet.CarveMetadata) (*fleet.CarveMetadata, error) {
	s.NewCarveFuncInvoked = true
	return s.NewCarveFunc(metadata)
}

func (s *DataStore) UpdateCarve(metadata *fleet.CarveMetadata) error {
	s.UpdateCarveFuncInvoked = true
	return s.UpdateCarveFunc(metadata)
}

func (s *DataStore) Carve(carveId int64) (*fleet.CarveMetadata, error) {
	s.CarveFuncInvoked = true
	return s.CarveFunc(carveId)
}

func (s *DataStore) CarveBySessionId(sessionId string) (*fleet.CarveMetadata, error) {
	s.CarveBySessionIdFuncInvoked = true
	return s.CarveBySessionIdFunc(sessionId)
}

func (s *DataStore) CarveByName(name string) (*fleet.CarveMetadata, error) {
	s.CarveByNameFuncInvoked = true
	return s.CarveByNameFunc(name)
}

func (s *DataStore) ListCarves(opt fleet.CarveListOptions) ([]*fleet.CarveMetadata, error) {
	s.ListCarvesFuncInvoked = true
	return s.ListCarvesFunc(opt)
}

func (s *DataStore) NewBlock(metadata *fleet.CarveMetadata, blockId int64, data []byte) error {
	s.NewBlockFuncInvoked = true
	return s.NewBlockFunc(metadata, blockId, data)
}

func (s *DataStore) GetBlock(metadata *fleet.CarveMetadata, blockId int64) ([]byte, error) {
	s.GetBlockFuncInvoked = true
	return s.GetBlockFunc(metadata, blockId)
}

func (s *DataStore) CleanupCarves(now time.Time) (expired int, err error) {
	s.CleanupCarvesFuncInvoked = true
	return s.CleanupCarvesFunc(now)
}

func (s *DataStore) NewUser(user *fleet.User) (*fleet.User, error) {
	s.NewUserFuncInvoked = true
	return s.NewUserFunc(user)
}

func (s *DataStore) ListUsers(opt fleet.UserListOptions) ([]*fleet.User, error) {
	s.ListUsersFuncInvoked = true
	return s.ListUsersFunc(opt)
}

func (s *DataStore) UserByEmail(email string) (*fleet.User, error) {
	s.UserByEmailFuncInvoked = true
	return s.UserByEmailFunc(email)
}

func (s *DataStore) UserByID(id uint) (*fleet.User, error) {
	s.UserByIDFuncInvoked = true
	return s.UserByIDFunc(id)
}

func (s *DataStore) SaveUser(user *fleet.User) error {
	s.SaveUserFuncInvoked = true
	return s.SaveUserFunc(user)
}

func (s *DataStore) SaveUsers(users []*fleet.User) error {
	s.SaveUsersFuncInvoked = true
	return s.SaveUsersFunc(users)
}

func (s *DataStore) DeleteUser(id uint) error {
	s.DeleteUserFuncInvoked = true
	return s.DeleteUserFunc(id)
}

func (s *DataStore) PendingEmailChange(userID uint, newEmail string, token string) error {
	s.PendingEmailChangeFuncInvoked = true
	return s.PendingEmailChangeFunc(userID, newEmail, token)
}

func (s *DataStore) ConfirmPendingEmailChange(userID uint, token string) (string, error) {
	s.ConfirmPendingEmailChangeFuncInvoked = true
	return s.ConfirmPendingEmailChangeFunc(userID, token)
}

func (s *DataStore) ApplyQueries(authorID uint, queries []*fleet.Query) error {
	s.ApplyQueriesFuncInvoked = true
	return s.ApplyQueriesFunc(authorID, queries)
}

func (s *DataStore) NewQuery(query *fleet.Query, opts ...fleet.OptionalArg) (*fleet.Query, error) {
	s.NewQueryFuncInvoked = true
	return s.NewQueryFunc(query, opts...)
}

func (s *DataStore) SaveQuery(query *fleet.Query) error {
	s.SaveQueryFuncInvoked = true
	return s.SaveQueryFunc(query)
}

func (s *DataStore) DeleteQuery(name string) error {
	s.DeleteQueryFuncInvoked = true
	return s.DeleteQueryFunc(name)
}

func (s *DataStore) DeleteQueries(ids []uint) (uint, error) {
	s.DeleteQueriesFuncInvoked = true
	return s.DeleteQueriesFunc(ids)
}

func (s *DataStore) Query(id uint) (*fleet.Query, error) {
	s.QueryFuncInvoked = true
	return s.QueryFunc(id)
}

func (s *DataStore) ListQueries(opt fleet.ListOptions) ([]*fleet.Query, error) {
	s.ListQueriesFuncInvoked = true
	return s.ListQueriesFunc(opt)
}

func (s *DataStore) QueryByName(name string, opts ...fleet.OptionalArg) (*fleet.Query, error) {
	s.QueryByNameFuncInvoked = true
	return s.QueryByNameFunc(name, opts...)
}

func (s *DataStore) NewDistributedQueryCampaign(camp *fleet.DistributedQueryCampaign) (*fleet.DistributedQueryCampaign, error) {
	s.NewDistributedQueryCampaignFuncInvoked = true
	return s.NewDistributedQueryCampaignFunc(camp)
}

func (s *DataStore) DistributedQueryCampaign(id uint) (*fleet.DistributedQueryCampaign, error) {
	s.DistributedQueryCampaignFuncInvoked = true
	return s.DistributedQueryCampaignFunc(id)
}

func (s *DataStore) SaveDistributedQueryCampaign(camp *fleet.DistributedQueryCampaign) error {
	s.SaveDistributedQueryCampaignFuncInvoked = true
	return s.SaveDistributedQueryCampaignFunc(camp)
}

func (s *DataStore) DistributedQueryCampaignTargetIDs(id uint) (targets *fleet.HostTargets, err error) {
	s.DistributedQueryCampaignTargetIDsFuncInvoked = true
	return s.DistributedQueryCampaignTargetIDsFunc(id)
}

func (s *DataStore) NewDistributedQueryCampaignTarget(target *fleet.DistributedQueryCampaignTarget) (*fleet.DistributedQueryCampaignTarget, error) {
	s.NewDistributedQueryCampaignTargetFuncInvoked = true
	return s.NewDistributedQueryCampaignTargetFunc(target)
}

func (s *DataStore) CleanupDistributedQueryCampaigns(now time.Time) (expired uint, err error) {
	s.CleanupDistributedQueryCampaignsFuncInvoked = true
	return s.CleanupDistributedQueryCampaignsFunc(now)
}

func (s *DataStore) ApplyPackSpecs(specs []*fleet.PackSpec) error {
	s.ApplyPackSpecsFuncInvoked = true
	return s.ApplyPackSpecsFunc(specs)
}

func (s *DataStore) GetPackSpecs() ([]*fleet.PackSpec, error) {
	s.GetPackSpecsFuncInvoked = true
	return s.GetPackSpecsFunc()
}

func (s *DataStore) GetPackSpec(name string) (*fleet.PackSpec, error) {
	s.GetPackSpecFuncInvoked = true
	return s.GetPackSpecFunc(name)
}

func (s *DataStore) NewPack(pack *fleet.Pack, opts ...fleet.OptionalArg) (*fleet.Pack, error) {
	s.NewPackFuncInvoked = true
	return s.NewPackFunc(pack, opts...)
}

func (s *DataStore) SavePack(pack *fleet.Pack) error {
	s.SavePackFuncInvoked = true
	return s.SavePackFunc(pack)
}

func (s *DataStore) DeletePack(name string) error {
	s.DeletePackFuncInvoked = true
	return s.DeletePackFunc(name)
}

func (s *DataStore) Pack(pid uint) (*fleet.Pack, error) {
	s.PackFuncInvoked = true
	return s.PackFunc(pid)
}

func (s *DataStore) ListPacks(opt fleet.PackListOptions) ([]*fleet.Pack, error) {
	s.ListPacksFuncInvoked = true
	return s.ListPacksFunc(opt)
}

func (s *DataStore) PackByName(name string, opts ...fleet.OptionalArg) (*fleet.Pack, bool, error) {
	s.PackByNameFuncInvoked = true
	return s.PackByNameFunc(name, opts...)
}

func (s *DataStore) ListPacksForHost(hid uint) (packs []*fleet.Pack, err error) {
	s.ListPacksForHostFuncInvoked = true
	return s.ListPacksForHostFunc(hid)
}

func (s *DataStore) EnsureGlobalPack() (*fleet.Pack, error) {
	s.EnsureGlobalPackFuncInvoked = true
	return s.EnsureGlobalPackFunc()
}

func (s *DataStore) EnsureTeamPack(teamID uint) (*fleet.Pack, error) {
	s.EnsureTeamPackFuncInvoked = true
	return s.EnsureTeamPackFunc(teamID)
}

func (s *DataStore) ApplyLabelSpecs(specs []*fleet.LabelSpec) error {
	s.ApplyLabelSpecsFuncInvoked = true
	return s.ApplyLabelSpecsFunc(specs)
}

func (s *DataStore) GetLabelSpecs() ([]*fleet.LabelSpec, error) {
	s.GetLabelSpecsFuncInvoked = true
	return s.GetLabelSpecsFunc()
}

func (s *DataStore) GetLabelSpec(name string) (*fleet.LabelSpec, error) {
	s.GetLabelSpecFuncInvoked = true
	return s.GetLabelSpecFunc(name)
}

func (s *DataStore) NewLabel(Label *fleet.Label, opts ...fleet.OptionalArg) (*fleet.Label, error) {
	s.NewLabelFuncInvoked = true
	return s.NewLabelFunc(Label, opts...)
}

func (s *DataStore) SaveLabel(label *fleet.Label) (*fleet.Label, error) {
	s.SaveLabelFuncInvoked = true
	return s.SaveLabelFunc(label)
}

func (s *DataStore) DeleteLabel(name string) error {
	s.DeleteLabelFuncInvoked = true
	return s.DeleteLabelFunc(name)
}

func (s *DataStore) Label(lid uint) (*fleet.Label, error) {
	s.LabelFuncInvoked = true
	return s.LabelFunc(lid)
}

func (s *DataStore) ListLabels(filter fleet.TeamFilter, opt fleet.ListOptions) ([]*fleet.Label, error) {
	s.ListLabelsFuncInvoked = true
	return s.ListLabelsFunc(filter, opt)
}

func (s *DataStore) LabelQueriesForHost(host *fleet.Host, cutoff time.Time) (map[string]string, error) {
	s.LabelQueriesForHostFuncInvoked = true
	return s.LabelQueriesForHostFunc(host, cutoff)
}

func (s *DataStore) RecordLabelQueryExecutions(host *fleet.Host, results map[uint]*bool, t time.Time) error {
	s.RecordLabelQueryExecutionsFuncInvoked = true
	return s.RecordLabelQueryExecutionsFunc(host, results, t)
}

func (s *DataStore) ListLabelsForHost(hid uint) ([]*fleet.Label, error) {
	s.ListLabelsForHostFuncInvoked = true
	return s.ListLabelsForHostFunc(hid)
}

func (s *DataStore) ListHostsInLabel(filter fleet.TeamFilter, lid uint, opt fleet.HostListOptions) ([]*fleet.Host, error) {
	s.ListHostsInLabelFuncInvoked = true
	return s.ListHostsInLabelFunc(filter, lid, opt)
}

func (s *DataStore) ListUniqueHostsInLabels(filter fleet.TeamFilter, labels []uint) ([]*fleet.Host, error) {
	s.ListUniqueHostsInLabelsFuncInvoked = true
	return s.ListUniqueHostsInLabelsFunc(filter, labels)
}

func (s *DataStore) SearchLabels(filter fleet.TeamFilter, query string, omit ...uint) ([]*fleet.Label, error) {
	s.SearchLabelsFuncInvoked = true
	return s.SearchLabelsFunc(filter, query, omit...)
}

func (s *DataStore) LabelIDsByName(labels []string) ([]uint, error) {
	s.LabelIDsByNameFuncInvoked = true
	return s.LabelIDsByNameFunc(labels)
}

func (s *DataStore) NewHost(host *fleet.Host) (*fleet.Host, error) {
	s.NewHostFuncInvoked = true
	return s.NewHostFunc(host)
}

func (s *DataStore) SaveHost(host *fleet.Host) error {
	s.SaveHostFuncInvoked = true
	return s.SaveHostFunc(host)
}

func (s *DataStore) DeleteHost(hid uint) error {
	s.DeleteHostFuncInvoked = true
	return s.DeleteHostFunc(hid)
}

func (s *DataStore) Host(id uint) (*fleet.Host, error) {
	s.HostFuncInvoked = true
	return s.HostFunc(id)
}

func (s *DataStore) EnrollHost(osqueryHostId string, nodeKey string, teamID *uint, cooldown time.Duration) (*fleet.Host, error) {
	s.EnrollHostFuncInvoked = true
	return s.EnrollHostFunc(osqueryHostId, nodeKey, teamID, cooldown)
}

func (s *DataStore) ListHosts(filter fleet.TeamFilter, opt fleet.HostListOptions) ([]*fleet.Host, error) {
	s.ListHostsFuncInvoked = true
	return s.ListHostsFunc(filter, opt)
}

func (s *DataStore) AuthenticateHost(nodeKey string) (*fleet.Host, error) {
	s.AuthenticateHostFuncInvoked = true
	return s.AuthenticateHostFunc(nodeKey)
}

func (s *DataStore) MarkHostSeen(host *fleet.Host, t time.Time) error {
	s.MarkHostSeenFuncInvoked = true
	return s.MarkHostSeenFunc(host, t)
}

func (s *DataStore) MarkHostsSeen(hostIDs []uint, t time.Time) error {
	s.MarkHostsSeenFuncInvoked = true
	return s.MarkHostsSeenFunc(hostIDs, t)
}

func (s *DataStore) SearchHosts(filter fleet.TeamFilter, query string, omit ...uint) ([]*fleet.Host, error) {
	s.SearchHostsFuncInvoked = true
	return s.SearchHostsFunc(filter, query, omit...)
}

func (s *DataStore) CleanupIncomingHosts(now time.Time) error {
	s.CleanupIncomingHostsFuncInvoked = true
	return s.CleanupIncomingHostsFunc(now)
}

func (s *DataStore) GenerateHostStatusStatistics(filter fleet.TeamFilter, now time.Time) (online uint, offline uint, mia uint, new uint, err error) {
	s.GenerateHostStatusStatisticsFuncInvoked = true
	return s.GenerateHostStatusStatisticsFunc(filter, now)
}

func (s *DataStore) HostIDsByName(filter fleet.TeamFilter, hostnames []string) ([]uint, error) {
	s.HostIDsByNameFuncInvoked = true
	return s.HostIDsByNameFunc(filter, hostnames)
}

func (s *DataStore) HostByIdentifier(identifier string) (*fleet.Host, error) {
	s.HostByIdentifierFuncInvoked = true
	return s.HostByIdentifierFunc(identifier)
}

func (s *DataStore) AddHostsToTeam(teamID *uint, hostIDs []uint) error {
	s.AddHostsToTeamFuncInvoked = true
	return s.AddHostsToTeamFunc(teamID, hostIDs)
}

func (s *DataStore) SaveHostAdditional(host *fleet.Host) error {
	s.SaveHostAdditionalFuncInvoked = true
	return s.SaveHostAdditionalFunc(host)
}

func (s *DataStore) CountHostsInTargets(filter fleet.TeamFilter, targets fleet.HostTargets, now time.Time) (fleet.TargetMetrics, error) {
	s.CountHostsInTargetsFuncInvoked = true
	return s.CountHostsInTargetsFunc(filter, targets, now)
}

func (s *DataStore) HostIDsInTargets(filter fleet.TeamFilter, targets fleet.HostTargets) ([]uint, error) {
	s.HostIDsInTargetsFuncInvoked = true
	return s.HostIDsInTargetsFunc(filter, targets)
}

func (s *DataStore) NewPasswordResetRequest(req *fleet.PasswordResetRequest) (*fleet.PasswordResetRequest, error) {
	s.NewPasswordResetRequestFuncInvoked = true
	return s.NewPasswordResetRequestFunc(req)
}

func (s *DataStore) SavePasswordResetRequest(req *fleet.PasswordResetRequest) error {
	s.SavePasswordResetRequestFuncInvoked = true
	return s.SavePasswordResetRequestFunc(req)
}

func (s *DataStore) DeletePasswordResetRequest(req *fleet.PasswordResetRequest) error {
	s.DeletePasswordResetRequestFuncInvoked = true
	return s.DeletePasswordResetRequestFunc(req)
}

func (s *DataStore) DeletePasswordResetRequestsForUser(userID uint) error {
	s.DeletePasswordResetRequestsForUserFuncInvoked = true
	return s.DeletePasswordResetRequestsForUserFunc(userID)
}

func (s *DataStore) FindPassswordResetByID(id uint) (*fleet.PasswordResetRequest, error) {
	s.FindPassswordResetByIDFuncInvoked = true
	return s.FindPassswordResetByIDFunc(id)
}

func (s *DataStore) FindPassswordResetsByUserID(id uint) ([]*fleet.PasswordResetRequest, error) {
	s.FindPassswordResetsByUserIDFuncInvoked = true
	return s.FindPassswordResetsByUserIDFunc(id)
}

func (s *DataStore) FindPassswordResetByToken(token string) (*fleet.PasswordResetRequest, error) {
	s.FindPassswordResetByTokenFuncInvoked = true
	return s.FindPassswordResetByTokenFunc(token)
}

func (s *DataStore) FindPassswordResetByTokenAndUserID(token string, id uint) (*fleet.PasswordResetRequest, error) {
	s.FindPassswordResetByTokenAndUserIDFuncInvoked = true
	return s.FindPassswordResetByTokenAndUserIDFunc(token, id)
}

func (s *DataStore) SessionByKey(key string) (*fleet.Session, error) {
	s.SessionByKeyFuncInvoked = true
	return s.SessionByKeyFunc(key)
}

func (s *DataStore) SessionByID(id uint) (*fleet.Session, error) {
	s.SessionByIDFuncInvoked = true
	return s.SessionByIDFunc(id)
}

func (s *DataStore) ListSessionsForUser(id uint) ([]*fleet.Session, error) {
	s.ListSessionsForUserFuncInvoked = true
	return s.ListSessionsForUserFunc(id)
}

func (s *DataStore) NewSession(session *fleet.Session) (*fleet.Session, error) {
	s.NewSessionFuncInvoked = true
	return s.NewSessionFunc(session)
}

func (s *DataStore) DestroySession(session *fleet.Session) error {
	s.DestroySessionFuncInvoked = true
	return s.DestroySessionFunc(session)
}

func (s *DataStore) DestroyAllSessionsForUser(id uint) error {
	s.DestroyAllSessionsForUserFuncInvoked = true
	return s.DestroyAllSessionsForUserFunc(id)
}

func (s *DataStore) MarkSessionAccessed(session *fleet.Session) error {
	s.MarkSessionAccessedFuncInvoked = true
	return s.MarkSessionAccessedFunc(session)
}

func (s *DataStore) NewAppConfig(info *fleet.AppConfig) (*fleet.AppConfig, error) {
	s.NewAppConfigFuncInvoked = true
	return s.NewAppConfigFunc(info)
}

func (s *DataStore) AppConfig() (*fleet.AppConfig, error) {
	s.AppConfigFuncInvoked = true
	return s.AppConfigFunc()
}

func (s *DataStore) SaveAppConfig(info *fleet.AppConfig) error {
	s.SaveAppConfigFuncInvoked = true
	return s.SaveAppConfigFunc(info)
}

func (s *DataStore) VerifyEnrollSecret(secret string) (*fleet.EnrollSecret, error) {
	s.VerifyEnrollSecretFuncInvoked = true
	return s.VerifyEnrollSecretFunc(secret)
}

func (s *DataStore) GetEnrollSecrets(teamID *uint) ([]*fleet.EnrollSecret, error) {
	s.GetEnrollSecretsFuncInvoked = true
	return s.GetEnrollSecretsFunc(teamID)
}

func (s *DataStore) ApplyEnrollSecrets(teamID *uint, secrets []*fleet.EnrollSecret) error {
	s.ApplyEnrollSecretsFuncInvoked = true
	return s.ApplyEnrollSecretsFunc(teamID, secrets)
}

func (s *DataStore) NewInvite(i *fleet.Invite) (*fleet.Invite, error) {
	s.NewInviteFuncInvoked = true
	return s.NewInviteFunc(i)
}

func (s *DataStore) ListInvites(opt fleet.ListOptions) ([]*fleet.Invite, error) {
	s.ListInvitesFuncInvoked = true
	return s.ListInvitesFunc(opt)
}

func (s *DataStore) Invite(id uint) (*fleet.Invite, error) {
	s.InviteFuncInvoked = true
	return s.InviteFunc(id)
}

func (s *DataStore) InviteByEmail(email string) (*fleet.Invite, error) {
	s.InviteByEmailFuncInvoked = true
	return s.InviteByEmailFunc(email)
}

func (s *DataStore) InviteByToken(token string) (*fleet.Invite, error) {
	s.InviteByTokenFuncInvoked = true
	return s.InviteByTokenFunc(token)
}

func (s *DataStore) DeleteInvite(id uint) error {
	s.DeleteInviteFuncInvoked = true
	return s.DeleteInviteFunc(id)
}

func (s *DataStore) ListScheduledQueriesInPack(id uint, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error) {
	s.ListScheduledQueriesInPackFuncInvoked = true
	return s.ListScheduledQueriesInPackFunc(id, opts)
}

func (s *DataStore) NewScheduledQuery(sq *fleet.ScheduledQuery, opts ...fleet.OptionalArg) (*fleet.ScheduledQuery, error) {
	s.NewScheduledQueryFuncInvoked = true
	return s.NewScheduledQueryFunc(sq, opts...)
}

func (s *DataStore) SaveScheduledQuery(sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error) {
	s.SaveScheduledQueryFuncInvoked = true
	return s.SaveScheduledQueryFunc(sq)
}

func (s *DataStore) DeleteScheduledQuery(id uint) error {
	s.DeleteScheduledQueryFuncInvoked = true
	return s.DeleteScheduledQueryFunc(id)
}

func (s *DataStore) ScheduledQuery(id uint) (*fleet.ScheduledQuery, error) {
	s.ScheduledQueryFuncInvoked = true
	return s.ScheduledQueryFunc(id)
}

func (s *DataStore) CleanupOrphanScheduledQueryStats() error {
	s.CleanupOrphanScheduledQueryStatsFuncInvoked = true
	return s.CleanupOrphanScheduledQueryStatsFunc()
}

func (s *DataStore) NewTeam(team *fleet.Team) (*fleet.Team, error) {
	s.NewTeamFuncInvoked = true
	return s.NewTeamFunc(team)
}

func (s *DataStore) SaveTeam(team *fleet.Team) (*fleet.Team, error) {
	s.SaveTeamFuncInvoked = true
	return s.SaveTeamFunc(team)
}

func (s *DataStore) Team(tid uint) (*fleet.Team, error) {
	s.TeamFuncInvoked = true
	return s.TeamFunc(tid)
}

func (s *DataStore) DeleteTeam(tid uint) error {
	s.DeleteTeamFuncInvoked = true
	return s.DeleteTeamFunc(tid)
}

func (s *DataStore) TeamByName(name string) (*fleet.Team, error) {
	s.TeamByNameFuncInvoked = true
	return s.TeamByNameFunc(name)
}

func (s *DataStore) ListTeams(filter fleet.TeamFilter, opt fleet.ListOptions) ([]*fleet.Team, error) {
	s.ListTeamsFuncInvoked = true
	return s.ListTeamsFunc(filter, opt)
}

func (s *DataStore) SearchTeams(filter fleet.TeamFilter, matchQuery string, omit ...uint) ([]*fleet.Team, error) {
	s.SearchTeamsFuncInvoked = true
	return s.SearchTeamsFunc(filter, matchQuery, omit...)
}

func (s *DataStore) TeamEnrollSecrets(teamID uint) ([]*fleet.EnrollSecret, error) {
	s.TeamEnrollSecretsFuncInvoked = true
	return s.TeamEnrollSecretsFunc(teamID)
}

func (s *DataStore) SaveHostSoftware(host *fleet.Host) error {
	s.SaveHostSoftwareFuncInvoked = true
	return s.SaveHostSoftwareFunc(host)
}

func (s *DataStore) LoadHostSoftware(host *fleet.Host) error {
	s.LoadHostSoftwareFuncInvoked = true
	return s.LoadHostSoftwareFunc(host)
}

func (s *DataStore) AllSoftwareWithoutCPEIterator() (fleet.SoftwareIterator, error) {
	s.AllSoftwareWithoutCPEIteratorFuncInvoked = true
	return s.AllSoftwareWithoutCPEIteratorFunc()
}

func (s *DataStore) AddCPEForSoftware(software fleet.Software, cpe string) error {
	s.AddCPEForSoftwareFuncInvoked = true
	return s.AddCPEForSoftwareFunc(software, cpe)
}

func (s *DataStore) AllCPEs() ([]string, error) {
	s.AllCPEsFuncInvoked = true
	return s.AllCPEsFunc()
}

func (s *DataStore) InsertCVEForCPE(cve string, cpes []string) error {
	s.InsertCVEForCPEFuncInvoked = true
	return s.InsertCVEForCPEFunc(cve, cpes)
}

func (s *DataStore) NewActivity(user *fleet.User, activityType string, details *map[string]interface{}) error {
	s.NewActivityFuncInvoked = true
	return s.NewActivityFunc(user, activityType, details)
}

func (s *DataStore) ListActivities(opt fleet.ListOptions) ([]*fleet.Activity, error) {
	s.ListActivitiesFuncInvoked = true
	return s.ListActivitiesFunc(opt)
}

func (s *DataStore) ShouldSendStatistics(frequency time.Duration) (fleet.StatisticsPayload, bool, error) {
	s.ShouldSendStatisticsFuncInvoked = true
	return s.ShouldSendStatisticsFunc(frequency)
}

func (s *DataStore) RecordStatisticsSent() error {
	s.RecordStatisticsSentFuncInvoked = true
	return s.RecordStatisticsSentFunc()
}

func (s *DataStore) NewGlobalPolicy(queryID uint) (*fleet.Policy, error) {
	s.NewGlobalPolicyFuncInvoked = true
	return s.NewGlobalPolicyFunc(queryID)
}

func (s *DataStore) Policy(id uint) (*fleet.Policy, error) {
	s.PolicyFuncInvoked = true
	return s.PolicyFunc(id)
}

func (s *DataStore) RecordPolicyQueryExecutions(host *fleet.Host, results map[uint]*bool, updated time.Time) error {
	s.RecordPolicyQueryExecutionsFuncInvoked = true
	return s.RecordPolicyQueryExecutionsFunc(host, results, updated)
}

func (s *DataStore) ListGlobalPolicies() ([]*fleet.Policy, error) {
	s.ListGlobalPoliciesFuncInvoked = true
	return s.ListGlobalPoliciesFunc()
}

func (s *DataStore) DeleteGlobalPolicies(ids []uint) ([]uint, error) {
	s.DeleteGlobalPoliciesFuncInvoked = true
	return s.DeleteGlobalPoliciesFunc(ids)
}

func (s *DataStore) PolicyQueriesForHost(host *fleet.Host) (map[string]string, error) {
	s.PolicyQueriesForHostFuncInvoked = true
	return s.PolicyQueriesForHostFunc(host)
}

func (s *DataStore) Name() string {
	s.NameFuncInvoked = true
	return s.NameFunc()
}

func (s *DataStore) Drop() error {
	s.DropFuncInvoked = true
	return s.DropFunc()
}

func (s *DataStore) MigrateTables() error {
	s.MigrateTablesFuncInvoked = true
	return s.MigrateTablesFunc()
}

func (s *DataStore) MigrateData() error {
	s.MigrateDataFuncInvoked = true
	return s.MigrateDataFunc()
}

func (s *DataStore) MigrationStatus() (fleet.MigrationStatus, error) {
	s.MigrationStatusFuncInvoked = true
	return s.MigrationStatusFunc()
}

func (s *DataStore) Begin() (fleet.Transaction, error) {
	s.BeginFuncInvoked = true
	return s.BeginFunc()
}
