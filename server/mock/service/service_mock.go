// Automatically generated by mockimpl. DO NOT EDIT!

package mock

import (
	"context"
	"crypto/x509"
	"encoding/json"
	"io"
	"sync"
	"time"

	"github.com/fleetdm/fleet/v4/server/fleet"
	"github.com/fleetdm/fleet/v4/server/version"
	"github.com/fleetdm/fleet/v4/server/websocket"
)

var _ fleet.Service = (*Service)(nil)

type EnrollOsqueryFunc func(ctx context.Context, enrollSecret string, hostIdentifier string, hostDetails map[string](map[string]string)) (nodeKey string, err error)

type AuthenticateHostFunc func(ctx context.Context, nodeKey string) (host *fleet.Host, debug bool, err error)

type GetClientConfigFunc func(ctx context.Context) (config map[string]interface{}, err error)

type GetDistributedQueriesFunc func(ctx context.Context) (queries map[string]string, discovery map[string]string, accelerate uint, err error)

type SubmitDistributedQueryResultsFunc func(ctx context.Context, results fleet.OsqueryDistributedQueryResults, statuses map[string]fleet.OsqueryStatus, messages map[string]string, stats map[string]*fleet.Stats) (err error)

type SubmitStatusLogsFunc func(ctx context.Context, logs []json.RawMessage) (err error)

type SubmitResultLogsFunc func(ctx context.Context, logs []json.RawMessage) (err error)

type YaraRuleByNameFunc func(ctx context.Context, name string) (*fleet.YaraRule, error)

type GetTransparencyURLFunc func(ctx context.Context) (string, error)

type AuthenticateOrbitHostFunc func(ctx context.Context, nodeKey string) (host *fleet.Host, debug bool, err error)

type EnrollOrbitFunc func(ctx context.Context, hostInfo fleet.OrbitHostInfo, enrollSecret string) (orbitNodeKey string, err error)

type GetOrbitConfigFunc func(ctx context.Context) (fleet.OrbitConfig, error)

type LogFleetdErrorFunc func(ctx context.Context, errData fleet.FleetdError) error

type SetOrUpdateDeviceAuthTokenFunc func(ctx context.Context, authToken string) error

type GetFleetDesktopSummaryFunc func(ctx context.Context) (fleet.DesktopSummary, error)

type SetEnterpriseOverridesFunc func(overrides fleet.EnterpriseOverrides)

type CreateUserFromInviteFunc func(ctx context.Context, p fleet.UserPayload) (user *fleet.User, err error)

type CreateUserFunc func(ctx context.Context, p fleet.UserPayload) (user *fleet.User, sessionKey *string, err error)

type CreateInitialUserFunc func(ctx context.Context, p fleet.UserPayload) (user *fleet.User, err error)

type UserFunc func(ctx context.Context, id uint) (user *fleet.User, err error)

type NewUserFunc func(ctx context.Context, p fleet.UserPayload) (*fleet.User, error)

type UserUnauthorizedFunc func(ctx context.Context, id uint) (user *fleet.User, err error)

type AuthenticatedUserFunc func(ctx context.Context) (user *fleet.User, err error)

type ListUsersFunc func(ctx context.Context, opt fleet.UserListOptions) (users []*fleet.User, err error)

type ChangePasswordFunc func(ctx context.Context, oldPass string, newPass string) error

type RequestPasswordResetFunc func(ctx context.Context, email string) (err error)

type RequirePasswordResetFunc func(ctx context.Context, uid uint, require bool) (*fleet.User, error)

type PerformRequiredPasswordResetFunc func(ctx context.Context, password string) (*fleet.User, error)

type ResetPasswordFunc func(ctx context.Context, token string, password string) (err error)

type ModifyUserFunc func(ctx context.Context, userID uint, p fleet.UserPayload) (user *fleet.User, err error)

type DeleteUserFunc func(ctx context.Context, id uint) error

type ChangeUserEmailFunc func(ctx context.Context, token string) (string, error)

type GetUserSettingsFunc func(ctx context.Context, id uint) (settings *fleet.UserSettings, err error)

type InitiateSSOFunc func(ctx context.Context, redirectURL string) (sessionID string, sessionDurationSeconds int, idpURL string, err error)

type InitiateMDMSSOFunc func(ctx context.Context, initiator string, customOriginalURL string) (sessionID string, sessionDurationSeconds int, idpURL string, err error)

type InitSSOCallbackFunc func(ctx context.Context, sessionID string, samlResponse []byte) (auth fleet.Auth, redirectURL string, err error)

type MDMSSOCallbackFunc func(ctx context.Context, sessionID string, samlResponse []byte) (redirectURL string, byodCookieValue string)

type GetMDMAccountDrivenEnrollmentSSOURLFunc func(ctx context.Context) (string, error)

type GetSSOUserFunc func(ctx context.Context, auth fleet.Auth) (*fleet.User, error)

type LoginSSOUserFunc func(ctx context.Context, user *fleet.User, redirectURL string) (*fleet.SSOSession, error)

type SSOSettingsFunc func(ctx context.Context) (*fleet.SessionSSOSettings, error)

type LoginFunc func(ctx context.Context, email string, password string, supportsEmailVerification bool) (user *fleet.User, session *fleet.Session, err error)

type LogoutFunc func(ctx context.Context) (err error)

type CompleteMFAFunc func(ctx context.Context, token string) (*fleet.Session, *fleet.User, error)

type DestroySessionFunc func(ctx context.Context) (err error)

type GetInfoAboutSessionsForUserFunc func(ctx context.Context, id uint) (sessions []*fleet.Session, err error)

type DeleteSessionsForUserFunc func(ctx context.Context, id uint) (err error)

type GetInfoAboutSessionFunc func(ctx context.Context, id uint) (session *fleet.Session, err error)

type GetSessionByKeyFunc func(ctx context.Context, key string) (session *fleet.Session, err error)

type DeleteSessionFunc func(ctx context.Context, id uint) (err error)

type ApplyPackSpecsFunc func(ctx context.Context, specs []*fleet.PackSpec) ([]*fleet.PackSpec, error)

type GetPackSpecsFunc func(ctx context.Context) ([]*fleet.PackSpec, error)

type GetPackSpecFunc func(ctx context.Context, name string) (*fleet.PackSpec, error)

type NewPackFunc func(ctx context.Context, p fleet.PackPayload) (pack *fleet.Pack, err error)

type ModifyPackFunc func(ctx context.Context, id uint, p fleet.PackPayload) (pack *fleet.Pack, err error)

type ListPacksFunc func(ctx context.Context, opt fleet.PackListOptions) (packs []*fleet.Pack, err error)

type GetPackFunc func(ctx context.Context, id uint) (pack *fleet.Pack, err error)

type DeletePackFunc func(ctx context.Context, name string) (err error)

type DeletePackByIDFunc func(ctx context.Context, id uint) (err error)

type ListPacksForHostFunc func(ctx context.Context, hid uint) (packs []*fleet.Pack, err error)

type ApplyLabelSpecsFunc func(ctx context.Context, specs []*fleet.LabelSpec) error

type GetLabelSpecsFunc func(ctx context.Context) ([]*fleet.LabelSpec, error)

type GetLabelSpecFunc func(ctx context.Context, name string) (*fleet.LabelSpec, error)

type NewLabelFunc func(ctx context.Context, p fleet.LabelPayload) (label *fleet.Label, hostIDs []uint, err error)

type ModifyLabelFunc func(ctx context.Context, id uint, payload fleet.ModifyLabelPayload) (*fleet.Label, []uint, error)

type ListLabelsFunc func(ctx context.Context, opt fleet.ListOptions) (labels []*fleet.Label, err error)

type LabelsSummaryFunc func(ctx context.Context) (labels []*fleet.LabelSummary, err error)

type GetLabelFunc func(ctx context.Context, id uint) (label *fleet.Label, hostIDs []uint, err error)

type DeleteLabelFunc func(ctx context.Context, name string) (err error)

type DeleteLabelByIDFunc func(ctx context.Context, id uint) (err error)

type ListHostsInLabelFunc func(ctx context.Context, lid uint, opt fleet.HostListOptions) ([]*fleet.Host, error)

type ListLabelsForHostFunc func(ctx context.Context, hostID uint) ([]*fleet.Label, error)

type BatchValidateLabelsFunc func(ctx context.Context, labelNames []string) (map[string]fleet.LabelIdent, error)

type ApplyQuerySpecsFunc func(ctx context.Context, specs []*fleet.QuerySpec) error

type GetQuerySpecsFunc func(ctx context.Context, teamID *uint) ([]*fleet.QuerySpec, error)

type GetQuerySpecFunc func(ctx context.Context, teamID *uint, name string) (*fleet.QuerySpec, error)

type ListQueriesFunc func(ctx context.Context, opt fleet.ListOptions, teamID *uint, scheduled *bool, mergeInherited bool, platform *string) ([]*fleet.Query, int, *fleet.PaginationMetadata, error)

type GetQueryFunc func(ctx context.Context, id uint) (*fleet.Query, error)

type GetQueryReportResultsFunc func(ctx context.Context, id uint, teamID *uint) ([]fleet.HostQueryResultRow, bool, error)

type GetHostQueryReportResultsFunc func(ctx context.Context, hid uint, queryID uint) (rows []fleet.HostQueryReportResult, lastFetched *time.Time, err error)

type QueryReportIsClippedFunc func(ctx context.Context, queryID uint, maxQueryReportRows int) (bool, error)

type NewQueryFunc func(ctx context.Context, p fleet.QueryPayload) (*fleet.Query, error)

type ModifyQueryFunc func(ctx context.Context, id uint, p fleet.QueryPayload) (*fleet.Query, error)

type DeleteQueryFunc func(ctx context.Context, teamID *uint, name string) error

type DeleteQueryByIDFunc func(ctx context.Context, id uint) error

type DeleteQueriesFunc func(ctx context.Context, ids []uint) (uint, error)

type NewDistributedQueryCampaignByIdentifiersFunc func(ctx context.Context, queryString string, queryID *uint, hosts []string, labels []string) (*fleet.DistributedQueryCampaign, error)

type NewDistributedQueryCampaignFunc func(ctx context.Context, queryString string, queryID *uint, targets fleet.HostTargets) (*fleet.DistributedQueryCampaign, error)

type StreamCampaignResultsFunc func(ctx context.Context, conn *websocket.Conn, campaignID uint)

type GetCampaignReaderFunc func(ctx context.Context, campaign *fleet.DistributedQueryCampaign) (<-chan interface{}, context.CancelFunc, error)

type CompleteCampaignFunc func(ctx context.Context, campaign *fleet.DistributedQueryCampaign) error

type RunLiveQueryDeadlineFunc func(ctx context.Context, queryIDs []uint, query string, hostIDs []uint, deadline time.Duration) ([]fleet.QueryCampaignResult, int, error)

type AgentOptionsForHostFunc func(ctx context.Context, hostTeamID *uint, hostPlatform string) (json.RawMessage, error)

type AuthenticateDeviceFunc func(ctx context.Context, authToken string) (host *fleet.Host, debug bool, err error)

type ListHostsFunc func(ctx context.Context, opt fleet.HostListOptions) (hosts []*fleet.Host, err error)

type GetHostFunc func(ctx context.Context, id uint, opts fleet.HostDetailOptions) (host *fleet.HostDetail, err error)

type GetHostLiteFunc func(ctx context.Context, id uint) (host *fleet.Host, err error)

type GetHostHealthFunc func(ctx context.Context, id uint) (hostHealth *fleet.HostHealth, err error)

type GetHostSummaryFunc func(ctx context.Context, teamID *uint, platform *string, lowDiskSpace *int) (summary *fleet.HostSummary, err error)

type DeleteHostFunc func(ctx context.Context, id uint) (err error)

type HostByIdentifierFunc func(ctx context.Context, identifier string, opts fleet.HostDetailOptions) (*fleet.HostDetail, error)

type RefetchHostFunc func(ctx context.Context, id uint) (err error)

type AddHostsToTeamFunc func(ctx context.Context, teamID *uint, hostIDs []uint, skipBulkPending bool) error

type AddHostsToTeamByFilterFunc func(ctx context.Context, teamID *uint, filter *map[string]interface{}) error

type DeleteHostsFunc func(ctx context.Context, ids []uint, filters *map[string]interface{}) error

type CountHostsFunc func(ctx context.Context, labelID *uint, opts fleet.HostListOptions) (int, error)

type SearchHostsFunc func(ctx context.Context, matchQuery string, queryID *uint, excludedHostIDs []uint) ([]*fleet.Host, error)

type ListHostDeviceMappingFunc func(ctx context.Context, id uint) ([]*fleet.HostDeviceMapping, error)

type SetCustomHostDeviceMappingFunc func(ctx context.Context, hostID uint, email string) ([]*fleet.HostDeviceMapping, error)

type HostLiteByIdentifierFunc func(ctx context.Context, identifier string) (*fleet.HostLite, error)

type HostLiteByIDFunc func(ctx context.Context, id uint) (*fleet.HostLite, error)

type ListDevicePoliciesFunc func(ctx context.Context, host *fleet.Host) ([]*fleet.HostPolicy, error)

type GetDeviceSoftwareIconsTitleIconFunc func(ctx context.Context, teamID uint, titleID uint) ([]byte, int64, string, error)

type DisableAuthForPingFunc func(ctx context.Context)

type MacadminsDataFunc func(ctx context.Context, id uint) (*fleet.MacadminsData, error)

type MDMDataFunc func(ctx context.Context, id uint) (*fleet.HostMDM, error)

type AggregatedMacadminsDataFunc func(ctx context.Context, teamID *uint) (*fleet.AggregatedMacadminsData, error)

type AggregatedMDMDataFunc func(ctx context.Context, id *uint, platform string) (fleet.AggregatedMDMData, error)

type GetMDMSolutionFunc func(ctx context.Context, mdmID uint) (*fleet.MDMSolution, error)

type GetMunkiIssueFunc func(ctx context.Context, munkiIssueID uint) (*fleet.MunkiIssue, error)

type HostEncryptionKeyFunc func(ctx context.Context, id uint) (*fleet.HostDiskEncryptionKey, error)

type EscrowLUKSDataFunc func(ctx context.Context, passphrase string, salt string, keySlot *uint, clientError string) error

type AddLabelsToHostFunc func(ctx context.Context, id uint, labels []string) error

type RemoveLabelsFromHostFunc func(ctx context.Context, id uint, labels []string) error

type OSVersionsFunc func(ctx context.Context, teamID *uint, platform *string, name *string, version *string, opts fleet.ListOptions, includeCVSS bool) (*fleet.OSVersions, int, *fleet.PaginationMetadata, error)

type OSVersionFunc func(ctx context.Context, osVersionID uint, teamID *uint, includeCVSS bool) (*fleet.OSVersion, *time.Time, error)

type ListHostSoftwareFunc func(ctx context.Context, hostID uint, opts fleet.HostSoftwareTitleListOptions) ([]*fleet.HostSoftwareWithInstaller, *fleet.PaginationMetadata, error)

type UpdateSoftwareNameFunc func(ctx context.Context, titleID uint, name string) error

type ListHostCertificatesFunc func(ctx context.Context, hostID uint, opts fleet.ListOptions) ([]*fleet.HostCertificatePayload, *fleet.PaginationMetadata, error)

type NewAppConfigFunc func(ctx context.Context, p fleet.AppConfig) (info *fleet.AppConfig, err error)

type AppConfigObfuscatedFunc func(ctx context.Context) (info *fleet.AppConfig, err error)

type ModifyAppConfigFunc func(ctx context.Context, p []byte, applyOpts fleet.ApplySpecOptions) (info *fleet.AppConfig, err error)

type SandboxEnabledFunc func() bool

type ApplyEnrollSecretSpecFunc func(ctx context.Context, spec *fleet.EnrollSecretSpec, applyOpts fleet.ApplySpecOptions) error

type GetEnrollSecretSpecFunc func(ctx context.Context) (*fleet.EnrollSecretSpec, error)

type CertificateChainFunc func(ctx context.Context) (cert []byte, err error)

type SetupRequiredFunc func(ctx context.Context) (bool, error)

type VersionFunc func(ctx context.Context) (*version.Info, error)

type LicenseFunc func(ctx context.Context) (*fleet.LicenseInfo, error)

type PartnershipsConfigFunc func(ctx context.Context) (*fleet.Partnerships, error)

type LoggingConfigFunc func(ctx context.Context) (*fleet.Logging, error)

type EmailConfigFunc func(ctx context.Context) (*fleet.EmailConfig, error)

type UpdateIntervalConfigFunc func(ctx context.Context) (*fleet.UpdateIntervalConfig, error)

type VulnerabilitiesConfigFunc func(ctx context.Context) (*fleet.VulnerabilitiesConfig, error)

type InviteNewUserFunc func(ctx context.Context, payload fleet.InvitePayload) (invite *fleet.Invite, err error)

type DeleteInviteFunc func(ctx context.Context, id uint) (err error)

type ListInvitesFunc func(ctx context.Context, opt fleet.ListOptions) (invites []*fleet.Invite, err error)

type VerifyInviteFunc func(ctx context.Context, token string) (invite *fleet.Invite, err error)

type UpdateInviteFunc func(ctx context.Context, id uint, payload fleet.InvitePayload) (*fleet.Invite, error)

type SearchTargetsFunc func(ctx context.Context, searchQuery string, queryID *uint, targets fleet.HostTargets) (*fleet.TargetSearchResults, error)

type CountHostsInTargetsFunc func(ctx context.Context, queryID *uint, targets fleet.HostTargets) (*fleet.TargetMetrics, error)

type GetScheduledQueriesInPackFunc func(ctx context.Context, id uint, opts fleet.ListOptions) (queries []*fleet.ScheduledQuery, err error)

type GetScheduledQueryFunc func(ctx context.Context, id uint) (query *fleet.ScheduledQuery, err error)

type ScheduleQueryFunc func(ctx context.Context, sq *fleet.ScheduledQuery) (query *fleet.ScheduledQuery, err error)

type DeleteScheduledQueryFunc func(ctx context.Context, id uint) (err error)

type ModifyScheduledQueryFunc func(ctx context.Context, id uint, p fleet.ScheduledQueryPayload) (query *fleet.ScheduledQuery, err error)

type StatusResultStoreFunc func(ctx context.Context) error

type StatusLiveQueryFunc func(ctx context.Context) error

type CarveBeginFunc func(ctx context.Context, payload fleet.CarveBeginPayload) (*fleet.CarveMetadata, error)

type CarveBlockFunc func(ctx context.Context, payload fleet.CarveBlockPayload) error

type GetCarveFunc func(ctx context.Context, id int64) (*fleet.CarveMetadata, error)

type ListCarvesFunc func(ctx context.Context, opt fleet.CarveListOptions) ([]*fleet.CarveMetadata, error)

type GetBlockFunc func(ctx context.Context, carveId int64, blockId int64) ([]byte, error)

type NewTeamFunc func(ctx context.Context, p fleet.TeamPayload) (*fleet.Team, error)

type GetTeamFunc func(ctx context.Context, id uint) (*fleet.Team, error)

type ModifyTeamFunc func(ctx context.Context, id uint, payload fleet.TeamPayload) (*fleet.Team, error)

type ModifyTeamAgentOptionsFunc func(ctx context.Context, id uint, teamOptions json.RawMessage, applyOptions fleet.ApplySpecOptions) (*fleet.Team, error)

type AddTeamUsersFunc func(ctx context.Context, teamID uint, users []fleet.TeamUser) (*fleet.Team, error)

type DeleteTeamUsersFunc func(ctx context.Context, teamID uint, users []fleet.TeamUser) (*fleet.Team, error)

type DeleteTeamFunc func(ctx context.Context, id uint) error

type ListTeamsFunc func(ctx context.Context, opt fleet.ListOptions) ([]*fleet.Team, error)

type ListTeamUsersFunc func(ctx context.Context, teamID uint, opt fleet.ListOptions) ([]*fleet.User, error)

type ListAvailableTeamsForUserFunc func(ctx context.Context, user *fleet.User) ([]*fleet.TeamSummary, error)

type TeamEnrollSecretsFunc func(ctx context.Context, teamID uint) ([]*fleet.EnrollSecret, error)

type ModifyTeamEnrollSecretsFunc func(ctx context.Context, teamID uint, secrets []fleet.EnrollSecret) ([]*fleet.EnrollSecret, error)

type ApplyTeamSpecsFunc func(ctx context.Context, specs []*fleet.TeamSpec, applyOpts fleet.ApplyTeamSpecOptions) (map[string]uint, error)

type NewActivityFunc func(ctx context.Context, user *fleet.User, activity fleet.ActivityDetails) error

type ListActivitiesFunc func(ctx context.Context, opt fleet.ListActivitiesOptions) ([]*fleet.Activity, *fleet.PaginationMetadata, error)

type ListHostUpcomingActivitiesFunc func(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.UpcomingActivity, *fleet.PaginationMetadata, error)

type ListHostPastActivitiesFunc func(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.Activity, *fleet.PaginationMetadata, error)

type CancelHostUpcomingActivityFunc func(ctx context.Context, hostID uint, executionID string) error

type ApplyUserRolesSpecsFunc func(ctx context.Context, specs fleet.UsersRoleSpec) error

type GlobalScheduleQueryFunc func(ctx context.Context, sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error)

type GetGlobalScheduledQueriesFunc func(ctx context.Context, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error)

type ModifyGlobalScheduledQueriesFunc func(ctx context.Context, id uint, q fleet.ScheduledQueryPayload) (*fleet.ScheduledQuery, error)

type DeleteGlobalScheduledQueriesFunc func(ctx context.Context, id uint) error

type TranslateFunc func(ctx context.Context, payloads []fleet.TranslatePayload) ([]fleet.TranslatePayload, error)

type TeamScheduleQueryFunc func(ctx context.Context, teamID uint, sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error)

type GetTeamScheduledQueriesFunc func(ctx context.Context, teamID uint, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error)

type ModifyTeamScheduledQueriesFunc func(ctx context.Context, teamID uint, scheduledQueryID uint, q fleet.ScheduledQueryPayload) (*fleet.ScheduledQuery, error)

type DeleteTeamScheduledQueriesFunc func(ctx context.Context, teamID uint, id uint) error

type NewGlobalPolicyFunc func(ctx context.Context, p fleet.PolicyPayload) (*fleet.Policy, error)

type ListGlobalPoliciesFunc func(ctx context.Context, opts fleet.ListOptions) ([]*fleet.Policy, error)

type DeleteGlobalPoliciesFunc func(ctx context.Context, ids []uint) ([]uint, error)

type ModifyGlobalPolicyFunc func(ctx context.Context, id uint, p fleet.ModifyPolicyPayload) (*fleet.Policy, error)

type GetPolicyByIDQueriesFunc func(ctx context.Context, policyID uint) (*fleet.Policy, error)

type ApplyPolicySpecsFunc func(ctx context.Context, policies []*fleet.PolicySpec) error

type CountGlobalPoliciesFunc func(ctx context.Context, matchQuery string) (int, error)

type AutofillPolicySqlFunc func(ctx context.Context, sql string) (description string, resolution string, err error)

type ListSoftwareFunc func(ctx context.Context, opt fleet.SoftwareListOptions) ([]fleet.Software, *fleet.PaginationMetadata, error)

type SoftwareByIDFunc func(ctx context.Context, id uint, teamID *uint, includeCVEScores bool) (*fleet.Software, error)

type CountSoftwareFunc func(ctx context.Context, opt fleet.SoftwareListOptions) (int, error)

type SaveHostSoftwareInstallResultFunc func(ctx context.Context, result *fleet.HostSoftwareInstallResultPayload) error

type ListSoftwareTitlesFunc func(ctx context.Context, opt fleet.SoftwareTitleListOptions) ([]fleet.SoftwareTitleListResult, int, *fleet.PaginationMetadata, error)

type SoftwareTitleByIDFunc func(ctx context.Context, id uint, teamID *uint) (*fleet.SoftwareTitle, error)

type InstallSoftwareTitleFunc func(ctx context.Context, hostID uint, softwareTitleID uint) error

type GetVPPTokenIfCanInstallVPPAppsFunc func(ctx context.Context, appleDevice bool, host *fleet.Host) (string, error)

type InstallVPPAppPostValidationFunc func(ctx context.Context, host *fleet.Host, vppApp *fleet.VPPApp, token string, opts fleet.HostSoftwareInstallOptions) (string, error)

type UninstallSoftwareTitleFunc func(ctx context.Context, hostID uint, softwareTitleID uint) error

type GetSoftwareInstallResultsFunc func(ctx context.Context, installUUID string) (*fleet.HostSoftwareInstallerResult, error)

type BatchSetSoftwareInstallersFunc func(ctx context.Context, tmName string, payloads []*fleet.SoftwareInstallerPayload, dryRun bool) (string, error)

type GetBatchSetSoftwareInstallersResultFunc func(ctx context.Context, tmName string, requestUUID string, dryRun bool) (status string, message string, packages []fleet.SoftwarePackageResponse, err error)

type SelfServiceInstallSoftwareTitleFunc func(ctx context.Context, host *fleet.Host, softwareTitleID uint) error

type HasSelfServiceSoftwareInstallersFunc func(ctx context.Context, host *fleet.Host) (bool, error)

type GetAppStoreAppsFunc func(ctx context.Context, teamID *uint) ([]*fleet.VPPApp, error)

type AddAppStoreAppFunc func(ctx context.Context, teamID *uint, appTeam fleet.VPPAppTeam) (uint, error)

type UpdateAppStoreAppFunc func(ctx context.Context, titleID uint, teamID *uint, selfService bool, labelsIncludeAny []string, labelsExcludeAny []string, categories []string) (*fleet.VPPAppStoreApp, error)

type MDMAppleProcessOTAEnrollmentFunc func(ctx context.Context, certificates []*x509.Certificate, rootSigner *x509.Certificate, enrollSecret string, idpUUID string, deviceInfo fleet.MDMAppleMachineInfo) ([]byte, error)

type ListVulnerabilitiesFunc func(ctx context.Context, opt fleet.VulnListOptions) ([]fleet.VulnerabilityWithMetadata, *fleet.PaginationMetadata, error)

type VulnerabilityFunc func(ctx context.Context, cve string, teamID *uint, useCVSScores bool) (vuln *fleet.VulnerabilityWithMetadata, known bool, err error)

type CountVulnerabilitiesFunc func(ctx context.Context, opt fleet.VulnListOptions) (uint, error)

type ListOSVersionsByCVEFunc func(ctx context.Context, cve string, teamID *uint) (result []*fleet.VulnerableOS, updatedAt time.Time, err error)

type ListSoftwareByCVEFunc func(ctx context.Context, cve string, teamID *uint) (result []*fleet.VulnerableSoftware, updatedAt time.Time, err error)

type NewTeamPolicyFunc func(ctx context.Context, teamID uint, p fleet.NewTeamPolicyPayload) (*fleet.Policy, error)

type ListTeamPoliciesFunc func(ctx context.Context, teamID uint, opts fleet.ListOptions, iopts fleet.ListOptions, mergeInherited bool) (teamPolicies []*fleet.Policy, inheritedPolicies []*fleet.Policy, err error)

type DeleteTeamPoliciesFunc func(ctx context.Context, teamID uint, ids []uint) ([]uint, error)

type ModifyTeamPolicyFunc func(ctx context.Context, teamID uint, id uint, p fleet.ModifyPolicyPayload) (*fleet.Policy, error)

type GetTeamPolicyByIDQueriesFunc func(ctx context.Context, teamID uint, policyID uint) (*fleet.Policy, error)

type CountTeamPoliciesFunc func(ctx context.Context, teamID uint, matchQuery string, mergeInherited bool) (int, error)

type LookupGeoIPFunc func(ctx context.Context, ip string) *fleet.GeoLocation

type GetSoftwareInstallDetailsFunc func(ctx context.Context, installUUID string) (*fleet.SoftwareInstallDetails, error)

type GetAppleMDMFunc func(ctx context.Context) (*fleet.AppleMDM, error)

type GetAppleBMFunc func(ctx context.Context) (*fleet.AppleBM, error)

type RequestMDMAppleCSRFunc func(ctx context.Context, email string, org string) (*fleet.AppleCSR, error)

type GetMDMAppleCSRFunc func(ctx context.Context) ([]byte, error)

type UploadMDMAppleAPNSCertFunc func(ctx context.Context, cert io.ReadSeeker) error

type DeleteMDMAppleAPNSCertFunc func(ctx context.Context) error

type UploadVPPTokenFunc func(ctx context.Context, token io.ReadSeeker) (*fleet.VPPTokenDB, error)

type UpdateVPPTokenFunc func(ctx context.Context, id uint, token io.ReadSeeker) (*fleet.VPPTokenDB, error)

type UpdateVPPTokenTeamsFunc func(ctx context.Context, tokenID uint, teamIDs []uint) (*fleet.VPPTokenDB, error)

type GetVPPTokensFunc func(ctx context.Context) ([]*fleet.VPPTokenDB, error)

type DeleteVPPTokenFunc func(ctx context.Context, tokenID uint) error

type BatchAssociateVPPAppsFunc func(ctx context.Context, teamName string, payloads []fleet.VPPBatchPayload, dryRun bool) ([]fleet.VPPAppResponse, error)

type GetHostDEPAssignmentFunc func(ctx context.Context, host *fleet.Host) (*fleet.HostDEPAssignment, error)

type NewMDMAppleConfigProfileFunc func(ctx context.Context, teamID uint, r io.Reader, labels []string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMAppleConfigProfile, error)

type NewMDMAppleDeclarationFunc func(ctx context.Context, teamID uint, r io.Reader, labels []string, name string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMAppleDeclaration, error)

type GetMDMAppleConfigProfileByDeprecatedIDFunc func(ctx context.Context, profileID uint) (*fleet.MDMAppleConfigProfile, error)

type GetMDMAppleConfigProfileFunc func(ctx context.Context, profileUUID string) (*fleet.MDMAppleConfigProfile, error)

type GetMDMAppleDeclarationFunc func(ctx context.Context, declarationUUID string) (*fleet.MDMAppleDeclaration, error)

type DeleteMDMAppleConfigProfileByDeprecatedIDFunc func(ctx context.Context, profileID uint) error

type DeleteMDMAppleConfigProfileFunc func(ctx context.Context, profileUUID string) error

type DeleteMDMAppleDeclarationFunc func(ctx context.Context, declarationUUID string) error

type ListMDMAppleConfigProfilesFunc func(ctx context.Context, teamID uint) ([]*fleet.MDMAppleConfigProfile, error)

type GetMDMAppleFileVaultSummaryFunc func(ctx context.Context, teamID *uint) (*fleet.MDMAppleFileVaultSummary, error)

type GetMDMAppleProfilesSummaryFunc func(ctx context.Context, teamID *uint) (*fleet.MDMProfilesSummary, error)

type GetMDMAppleEnrollmentProfileByTokenFunc func(ctx context.Context, enrollmentToken string, enrollmentRef string) (profile []byte, err error)

type GetMDMAppleAccountEnrollmentProfileFunc func(ctx context.Context, enrollReference string) (profile []byte, err error)

type SkipAuthFunc func(ctx context.Context)

type ReconcileMDMAppleEnrollRefFunc func(ctx context.Context, enrollRef string, machineInfo *fleet.MDMAppleMachineInfo) (string, error)

type GetDeviceMDMAppleEnrollmentProfileFunc func(ctx context.Context) ([]byte, error)

type GetMDMAppleCommandResultsFunc func(ctx context.Context, commandUUID string) ([]*fleet.MDMCommandResult, error)

type ListMDMAppleCommandsFunc func(ctx context.Context, opts *fleet.MDMCommandListOptions) ([]*fleet.MDMAppleCommand, error)

type UploadMDMAppleInstallerFunc func(ctx context.Context, name string, size int64, installer io.Reader) (*fleet.MDMAppleInstaller, error)

type GetMDMAppleInstallerByIDFunc func(ctx context.Context, id uint) (*fleet.MDMAppleInstaller, error)

type DeleteMDMAppleInstallerFunc func(ctx context.Context, id uint) error

type GetMDMAppleInstallerByTokenFunc func(ctx context.Context, token string) (*fleet.MDMAppleInstaller, error)

type GetMDMAppleInstallerDetailsByTokenFunc func(ctx context.Context, token string) (*fleet.MDMAppleInstaller, error)

type ListMDMAppleInstallersFunc func(ctx context.Context) ([]fleet.MDMAppleInstaller, error)

type ListMDMAppleDevicesFunc func(ctx context.Context) ([]fleet.MDMAppleDevice, error)

type NewMDMAppleDEPKeyPairFunc func(ctx context.Context) (*fleet.MDMAppleDEPKeyPair, error)

type GenerateABMKeyPairFunc func(ctx context.Context) (*fleet.MDMAppleDEPKeyPair, error)

type UploadABMTokenFunc func(ctx context.Context, token io.Reader) (*fleet.ABMToken, error)

type ListABMTokensFunc func(ctx context.Context) ([]*fleet.ABMToken, error)

type CountABMTokensFunc func(ctx context.Context) (int, error)

type UpdateABMTokenTeamsFunc func(ctx context.Context, tokenID uint, macOSTeamID *uint, iOSTeamID *uint, iPadOSTeamID *uint) (*fleet.ABMToken, error)

type DeleteABMTokenFunc func(ctx context.Context, tokenID uint) error

type RenewABMTokenFunc func(ctx context.Context, token io.Reader, tokenID uint) (*fleet.ABMToken, error)

type EnqueueMDMAppleCommandFunc func(ctx context.Context, rawBase64Cmd string, deviceIDs []string) (result *fleet.CommandEnqueueResult, err error)

type EnqueueMDMAppleCommandRemoveEnrollmentProfileFunc func(ctx context.Context, hostID uint) error

type BatchSetMDMAppleProfilesFunc func(ctx context.Context, teamID *uint, teamName *string, profiles [][]byte, dryRun bool, skipBulkPending bool) error

type MDMApplePreassignProfileFunc func(ctx context.Context, payload fleet.MDMApplePreassignProfilePayload) error

type MDMAppleMatchPreassignmentFunc func(ctx context.Context, externalHostIdentifier string) error

type MDMAppleDeviceLockFunc func(ctx context.Context, hostID uint) error

type MDMAppleEraseDeviceFunc func(ctx context.Context, hostID uint) error

type MDMListHostConfigurationProfilesFunc func(ctx context.Context, hostID uint) ([]*fleet.MDMAppleConfigProfile, error)

type MDMAppleEnableFileVaultAndEscrowFunc func(ctx context.Context, teamID *uint) error

type MDMAppleDisableFileVaultAndEscrowFunc func(ctx context.Context, teamID *uint) error

type UpdateMDMDiskEncryptionFunc func(ctx context.Context, teamID *uint, enableDiskEncryption *bool, requireBitLockerPIN *bool) error

type VerifyMDMAppleConfiguredFunc func(ctx context.Context) error

type VerifyMDMWindowsConfiguredFunc func(ctx context.Context) error

type VerifyMDMAppleOrWindowsConfiguredFunc func(ctx context.Context) error

type MDMAppleUploadBootstrapPackageFunc func(ctx context.Context, name string, pkg io.Reader, teamID uint, dryRun bool) error

type GetMDMAppleBootstrapPackageBytesFunc func(ctx context.Context, token string) (*fleet.MDMAppleBootstrapPackage, error)

type GetMDMAppleBootstrapPackageMetadataFunc func(ctx context.Context, teamID uint, forUpdate bool) (*fleet.MDMAppleBootstrapPackage, error)

type DeleteMDMAppleBootstrapPackageFunc func(ctx context.Context, teamID *uint, dryRun bool) error

type GetMDMAppleBootstrapPackageSummaryFunc func(ctx context.Context, teamID *uint) (*fleet.MDMAppleBootstrapPackageSummary, error)

type MDMGetEULABytesFunc func(ctx context.Context, token string) (*fleet.MDMEULA, error)

type MDMGetEULAMetadataFunc func(ctx context.Context) (*fleet.MDMEULA, error)

type MDMCreateEULAFunc func(ctx context.Context, name string, file io.ReadSeeker, dryRun bool) error

type MDMDeleteEULAFunc func(ctx context.Context, token string, dryRun bool) error

type SetOrUpdateMDMAppleSetupAssistantFunc func(ctx context.Context, asst *fleet.MDMAppleSetupAssistant) (*fleet.MDMAppleSetupAssistant, error)

type GetMDMAppleSetupAssistantFunc func(ctx context.Context, teamID *uint) (*fleet.MDMAppleSetupAssistant, error)

type DeleteMDMAppleSetupAssistantFunc func(ctx context.Context, teamID *uint) error

type HasCustomSetupAssistantConfigurationWebURLFunc func(ctx context.Context, teamID *uint) (bool, error)

type UpdateMDMAppleSetupFunc func(ctx context.Context, payload fleet.MDMAppleSetupPayload) error

type TriggerMigrateMDMDeviceFunc func(ctx context.Context, host *fleet.Host) error

type GetMDMManualEnrollmentProfileFunc func(ctx context.Context) ([]byte, error)

type TriggerLinuxDiskEncryptionEscrowFunc func(ctx context.Context, host *fleet.Host) error

type CheckMDMAppleEnrollmentWithMinimumOSVersionFunc func(ctx context.Context, m *fleet.MDMAppleMachineInfo) (*fleet.MDMAppleSoftwareUpdateRequired, error)

type GetOTAProfileFunc func(ctx context.Context, enrollSecret string, idpUUID string) ([]byte, error)

type TriggerCronScheduleFunc func(ctx context.Context, name string) error

type ResetAutomationFunc func(ctx context.Context, teamIDs []uint, policyIDs []uint) error

type ProcessMDMMicrosoftDiscoveryFunc func(ctx context.Context, req *fleet.SoapRequest) (*fleet.SoapResponse, error)

type GetMDMMicrosoftDiscoveryResponseFunc func(ctx context.Context, upnEmail string) (*fleet.DiscoverResponse, error)

type GetMDMMicrosoftSTSAuthResponseFunc func(ctx context.Context, appru string, loginHint string) (string, error)

type GetMDMWindowsPolicyResponseFunc func(ctx context.Context, authToken *fleet.HeaderBinarySecurityToken) (*fleet.GetPoliciesResponse, error)

type GetMDMWindowsEnrollResponseFunc func(ctx context.Context, secTokenMsg *fleet.RequestSecurityToken, authToken *fleet.HeaderBinarySecurityToken) (*fleet.RequestSecurityTokenResponseCollection, error)

type GetAuthorizedSoapFaultFunc func(ctx context.Context, eType string, origMsg int, errorMsg error) *fleet.SoapFault

type SignMDMMicrosoftClientCSRFunc func(ctx context.Context, subject string, csr *x509.CertificateRequest) ([]byte, string, error)

type GetMDMWindowsManagementResponseFunc func(ctx context.Context, reqSyncML *fleet.SyncML, reqCerts []*x509.Certificate) (*fleet.SyncML, error)

type GetMDMWindowsTOSContentFunc func(ctx context.Context, redirectUri string, reqID string) (string, error)

type RunMDMCommandFunc func(ctx context.Context, rawBase64Cmd string, deviceIDs []string) (result *fleet.CommandEnqueueResult, err error)

type GetMDMCommandResultsFunc func(ctx context.Context, commandUUID string) ([]*fleet.MDMCommandResult, error)

type ListMDMCommandsFunc func(ctx context.Context, opts *fleet.MDMCommandListOptions) ([]*fleet.MDMCommand, error)

type SetOrUpdateDiskEncryptionKeyFunc func(ctx context.Context, encryptionKey string, clientError string) error

type GetMDMWindowsConfigProfileFunc func(ctx context.Context, profileUUID string) (*fleet.MDMWindowsConfigProfile, error)

type DeleteMDMWindowsConfigProfileFunc func(ctx context.Context, profileUUID string) error

type GetMDMWindowsProfilesSummaryFunc func(ctx context.Context, teamID *uint) (*fleet.MDMProfilesSummary, error)

type NewMDMWindowsConfigProfileFunc func(ctx context.Context, teamID uint, profileName string, r io.Reader, labels []string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMWindowsConfigProfile, error)

type NewMDMUnsupportedConfigProfileFunc func(ctx context.Context, teamID uint, filename string) error

type ListMDMConfigProfilesFunc func(ctx context.Context, teamID *uint, opt fleet.ListOptions) ([]*fleet.MDMConfigProfilePayload, *fleet.PaginationMetadata, error)

type BatchSetMDMProfilesFunc func(ctx context.Context, teamID *uint, teamName *string, profiles []fleet.MDMProfileBatchPayload, dryRun bool, skipBulkPending bool, assumeEnabled *bool, noCache bool) error

type LinuxHostDiskEncryptionStatusFunc func(ctx context.Context, host fleet.Host) (fleet.HostMDMDiskEncryption, error)

type GetMDMLinuxProfilesSummaryFunc func(ctx context.Context, teamId *uint) (fleet.MDMProfilesSummary, error)

type GetMDMDiskEncryptionSummaryFunc func(ctx context.Context, teamID *uint) (*fleet.MDMDiskEncryptionSummary, error)

type ResendHostMDMProfileFunc func(ctx context.Context, hostID uint, profileUUID string) error

type ResendDeviceHostMDMProfileFunc func(ctx context.Context, host *fleet.Host, profileUUID string) error

type BatchResendMDMProfileToHostsFunc func(ctx context.Context, profileUUID string, filters fleet.BatchResendMDMProfileFilters) error

type GetMDMConfigProfileStatusFunc func(ctx context.Context, profileUUID string) (fleet.MDMConfigProfileStatus, error)

type RunHostScriptFunc func(ctx context.Context, request *fleet.HostScriptRequestPayload, waitForResult time.Duration) (*fleet.HostScriptResult, error)

type GetScriptIDByNameFunc func(ctx context.Context, name string, teamID *uint) (uint, error)

type GetHostScriptFunc func(ctx context.Context, execID string) (*fleet.HostScriptResult, error)

type SaveHostScriptResultFunc func(ctx context.Context, result *fleet.HostScriptResultPayload) error

type GetScriptResultFunc func(ctx context.Context, execID string) (*fleet.HostScriptResult, error)

type GetSelfServiceUninstallScriptResultFunc func(ctx context.Context, host *fleet.Host, execID string) (*fleet.HostScriptResult, error)

type NewScriptFunc func(ctx context.Context, teamID *uint, name string, r io.Reader) (*fleet.Script, error)

type UpdateScriptFunc func(ctx context.Context, scriptID uint, r io.Reader) (*fleet.Script, error)

type DeleteScriptFunc func(ctx context.Context, scriptID uint) error

type ListScriptsFunc func(ctx context.Context, teamID *uint, opt fleet.ListOptions) ([]*fleet.Script, *fleet.PaginationMetadata, error)

type GetScriptFunc func(ctx context.Context, scriptID uint, downloadRequested bool) (*fleet.Script, []byte, error)

type GetHostScriptDetailsFunc func(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.HostScriptDetail, *fleet.PaginationMetadata, error)

type BatchSetScriptsFunc func(ctx context.Context, maybeTmID *uint, maybeTmName *string, payloads []fleet.ScriptPayload, dryRun bool) ([]fleet.ScriptResponse, error)

type BatchScriptExecuteFunc func(ctx context.Context, scriptID uint, hostIDs []uint, filters *map[string]any, notBefore *time.Time) (string, error)

type BatchScriptExecutionSummaryFunc func(ctx context.Context, batchExecutionID string) (*fleet.BatchActivity, error)

type BatchScriptExecutionStatusFunc func(ctx context.Context, batchExecutionID string) (*fleet.BatchActivity, error)

type BatchScriptExecutionHostResultsFunc func(ctx context.Context, batchExecutionID string, status fleet.BatchScriptExecutionStatus, opt fleet.ListOptions) ([]fleet.BatchScriptHost, *fleet.PaginationMetadata, uint, error)

type BatchScriptExecutionListFunc func(ctx context.Context, filter fleet.BatchExecutionStatusFilter) ([]fleet.BatchActivity, int64, error)

type BatchScriptCancelFunc func(ctx context.Context, batchExecutionID string) error

type LockHostFunc func(ctx context.Context, hostID uint, viewPIN bool) (unlockPIN string, err error)

type UnlockHostFunc func(ctx context.Context, hostID uint) (unlockPIN string, err error)

type WipeHostFunc func(ctx context.Context, hostID uint, metadata *fleet.MDMWipeMetadata) error

type UploadSoftwareInstallerFunc func(ctx context.Context, payload *fleet.UploadSoftwareInstallerPayload) (*fleet.SoftwareInstaller, error)

type UpdateSoftwareInstallerFunc func(ctx context.Context, payload *fleet.UpdateSoftwareInstallerPayload) (*fleet.SoftwareInstaller, error)

type DeleteSoftwareInstallerFunc func(ctx context.Context, titleID uint, teamID *uint) error

type GenerateSoftwareInstallerTokenFunc func(ctx context.Context, alt string, titleID uint, teamID *uint) (string, error)

type GetSoftwareInstallerTokenMetadataFunc func(ctx context.Context, token string, titleID uint) (*fleet.SoftwareInstallerTokenMetadata, error)

type GetSoftwareInstallerMetadataFunc func(ctx context.Context, skipAuthz bool, titleID uint, teamID *uint) (*fleet.SoftwareInstaller, error)

type DownloadSoftwareInstallerFunc func(ctx context.Context, skipAuthz bool, alt string, titleID uint, teamID *uint) (*fleet.DownloadSoftwareInstallerPayload, error)

type OrbitDownloadSoftwareInstallerFunc func(ctx context.Context, installerID uint) (*fleet.DownloadSoftwareInstallerPayload, error)

type GetSoftwareTitleIconFunc func(ctx context.Context, teamID uint, titleID uint) ([]byte, int64, string, error)

type UploadSoftwareTitleIconFunc func(ctx context.Context, payload *fleet.UploadSoftwareTitleIconPayload) (fleet.SoftwareTitleIcon, error)

type DeleteSoftwareTitleIconFunc func(ctx context.Context, teamID uint, titleID uint) error

type SetSetupExperienceSoftwareFunc func(ctx context.Context, platform string, teamID uint, titleIDs []uint) error

type ListSetupExperienceSoftwareFunc func(ctx context.Context, platform string, teamID uint, opts fleet.ListOptions) ([]fleet.SoftwareTitleListResult, int, *fleet.PaginationMetadata, error)

type GetOrbitSetupExperienceStatusFunc func(ctx context.Context, orbitNodeKey string, forceRelease bool) (*fleet.SetupExperienceStatusPayload, error)

type GetSetupExperienceScriptFunc func(ctx context.Context, teamID *uint, downloadRequested bool) (*fleet.Script, []byte, error)

type SetSetupExperienceScriptFunc func(ctx context.Context, teamID *uint, name string, r io.Reader) error

type DeleteSetupExperienceScriptFunc func(ctx context.Context, teamID *uint) error

type SetupExperienceNextStepFunc func(ctx context.Context, host *fleet.Host) (bool, error)

type SetupExperienceInitFunc func(ctx context.Context) (*fleet.SetupExperienceInitResult, error)

type GetDeviceSetupExperienceStatusFunc func(ctx context.Context) (*fleet.DeviceSetupExperienceStatusPayload, error)

type AddFleetMaintainedAppFunc func(ctx context.Context, teamID *uint, appID uint, installScript string, preInstallQuery string, postInstallScript string, uninstallScript string, selfService bool, automaticInstall bool, labelsIncludeAny []string, labelsExcludeAny []string) (uint, error)

type ListFleetMaintainedAppsFunc func(ctx context.Context, teamID *uint, opts fleet.ListOptions) ([]fleet.MaintainedApp, *fleet.PaginationMetadata, error)

type GetFleetMaintainedAppFunc func(ctx context.Context, appID uint, teamID *uint) (*fleet.MaintainedApp, error)

type CalendarWebhookFunc func(ctx context.Context, eventUUID string, channelID string, resourceState string) error

type CreateSecretVariablesFunc func(ctx context.Context, secretVariables []fleet.SecretVariable, dryRun bool) error

type CreateSecretVariableFunc func(ctx context.Context, name string, value string) (id uint, err error)

type ListSecretVariablesFunc func(ctx context.Context, opts fleet.ListOptions) (secretVariables []fleet.SecretVariableIdentifier, meta *fleet.PaginationMetadata, count int, err error)

type DeleteSecretVariableFunc func(ctx context.Context, id uint) error

type ScimDetailsFunc func(ctx context.Context) (fleet.ScimDetails, error)

type ConditionalAccessMicrosoftCreateIntegrationFunc func(ctx context.Context, tenantID string) (adminConsentURL string, err error)

type ConditionalAccessMicrosoftGetFunc func(ctx context.Context) (*fleet.ConditionalAccessMicrosoftIntegration, error)

type ConditionalAccessMicrosoftConfirmFunc func(ctx context.Context) (configurationCompleted bool, err error)

type ConditionalAccessMicrosoftDeleteFunc func(ctx context.Context) error

type ListCertificateAuthoritiesFunc func(ctx context.Context) ([]*fleet.CertificateAuthoritySummary, error)

type GetCertificateAuthorityFunc func(ctx context.Context, id uint) (*fleet.CertificateAuthority, error)

type NewCertificateAuthorityFunc func(ctx context.Context, p fleet.CertificateAuthorityPayload) (*fleet.CertificateAuthority, error)

type DeleteCertificateAuthorityFunc func(ctx context.Context, certificateAuthorityID uint) error

type UpdateCertificateAuthorityFunc func(ctx context.Context, id uint, p fleet.CertificateAuthorityUpdatePayload) error

type RequestCertificateFunc func(ctx context.Context, p fleet.RequestCertificatePayload) (*string, error)

type BatchApplyCertificateAuthoritiesFunc func(ctx context.Context, groupedCAs fleet.GroupedCertificateAuthorities, dryRun bool, viaGitOps bool) error

type GetGroupedCertificateAuthoritiesFunc func(ctx context.Context, includeSecrets bool) (*fleet.GroupedCertificateAuthorities, error)

type Service struct {
	EnrollOsqueryFunc        EnrollOsqueryFunc
	EnrollOsqueryFuncInvoked bool

	AuthenticateHostFunc        AuthenticateHostFunc
	AuthenticateHostFuncInvoked bool

	GetClientConfigFunc        GetClientConfigFunc
	GetClientConfigFuncInvoked bool

	GetDistributedQueriesFunc        GetDistributedQueriesFunc
	GetDistributedQueriesFuncInvoked bool

	SubmitDistributedQueryResultsFunc        SubmitDistributedQueryResultsFunc
	SubmitDistributedQueryResultsFuncInvoked bool

	SubmitStatusLogsFunc        SubmitStatusLogsFunc
	SubmitStatusLogsFuncInvoked bool

	SubmitResultLogsFunc        SubmitResultLogsFunc
	SubmitResultLogsFuncInvoked bool

	YaraRuleByNameFunc        YaraRuleByNameFunc
	YaraRuleByNameFuncInvoked bool

	GetTransparencyURLFunc        GetTransparencyURLFunc
	GetTransparencyURLFuncInvoked bool

	AuthenticateOrbitHostFunc        AuthenticateOrbitHostFunc
	AuthenticateOrbitHostFuncInvoked bool

	EnrollOrbitFunc        EnrollOrbitFunc
	EnrollOrbitFuncInvoked bool

	GetOrbitConfigFunc        GetOrbitConfigFunc
	GetOrbitConfigFuncInvoked bool

	LogFleetdErrorFunc        LogFleetdErrorFunc
	LogFleetdErrorFuncInvoked bool

	SetOrUpdateDeviceAuthTokenFunc        SetOrUpdateDeviceAuthTokenFunc
	SetOrUpdateDeviceAuthTokenFuncInvoked bool

	GetFleetDesktopSummaryFunc        GetFleetDesktopSummaryFunc
	GetFleetDesktopSummaryFuncInvoked bool

	SetEnterpriseOverridesFunc        SetEnterpriseOverridesFunc
	SetEnterpriseOverridesFuncInvoked bool

	CreateUserFromInviteFunc        CreateUserFromInviteFunc
	CreateUserFromInviteFuncInvoked bool

	CreateUserFunc        CreateUserFunc
	CreateUserFuncInvoked bool

	CreateInitialUserFunc        CreateInitialUserFunc
	CreateInitialUserFuncInvoked bool

	UserFunc        UserFunc
	UserFuncInvoked bool

	NewUserFunc        NewUserFunc
	NewUserFuncInvoked bool

	UserUnauthorizedFunc        UserUnauthorizedFunc
	UserUnauthorizedFuncInvoked bool

	AuthenticatedUserFunc        AuthenticatedUserFunc
	AuthenticatedUserFuncInvoked bool

	ListUsersFunc        ListUsersFunc
	ListUsersFuncInvoked bool

	ChangePasswordFunc        ChangePasswordFunc
	ChangePasswordFuncInvoked bool

	RequestPasswordResetFunc        RequestPasswordResetFunc
	RequestPasswordResetFuncInvoked bool

	RequirePasswordResetFunc        RequirePasswordResetFunc
	RequirePasswordResetFuncInvoked bool

	PerformRequiredPasswordResetFunc        PerformRequiredPasswordResetFunc
	PerformRequiredPasswordResetFuncInvoked bool

	ResetPasswordFunc        ResetPasswordFunc
	ResetPasswordFuncInvoked bool

	ModifyUserFunc        ModifyUserFunc
	ModifyUserFuncInvoked bool

	DeleteUserFunc        DeleteUserFunc
	DeleteUserFuncInvoked bool

	ChangeUserEmailFunc        ChangeUserEmailFunc
	ChangeUserEmailFuncInvoked bool

	GetUserSettingsFunc        GetUserSettingsFunc
	GetUserSettingsFuncInvoked bool

	InitiateSSOFunc        InitiateSSOFunc
	InitiateSSOFuncInvoked bool

	InitiateMDMSSOFunc        InitiateMDMSSOFunc
	InitiateMDMSSOFuncInvoked bool

	InitSSOCallbackFunc        InitSSOCallbackFunc
	InitSSOCallbackFuncInvoked bool

	MDMSSOCallbackFunc        MDMSSOCallbackFunc
	MDMSSOCallbackFuncInvoked bool

	GetMDMAccountDrivenEnrollmentSSOURLFunc        GetMDMAccountDrivenEnrollmentSSOURLFunc
	GetMDMAccountDrivenEnrollmentSSOURLFuncInvoked bool

	GetSSOUserFunc        GetSSOUserFunc
	GetSSOUserFuncInvoked bool

	LoginSSOUserFunc        LoginSSOUserFunc
	LoginSSOUserFuncInvoked bool

	SSOSettingsFunc        SSOSettingsFunc
	SSOSettingsFuncInvoked bool

	LoginFunc        LoginFunc
	LoginFuncInvoked bool

	LogoutFunc        LogoutFunc
	LogoutFuncInvoked bool

	CompleteMFAFunc        CompleteMFAFunc
	CompleteMFAFuncInvoked bool

	DestroySessionFunc        DestroySessionFunc
	DestroySessionFuncInvoked bool

	GetInfoAboutSessionsForUserFunc        GetInfoAboutSessionsForUserFunc
	GetInfoAboutSessionsForUserFuncInvoked bool

	DeleteSessionsForUserFunc        DeleteSessionsForUserFunc
	DeleteSessionsForUserFuncInvoked bool

	GetInfoAboutSessionFunc        GetInfoAboutSessionFunc
	GetInfoAboutSessionFuncInvoked bool

	GetSessionByKeyFunc        GetSessionByKeyFunc
	GetSessionByKeyFuncInvoked bool

	DeleteSessionFunc        DeleteSessionFunc
	DeleteSessionFuncInvoked bool

	ApplyPackSpecsFunc        ApplyPackSpecsFunc
	ApplyPackSpecsFuncInvoked bool

	GetPackSpecsFunc        GetPackSpecsFunc
	GetPackSpecsFuncInvoked bool

	GetPackSpecFunc        GetPackSpecFunc
	GetPackSpecFuncInvoked bool

	NewPackFunc        NewPackFunc
	NewPackFuncInvoked bool

	ModifyPackFunc        ModifyPackFunc
	ModifyPackFuncInvoked bool

	ListPacksFunc        ListPacksFunc
	ListPacksFuncInvoked bool

	GetPackFunc        GetPackFunc
	GetPackFuncInvoked bool

	DeletePackFunc        DeletePackFunc
	DeletePackFuncInvoked bool

	DeletePackByIDFunc        DeletePackByIDFunc
	DeletePackByIDFuncInvoked bool

	ListPacksForHostFunc        ListPacksForHostFunc
	ListPacksForHostFuncInvoked bool

	ApplyLabelSpecsFunc        ApplyLabelSpecsFunc
	ApplyLabelSpecsFuncInvoked bool

	GetLabelSpecsFunc        GetLabelSpecsFunc
	GetLabelSpecsFuncInvoked bool

	GetLabelSpecFunc        GetLabelSpecFunc
	GetLabelSpecFuncInvoked bool

	NewLabelFunc        NewLabelFunc
	NewLabelFuncInvoked bool

	ModifyLabelFunc        ModifyLabelFunc
	ModifyLabelFuncInvoked bool

	ListLabelsFunc        ListLabelsFunc
	ListLabelsFuncInvoked bool

	LabelsSummaryFunc        LabelsSummaryFunc
	LabelsSummaryFuncInvoked bool

	GetLabelFunc        GetLabelFunc
	GetLabelFuncInvoked bool

	DeleteLabelFunc        DeleteLabelFunc
	DeleteLabelFuncInvoked bool

	DeleteLabelByIDFunc        DeleteLabelByIDFunc
	DeleteLabelByIDFuncInvoked bool

	ListHostsInLabelFunc        ListHostsInLabelFunc
	ListHostsInLabelFuncInvoked bool

	ListLabelsForHostFunc        ListLabelsForHostFunc
	ListLabelsForHostFuncInvoked bool

	BatchValidateLabelsFunc        BatchValidateLabelsFunc
	BatchValidateLabelsFuncInvoked bool

	ApplyQuerySpecsFunc        ApplyQuerySpecsFunc
	ApplyQuerySpecsFuncInvoked bool

	GetQuerySpecsFunc        GetQuerySpecsFunc
	GetQuerySpecsFuncInvoked bool

	GetQuerySpecFunc        GetQuerySpecFunc
	GetQuerySpecFuncInvoked bool

	ListQueriesFunc        ListQueriesFunc
	ListQueriesFuncInvoked bool

	GetQueryFunc        GetQueryFunc
	GetQueryFuncInvoked bool

	GetQueryReportResultsFunc        GetQueryReportResultsFunc
	GetQueryReportResultsFuncInvoked bool

	GetHostQueryReportResultsFunc        GetHostQueryReportResultsFunc
	GetHostQueryReportResultsFuncInvoked bool

	QueryReportIsClippedFunc        QueryReportIsClippedFunc
	QueryReportIsClippedFuncInvoked bool

	NewQueryFunc        NewQueryFunc
	NewQueryFuncInvoked bool

	ModifyQueryFunc        ModifyQueryFunc
	ModifyQueryFuncInvoked bool

	DeleteQueryFunc        DeleteQueryFunc
	DeleteQueryFuncInvoked bool

	DeleteQueryByIDFunc        DeleteQueryByIDFunc
	DeleteQueryByIDFuncInvoked bool

	DeleteQueriesFunc        DeleteQueriesFunc
	DeleteQueriesFuncInvoked bool

	NewDistributedQueryCampaignByIdentifiersFunc        NewDistributedQueryCampaignByIdentifiersFunc
	NewDistributedQueryCampaignByIdentifiersFuncInvoked bool

	NewDistributedQueryCampaignFunc        NewDistributedQueryCampaignFunc
	NewDistributedQueryCampaignFuncInvoked bool

	StreamCampaignResultsFunc        StreamCampaignResultsFunc
	StreamCampaignResultsFuncInvoked bool

	GetCampaignReaderFunc        GetCampaignReaderFunc
	GetCampaignReaderFuncInvoked bool

	CompleteCampaignFunc        CompleteCampaignFunc
	CompleteCampaignFuncInvoked bool

	RunLiveQueryDeadlineFunc        RunLiveQueryDeadlineFunc
	RunLiveQueryDeadlineFuncInvoked bool

	AgentOptionsForHostFunc        AgentOptionsForHostFunc
	AgentOptionsForHostFuncInvoked bool

	AuthenticateDeviceFunc        AuthenticateDeviceFunc
	AuthenticateDeviceFuncInvoked bool

	ListHostsFunc        ListHostsFunc
	ListHostsFuncInvoked bool

	GetHostFunc        GetHostFunc
	GetHostFuncInvoked bool

	GetHostLiteFunc        GetHostLiteFunc
	GetHostLiteFuncInvoked bool

	GetHostHealthFunc        GetHostHealthFunc
	GetHostHealthFuncInvoked bool

	GetHostSummaryFunc        GetHostSummaryFunc
	GetHostSummaryFuncInvoked bool

	DeleteHostFunc        DeleteHostFunc
	DeleteHostFuncInvoked bool

	HostByIdentifierFunc        HostByIdentifierFunc
	HostByIdentifierFuncInvoked bool

	RefetchHostFunc        RefetchHostFunc
	RefetchHostFuncInvoked bool

	AddHostsToTeamFunc        AddHostsToTeamFunc
	AddHostsToTeamFuncInvoked bool

	AddHostsToTeamByFilterFunc        AddHostsToTeamByFilterFunc
	AddHostsToTeamByFilterFuncInvoked bool

	DeleteHostsFunc        DeleteHostsFunc
	DeleteHostsFuncInvoked bool

	CountHostsFunc        CountHostsFunc
	CountHostsFuncInvoked bool

	SearchHostsFunc        SearchHostsFunc
	SearchHostsFuncInvoked bool

	ListHostDeviceMappingFunc        ListHostDeviceMappingFunc
	ListHostDeviceMappingFuncInvoked bool

	SetCustomHostDeviceMappingFunc        SetCustomHostDeviceMappingFunc
	SetCustomHostDeviceMappingFuncInvoked bool

	HostLiteByIdentifierFunc        HostLiteByIdentifierFunc
	HostLiteByIdentifierFuncInvoked bool

	HostLiteByIDFunc        HostLiteByIDFunc
	HostLiteByIDFuncInvoked bool

	ListDevicePoliciesFunc        ListDevicePoliciesFunc
	ListDevicePoliciesFuncInvoked bool

	GetDeviceSoftwareIconsTitleIconFunc        GetDeviceSoftwareIconsTitleIconFunc
	GetDeviceSoftwareIconsTitleIconFuncInvoked bool

	DisableAuthForPingFunc        DisableAuthForPingFunc
	DisableAuthForPingFuncInvoked bool

	MacadminsDataFunc        MacadminsDataFunc
	MacadminsDataFuncInvoked bool

	MDMDataFunc        MDMDataFunc
	MDMDataFuncInvoked bool

	AggregatedMacadminsDataFunc        AggregatedMacadminsDataFunc
	AggregatedMacadminsDataFuncInvoked bool

	AggregatedMDMDataFunc        AggregatedMDMDataFunc
	AggregatedMDMDataFuncInvoked bool

	GetMDMSolutionFunc        GetMDMSolutionFunc
	GetMDMSolutionFuncInvoked bool

	GetMunkiIssueFunc        GetMunkiIssueFunc
	GetMunkiIssueFuncInvoked bool

	HostEncryptionKeyFunc        HostEncryptionKeyFunc
	HostEncryptionKeyFuncInvoked bool

	EscrowLUKSDataFunc        EscrowLUKSDataFunc
	EscrowLUKSDataFuncInvoked bool

	AddLabelsToHostFunc        AddLabelsToHostFunc
	AddLabelsToHostFuncInvoked bool

	RemoveLabelsFromHostFunc        RemoveLabelsFromHostFunc
	RemoveLabelsFromHostFuncInvoked bool

	OSVersionsFunc        OSVersionsFunc
	OSVersionsFuncInvoked bool

	OSVersionFunc        OSVersionFunc
	OSVersionFuncInvoked bool

	ListHostSoftwareFunc        ListHostSoftwareFunc
	ListHostSoftwareFuncInvoked bool

	UpdateSoftwareNameFunc        UpdateSoftwareNameFunc
	UpdateSoftwareNameFuncInvoked bool

	ListHostCertificatesFunc        ListHostCertificatesFunc
	ListHostCertificatesFuncInvoked bool

	NewAppConfigFunc        NewAppConfigFunc
	NewAppConfigFuncInvoked bool

	AppConfigObfuscatedFunc        AppConfigObfuscatedFunc
	AppConfigObfuscatedFuncInvoked bool

	ModifyAppConfigFunc        ModifyAppConfigFunc
	ModifyAppConfigFuncInvoked bool

	SandboxEnabledFunc        SandboxEnabledFunc
	SandboxEnabledFuncInvoked bool

	ApplyEnrollSecretSpecFunc        ApplyEnrollSecretSpecFunc
	ApplyEnrollSecretSpecFuncInvoked bool

	GetEnrollSecretSpecFunc        GetEnrollSecretSpecFunc
	GetEnrollSecretSpecFuncInvoked bool

	CertificateChainFunc        CertificateChainFunc
	CertificateChainFuncInvoked bool

	SetupRequiredFunc        SetupRequiredFunc
	SetupRequiredFuncInvoked bool

	VersionFunc        VersionFunc
	VersionFuncInvoked bool

	LicenseFunc        LicenseFunc
	LicenseFuncInvoked bool

	PartnershipsConfigFunc        PartnershipsConfigFunc
	PartnershipsConfigFuncInvoked bool

	LoggingConfigFunc        LoggingConfigFunc
	LoggingConfigFuncInvoked bool

	EmailConfigFunc        EmailConfigFunc
	EmailConfigFuncInvoked bool

	UpdateIntervalConfigFunc        UpdateIntervalConfigFunc
	UpdateIntervalConfigFuncInvoked bool

	VulnerabilitiesConfigFunc        VulnerabilitiesConfigFunc
	VulnerabilitiesConfigFuncInvoked bool

	InviteNewUserFunc        InviteNewUserFunc
	InviteNewUserFuncInvoked bool

	DeleteInviteFunc        DeleteInviteFunc
	DeleteInviteFuncInvoked bool

	ListInvitesFunc        ListInvitesFunc
	ListInvitesFuncInvoked bool

	VerifyInviteFunc        VerifyInviteFunc
	VerifyInviteFuncInvoked bool

	UpdateInviteFunc        UpdateInviteFunc
	UpdateInviteFuncInvoked bool

	SearchTargetsFunc        SearchTargetsFunc
	SearchTargetsFuncInvoked bool

	CountHostsInTargetsFunc        CountHostsInTargetsFunc
	CountHostsInTargetsFuncInvoked bool

	GetScheduledQueriesInPackFunc        GetScheduledQueriesInPackFunc
	GetScheduledQueriesInPackFuncInvoked bool

	GetScheduledQueryFunc        GetScheduledQueryFunc
	GetScheduledQueryFuncInvoked bool

	ScheduleQueryFunc        ScheduleQueryFunc
	ScheduleQueryFuncInvoked bool

	DeleteScheduledQueryFunc        DeleteScheduledQueryFunc
	DeleteScheduledQueryFuncInvoked bool

	ModifyScheduledQueryFunc        ModifyScheduledQueryFunc
	ModifyScheduledQueryFuncInvoked bool

	StatusResultStoreFunc        StatusResultStoreFunc
	StatusResultStoreFuncInvoked bool

	StatusLiveQueryFunc        StatusLiveQueryFunc
	StatusLiveQueryFuncInvoked bool

	CarveBeginFunc        CarveBeginFunc
	CarveBeginFuncInvoked bool

	CarveBlockFunc        CarveBlockFunc
	CarveBlockFuncInvoked bool

	GetCarveFunc        GetCarveFunc
	GetCarveFuncInvoked bool

	ListCarvesFunc        ListCarvesFunc
	ListCarvesFuncInvoked bool

	GetBlockFunc        GetBlockFunc
	GetBlockFuncInvoked bool

	NewTeamFunc        NewTeamFunc
	NewTeamFuncInvoked bool

	GetTeamFunc        GetTeamFunc
	GetTeamFuncInvoked bool

	ModifyTeamFunc        ModifyTeamFunc
	ModifyTeamFuncInvoked bool

	ModifyTeamAgentOptionsFunc        ModifyTeamAgentOptionsFunc
	ModifyTeamAgentOptionsFuncInvoked bool

	AddTeamUsersFunc        AddTeamUsersFunc
	AddTeamUsersFuncInvoked bool

	DeleteTeamUsersFunc        DeleteTeamUsersFunc
	DeleteTeamUsersFuncInvoked bool

	DeleteTeamFunc        DeleteTeamFunc
	DeleteTeamFuncInvoked bool

	ListTeamsFunc        ListTeamsFunc
	ListTeamsFuncInvoked bool

	ListTeamUsersFunc        ListTeamUsersFunc
	ListTeamUsersFuncInvoked bool

	ListAvailableTeamsForUserFunc        ListAvailableTeamsForUserFunc
	ListAvailableTeamsForUserFuncInvoked bool

	TeamEnrollSecretsFunc        TeamEnrollSecretsFunc
	TeamEnrollSecretsFuncInvoked bool

	ModifyTeamEnrollSecretsFunc        ModifyTeamEnrollSecretsFunc
	ModifyTeamEnrollSecretsFuncInvoked bool

	ApplyTeamSpecsFunc        ApplyTeamSpecsFunc
	ApplyTeamSpecsFuncInvoked bool

	NewActivityFunc        NewActivityFunc
	NewActivityFuncInvoked bool

	ListActivitiesFunc        ListActivitiesFunc
	ListActivitiesFuncInvoked bool

	ListHostUpcomingActivitiesFunc        ListHostUpcomingActivitiesFunc
	ListHostUpcomingActivitiesFuncInvoked bool

	ListHostPastActivitiesFunc        ListHostPastActivitiesFunc
	ListHostPastActivitiesFuncInvoked bool

	CancelHostUpcomingActivityFunc        CancelHostUpcomingActivityFunc
	CancelHostUpcomingActivityFuncInvoked bool

	ApplyUserRolesSpecsFunc        ApplyUserRolesSpecsFunc
	ApplyUserRolesSpecsFuncInvoked bool

	GlobalScheduleQueryFunc        GlobalScheduleQueryFunc
	GlobalScheduleQueryFuncInvoked bool

	GetGlobalScheduledQueriesFunc        GetGlobalScheduledQueriesFunc
	GetGlobalScheduledQueriesFuncInvoked bool

	ModifyGlobalScheduledQueriesFunc        ModifyGlobalScheduledQueriesFunc
	ModifyGlobalScheduledQueriesFuncInvoked bool

	DeleteGlobalScheduledQueriesFunc        DeleteGlobalScheduledQueriesFunc
	DeleteGlobalScheduledQueriesFuncInvoked bool

	TranslateFunc        TranslateFunc
	TranslateFuncInvoked bool

	TeamScheduleQueryFunc        TeamScheduleQueryFunc
	TeamScheduleQueryFuncInvoked bool

	GetTeamScheduledQueriesFunc        GetTeamScheduledQueriesFunc
	GetTeamScheduledQueriesFuncInvoked bool

	ModifyTeamScheduledQueriesFunc        ModifyTeamScheduledQueriesFunc
	ModifyTeamScheduledQueriesFuncInvoked bool

	DeleteTeamScheduledQueriesFunc        DeleteTeamScheduledQueriesFunc
	DeleteTeamScheduledQueriesFuncInvoked bool

	NewGlobalPolicyFunc        NewGlobalPolicyFunc
	NewGlobalPolicyFuncInvoked bool

	ListGlobalPoliciesFunc        ListGlobalPoliciesFunc
	ListGlobalPoliciesFuncInvoked bool

	DeleteGlobalPoliciesFunc        DeleteGlobalPoliciesFunc
	DeleteGlobalPoliciesFuncInvoked bool

	ModifyGlobalPolicyFunc        ModifyGlobalPolicyFunc
	ModifyGlobalPolicyFuncInvoked bool

	GetPolicyByIDQueriesFunc        GetPolicyByIDQueriesFunc
	GetPolicyByIDQueriesFuncInvoked bool

	ApplyPolicySpecsFunc        ApplyPolicySpecsFunc
	ApplyPolicySpecsFuncInvoked bool

	CountGlobalPoliciesFunc        CountGlobalPoliciesFunc
	CountGlobalPoliciesFuncInvoked bool

	AutofillPolicySqlFunc        AutofillPolicySqlFunc
	AutofillPolicySqlFuncInvoked bool

	ListSoftwareFunc        ListSoftwareFunc
	ListSoftwareFuncInvoked bool

	SoftwareByIDFunc        SoftwareByIDFunc
	SoftwareByIDFuncInvoked bool

	CountSoftwareFunc        CountSoftwareFunc
	CountSoftwareFuncInvoked bool

	SaveHostSoftwareInstallResultFunc        SaveHostSoftwareInstallResultFunc
	SaveHostSoftwareInstallResultFuncInvoked bool

	ListSoftwareTitlesFunc        ListSoftwareTitlesFunc
	ListSoftwareTitlesFuncInvoked bool

	SoftwareTitleByIDFunc        SoftwareTitleByIDFunc
	SoftwareTitleByIDFuncInvoked bool

	InstallSoftwareTitleFunc        InstallSoftwareTitleFunc
	InstallSoftwareTitleFuncInvoked bool

	GetVPPTokenIfCanInstallVPPAppsFunc        GetVPPTokenIfCanInstallVPPAppsFunc
	GetVPPTokenIfCanInstallVPPAppsFuncInvoked bool

	InstallVPPAppPostValidationFunc        InstallVPPAppPostValidationFunc
	InstallVPPAppPostValidationFuncInvoked bool

	UninstallSoftwareTitleFunc        UninstallSoftwareTitleFunc
	UninstallSoftwareTitleFuncInvoked bool

	GetSoftwareInstallResultsFunc        GetSoftwareInstallResultsFunc
	GetSoftwareInstallResultsFuncInvoked bool

	BatchSetSoftwareInstallersFunc        BatchSetSoftwareInstallersFunc
	BatchSetSoftwareInstallersFuncInvoked bool

	GetBatchSetSoftwareInstallersResultFunc        GetBatchSetSoftwareInstallersResultFunc
	GetBatchSetSoftwareInstallersResultFuncInvoked bool

	SelfServiceInstallSoftwareTitleFunc        SelfServiceInstallSoftwareTitleFunc
	SelfServiceInstallSoftwareTitleFuncInvoked bool

	HasSelfServiceSoftwareInstallersFunc        HasSelfServiceSoftwareInstallersFunc
	HasSelfServiceSoftwareInstallersFuncInvoked bool

	GetAppStoreAppsFunc        GetAppStoreAppsFunc
	GetAppStoreAppsFuncInvoked bool

	AddAppStoreAppFunc        AddAppStoreAppFunc
	AddAppStoreAppFuncInvoked bool

	UpdateAppStoreAppFunc        UpdateAppStoreAppFunc
	UpdateAppStoreAppFuncInvoked bool

	MDMAppleProcessOTAEnrollmentFunc        MDMAppleProcessOTAEnrollmentFunc
	MDMAppleProcessOTAEnrollmentFuncInvoked bool

	ListVulnerabilitiesFunc        ListVulnerabilitiesFunc
	ListVulnerabilitiesFuncInvoked bool

	VulnerabilityFunc        VulnerabilityFunc
	VulnerabilityFuncInvoked bool

	CountVulnerabilitiesFunc        CountVulnerabilitiesFunc
	CountVulnerabilitiesFuncInvoked bool

	ListOSVersionsByCVEFunc        ListOSVersionsByCVEFunc
	ListOSVersionsByCVEFuncInvoked bool

	ListSoftwareByCVEFunc        ListSoftwareByCVEFunc
	ListSoftwareByCVEFuncInvoked bool

	NewTeamPolicyFunc        NewTeamPolicyFunc
	NewTeamPolicyFuncInvoked bool

	ListTeamPoliciesFunc        ListTeamPoliciesFunc
	ListTeamPoliciesFuncInvoked bool

	DeleteTeamPoliciesFunc        DeleteTeamPoliciesFunc
	DeleteTeamPoliciesFuncInvoked bool

	ModifyTeamPolicyFunc        ModifyTeamPolicyFunc
	ModifyTeamPolicyFuncInvoked bool

	GetTeamPolicyByIDQueriesFunc        GetTeamPolicyByIDQueriesFunc
	GetTeamPolicyByIDQueriesFuncInvoked bool

	CountTeamPoliciesFunc        CountTeamPoliciesFunc
	CountTeamPoliciesFuncInvoked bool

	LookupGeoIPFunc        LookupGeoIPFunc
	LookupGeoIPFuncInvoked bool

	GetSoftwareInstallDetailsFunc        GetSoftwareInstallDetailsFunc
	GetSoftwareInstallDetailsFuncInvoked bool

	GetAppleMDMFunc        GetAppleMDMFunc
	GetAppleMDMFuncInvoked bool

	GetAppleBMFunc        GetAppleBMFunc
	GetAppleBMFuncInvoked bool

	RequestMDMAppleCSRFunc        RequestMDMAppleCSRFunc
	RequestMDMAppleCSRFuncInvoked bool

	GetMDMAppleCSRFunc        GetMDMAppleCSRFunc
	GetMDMAppleCSRFuncInvoked bool

	UploadMDMAppleAPNSCertFunc        UploadMDMAppleAPNSCertFunc
	UploadMDMAppleAPNSCertFuncInvoked bool

	DeleteMDMAppleAPNSCertFunc        DeleteMDMAppleAPNSCertFunc
	DeleteMDMAppleAPNSCertFuncInvoked bool

	UploadVPPTokenFunc        UploadVPPTokenFunc
	UploadVPPTokenFuncInvoked bool

	UpdateVPPTokenFunc        UpdateVPPTokenFunc
	UpdateVPPTokenFuncInvoked bool

	UpdateVPPTokenTeamsFunc        UpdateVPPTokenTeamsFunc
	UpdateVPPTokenTeamsFuncInvoked bool

	GetVPPTokensFunc        GetVPPTokensFunc
	GetVPPTokensFuncInvoked bool

	DeleteVPPTokenFunc        DeleteVPPTokenFunc
	DeleteVPPTokenFuncInvoked bool

	BatchAssociateVPPAppsFunc        BatchAssociateVPPAppsFunc
	BatchAssociateVPPAppsFuncInvoked bool

	GetHostDEPAssignmentFunc        GetHostDEPAssignmentFunc
	GetHostDEPAssignmentFuncInvoked bool

	NewMDMAppleConfigProfileFunc        NewMDMAppleConfigProfileFunc
	NewMDMAppleConfigProfileFuncInvoked bool

	NewMDMAppleDeclarationFunc        NewMDMAppleDeclarationFunc
	NewMDMAppleDeclarationFuncInvoked bool

	GetMDMAppleConfigProfileByDeprecatedIDFunc        GetMDMAppleConfigProfileByDeprecatedIDFunc
	GetMDMAppleConfigProfileByDeprecatedIDFuncInvoked bool

	GetMDMAppleConfigProfileFunc        GetMDMAppleConfigProfileFunc
	GetMDMAppleConfigProfileFuncInvoked bool

	GetMDMAppleDeclarationFunc        GetMDMAppleDeclarationFunc
	GetMDMAppleDeclarationFuncInvoked bool

	DeleteMDMAppleConfigProfileByDeprecatedIDFunc        DeleteMDMAppleConfigProfileByDeprecatedIDFunc
	DeleteMDMAppleConfigProfileByDeprecatedIDFuncInvoked bool

	DeleteMDMAppleConfigProfileFunc        DeleteMDMAppleConfigProfileFunc
	DeleteMDMAppleConfigProfileFuncInvoked bool

	DeleteMDMAppleDeclarationFunc        DeleteMDMAppleDeclarationFunc
	DeleteMDMAppleDeclarationFuncInvoked bool

	ListMDMAppleConfigProfilesFunc        ListMDMAppleConfigProfilesFunc
	ListMDMAppleConfigProfilesFuncInvoked bool

	GetMDMAppleFileVaultSummaryFunc        GetMDMAppleFileVaultSummaryFunc
	GetMDMAppleFileVaultSummaryFuncInvoked bool

	GetMDMAppleProfilesSummaryFunc        GetMDMAppleProfilesSummaryFunc
	GetMDMAppleProfilesSummaryFuncInvoked bool

	GetMDMAppleEnrollmentProfileByTokenFunc        GetMDMAppleEnrollmentProfileByTokenFunc
	GetMDMAppleEnrollmentProfileByTokenFuncInvoked bool

	GetMDMAppleAccountEnrollmentProfileFunc        GetMDMAppleAccountEnrollmentProfileFunc
	GetMDMAppleAccountEnrollmentProfileFuncInvoked bool

	SkipAuthFunc        SkipAuthFunc
	SkipAuthFuncInvoked bool

	ReconcileMDMAppleEnrollRefFunc        ReconcileMDMAppleEnrollRefFunc
	ReconcileMDMAppleEnrollRefFuncInvoked bool

	GetDeviceMDMAppleEnrollmentProfileFunc        GetDeviceMDMAppleEnrollmentProfileFunc
	GetDeviceMDMAppleEnrollmentProfileFuncInvoked bool

	GetMDMAppleCommandResultsFunc        GetMDMAppleCommandResultsFunc
	GetMDMAppleCommandResultsFuncInvoked bool

	ListMDMAppleCommandsFunc        ListMDMAppleCommandsFunc
	ListMDMAppleCommandsFuncInvoked bool

	UploadMDMAppleInstallerFunc        UploadMDMAppleInstallerFunc
	UploadMDMAppleInstallerFuncInvoked bool

	GetMDMAppleInstallerByIDFunc        GetMDMAppleInstallerByIDFunc
	GetMDMAppleInstallerByIDFuncInvoked bool

	DeleteMDMAppleInstallerFunc        DeleteMDMAppleInstallerFunc
	DeleteMDMAppleInstallerFuncInvoked bool

	GetMDMAppleInstallerByTokenFunc        GetMDMAppleInstallerByTokenFunc
	GetMDMAppleInstallerByTokenFuncInvoked bool

	GetMDMAppleInstallerDetailsByTokenFunc        GetMDMAppleInstallerDetailsByTokenFunc
	GetMDMAppleInstallerDetailsByTokenFuncInvoked bool

	ListMDMAppleInstallersFunc        ListMDMAppleInstallersFunc
	ListMDMAppleInstallersFuncInvoked bool

	ListMDMAppleDevicesFunc        ListMDMAppleDevicesFunc
	ListMDMAppleDevicesFuncInvoked bool

	NewMDMAppleDEPKeyPairFunc        NewMDMAppleDEPKeyPairFunc
	NewMDMAppleDEPKeyPairFuncInvoked bool

	GenerateABMKeyPairFunc        GenerateABMKeyPairFunc
	GenerateABMKeyPairFuncInvoked bool

	UploadABMTokenFunc        UploadABMTokenFunc
	UploadABMTokenFuncInvoked bool

	ListABMTokensFunc        ListABMTokensFunc
	ListABMTokensFuncInvoked bool

	CountABMTokensFunc        CountABMTokensFunc
	CountABMTokensFuncInvoked bool

	UpdateABMTokenTeamsFunc        UpdateABMTokenTeamsFunc
	UpdateABMTokenTeamsFuncInvoked bool

	DeleteABMTokenFunc        DeleteABMTokenFunc
	DeleteABMTokenFuncInvoked bool

	RenewABMTokenFunc        RenewABMTokenFunc
	RenewABMTokenFuncInvoked bool

	EnqueueMDMAppleCommandFunc        EnqueueMDMAppleCommandFunc
	EnqueueMDMAppleCommandFuncInvoked bool

	EnqueueMDMAppleCommandRemoveEnrollmentProfileFunc        EnqueueMDMAppleCommandRemoveEnrollmentProfileFunc
	EnqueueMDMAppleCommandRemoveEnrollmentProfileFuncInvoked bool

	BatchSetMDMAppleProfilesFunc        BatchSetMDMAppleProfilesFunc
	BatchSetMDMAppleProfilesFuncInvoked bool

	MDMApplePreassignProfileFunc        MDMApplePreassignProfileFunc
	MDMApplePreassignProfileFuncInvoked bool

	MDMAppleMatchPreassignmentFunc        MDMAppleMatchPreassignmentFunc
	MDMAppleMatchPreassignmentFuncInvoked bool

	MDMAppleDeviceLockFunc        MDMAppleDeviceLockFunc
	MDMAppleDeviceLockFuncInvoked bool

	MDMAppleEraseDeviceFunc        MDMAppleEraseDeviceFunc
	MDMAppleEraseDeviceFuncInvoked bool

	MDMListHostConfigurationProfilesFunc        MDMListHostConfigurationProfilesFunc
	MDMListHostConfigurationProfilesFuncInvoked bool

	MDMAppleEnableFileVaultAndEscrowFunc        MDMAppleEnableFileVaultAndEscrowFunc
	MDMAppleEnableFileVaultAndEscrowFuncInvoked bool

	MDMAppleDisableFileVaultAndEscrowFunc        MDMAppleDisableFileVaultAndEscrowFunc
	MDMAppleDisableFileVaultAndEscrowFuncInvoked bool

	UpdateMDMDiskEncryptionFunc        UpdateMDMDiskEncryptionFunc
	UpdateMDMDiskEncryptionFuncInvoked bool

	VerifyMDMAppleConfiguredFunc        VerifyMDMAppleConfiguredFunc
	VerifyMDMAppleConfiguredFuncInvoked bool

	VerifyMDMWindowsConfiguredFunc        VerifyMDMWindowsConfiguredFunc
	VerifyMDMWindowsConfiguredFuncInvoked bool

	VerifyMDMAppleOrWindowsConfiguredFunc        VerifyMDMAppleOrWindowsConfiguredFunc
	VerifyMDMAppleOrWindowsConfiguredFuncInvoked bool

	MDMAppleUploadBootstrapPackageFunc        MDMAppleUploadBootstrapPackageFunc
	MDMAppleUploadBootstrapPackageFuncInvoked bool

	GetMDMAppleBootstrapPackageBytesFunc        GetMDMAppleBootstrapPackageBytesFunc
	GetMDMAppleBootstrapPackageBytesFuncInvoked bool

	GetMDMAppleBootstrapPackageMetadataFunc        GetMDMAppleBootstrapPackageMetadataFunc
	GetMDMAppleBootstrapPackageMetadataFuncInvoked bool

	DeleteMDMAppleBootstrapPackageFunc        DeleteMDMAppleBootstrapPackageFunc
	DeleteMDMAppleBootstrapPackageFuncInvoked bool

	GetMDMAppleBootstrapPackageSummaryFunc        GetMDMAppleBootstrapPackageSummaryFunc
	GetMDMAppleBootstrapPackageSummaryFuncInvoked bool

	MDMGetEULABytesFunc        MDMGetEULABytesFunc
	MDMGetEULABytesFuncInvoked bool

	MDMGetEULAMetadataFunc        MDMGetEULAMetadataFunc
	MDMGetEULAMetadataFuncInvoked bool

	MDMCreateEULAFunc        MDMCreateEULAFunc
	MDMCreateEULAFuncInvoked bool

	MDMDeleteEULAFunc        MDMDeleteEULAFunc
	MDMDeleteEULAFuncInvoked bool

	SetOrUpdateMDMAppleSetupAssistantFunc        SetOrUpdateMDMAppleSetupAssistantFunc
	SetOrUpdateMDMAppleSetupAssistantFuncInvoked bool

	GetMDMAppleSetupAssistantFunc        GetMDMAppleSetupAssistantFunc
	GetMDMAppleSetupAssistantFuncInvoked bool

	DeleteMDMAppleSetupAssistantFunc        DeleteMDMAppleSetupAssistantFunc
	DeleteMDMAppleSetupAssistantFuncInvoked bool

	HasCustomSetupAssistantConfigurationWebURLFunc        HasCustomSetupAssistantConfigurationWebURLFunc
	HasCustomSetupAssistantConfigurationWebURLFuncInvoked bool

	UpdateMDMAppleSetupFunc        UpdateMDMAppleSetupFunc
	UpdateMDMAppleSetupFuncInvoked bool

	TriggerMigrateMDMDeviceFunc        TriggerMigrateMDMDeviceFunc
	TriggerMigrateMDMDeviceFuncInvoked bool

	GetMDMManualEnrollmentProfileFunc        GetMDMManualEnrollmentProfileFunc
	GetMDMManualEnrollmentProfileFuncInvoked bool

	TriggerLinuxDiskEncryptionEscrowFunc        TriggerLinuxDiskEncryptionEscrowFunc
	TriggerLinuxDiskEncryptionEscrowFuncInvoked bool

	CheckMDMAppleEnrollmentWithMinimumOSVersionFunc        CheckMDMAppleEnrollmentWithMinimumOSVersionFunc
	CheckMDMAppleEnrollmentWithMinimumOSVersionFuncInvoked bool

	GetOTAProfileFunc        GetOTAProfileFunc
	GetOTAProfileFuncInvoked bool

	TriggerCronScheduleFunc        TriggerCronScheduleFunc
	TriggerCronScheduleFuncInvoked bool

	ResetAutomationFunc        ResetAutomationFunc
	ResetAutomationFuncInvoked bool

	ProcessMDMMicrosoftDiscoveryFunc        ProcessMDMMicrosoftDiscoveryFunc
	ProcessMDMMicrosoftDiscoveryFuncInvoked bool

	GetMDMMicrosoftDiscoveryResponseFunc        GetMDMMicrosoftDiscoveryResponseFunc
	GetMDMMicrosoftDiscoveryResponseFuncInvoked bool

	GetMDMMicrosoftSTSAuthResponseFunc        GetMDMMicrosoftSTSAuthResponseFunc
	GetMDMMicrosoftSTSAuthResponseFuncInvoked bool

	GetMDMWindowsPolicyResponseFunc        GetMDMWindowsPolicyResponseFunc
	GetMDMWindowsPolicyResponseFuncInvoked bool

	GetMDMWindowsEnrollResponseFunc        GetMDMWindowsEnrollResponseFunc
	GetMDMWindowsEnrollResponseFuncInvoked bool

	GetAuthorizedSoapFaultFunc        GetAuthorizedSoapFaultFunc
	GetAuthorizedSoapFaultFuncInvoked bool

	SignMDMMicrosoftClientCSRFunc        SignMDMMicrosoftClientCSRFunc
	SignMDMMicrosoftClientCSRFuncInvoked bool

	GetMDMWindowsManagementResponseFunc        GetMDMWindowsManagementResponseFunc
	GetMDMWindowsManagementResponseFuncInvoked bool

	GetMDMWindowsTOSContentFunc        GetMDMWindowsTOSContentFunc
	GetMDMWindowsTOSContentFuncInvoked bool

	RunMDMCommandFunc        RunMDMCommandFunc
	RunMDMCommandFuncInvoked bool

	GetMDMCommandResultsFunc        GetMDMCommandResultsFunc
	GetMDMCommandResultsFuncInvoked bool

	ListMDMCommandsFunc        ListMDMCommandsFunc
	ListMDMCommandsFuncInvoked bool

	SetOrUpdateDiskEncryptionKeyFunc        SetOrUpdateDiskEncryptionKeyFunc
	SetOrUpdateDiskEncryptionKeyFuncInvoked bool

	GetMDMWindowsConfigProfileFunc        GetMDMWindowsConfigProfileFunc
	GetMDMWindowsConfigProfileFuncInvoked bool

	DeleteMDMWindowsConfigProfileFunc        DeleteMDMWindowsConfigProfileFunc
	DeleteMDMWindowsConfigProfileFuncInvoked bool

	GetMDMWindowsProfilesSummaryFunc        GetMDMWindowsProfilesSummaryFunc
	GetMDMWindowsProfilesSummaryFuncInvoked bool

	NewMDMWindowsConfigProfileFunc        NewMDMWindowsConfigProfileFunc
	NewMDMWindowsConfigProfileFuncInvoked bool

	NewMDMUnsupportedConfigProfileFunc        NewMDMUnsupportedConfigProfileFunc
	NewMDMUnsupportedConfigProfileFuncInvoked bool

	ListMDMConfigProfilesFunc        ListMDMConfigProfilesFunc
	ListMDMConfigProfilesFuncInvoked bool

	BatchSetMDMProfilesFunc        BatchSetMDMProfilesFunc
	BatchSetMDMProfilesFuncInvoked bool

	LinuxHostDiskEncryptionStatusFunc        LinuxHostDiskEncryptionStatusFunc
	LinuxHostDiskEncryptionStatusFuncInvoked bool

	GetMDMLinuxProfilesSummaryFunc        GetMDMLinuxProfilesSummaryFunc
	GetMDMLinuxProfilesSummaryFuncInvoked bool

	GetMDMDiskEncryptionSummaryFunc        GetMDMDiskEncryptionSummaryFunc
	GetMDMDiskEncryptionSummaryFuncInvoked bool

	ResendHostMDMProfileFunc        ResendHostMDMProfileFunc
	ResendHostMDMProfileFuncInvoked bool

	ResendDeviceHostMDMProfileFunc        ResendDeviceHostMDMProfileFunc
	ResendDeviceHostMDMProfileFuncInvoked bool

	BatchResendMDMProfileToHostsFunc        BatchResendMDMProfileToHostsFunc
	BatchResendMDMProfileToHostsFuncInvoked bool

	GetMDMConfigProfileStatusFunc        GetMDMConfigProfileStatusFunc
	GetMDMConfigProfileStatusFuncInvoked bool

	RunHostScriptFunc        RunHostScriptFunc
	RunHostScriptFuncInvoked bool

	GetScriptIDByNameFunc        GetScriptIDByNameFunc
	GetScriptIDByNameFuncInvoked bool

	GetHostScriptFunc        GetHostScriptFunc
	GetHostScriptFuncInvoked bool

	SaveHostScriptResultFunc        SaveHostScriptResultFunc
	SaveHostScriptResultFuncInvoked bool

	GetScriptResultFunc        GetScriptResultFunc
	GetScriptResultFuncInvoked bool

	GetSelfServiceUninstallScriptResultFunc        GetSelfServiceUninstallScriptResultFunc
	GetSelfServiceUninstallScriptResultFuncInvoked bool

	NewScriptFunc        NewScriptFunc
	NewScriptFuncInvoked bool

	UpdateScriptFunc        UpdateScriptFunc
	UpdateScriptFuncInvoked bool

	DeleteScriptFunc        DeleteScriptFunc
	DeleteScriptFuncInvoked bool

	ListScriptsFunc        ListScriptsFunc
	ListScriptsFuncInvoked bool

	GetScriptFunc        GetScriptFunc
	GetScriptFuncInvoked bool

	GetHostScriptDetailsFunc        GetHostScriptDetailsFunc
	GetHostScriptDetailsFuncInvoked bool

	BatchSetScriptsFunc        BatchSetScriptsFunc
	BatchSetScriptsFuncInvoked bool

	BatchScriptExecuteFunc        BatchScriptExecuteFunc
	BatchScriptExecuteFuncInvoked bool

	BatchScriptExecutionSummaryFunc        BatchScriptExecutionSummaryFunc
	BatchScriptExecutionSummaryFuncInvoked bool

	BatchScriptExecutionStatusFunc        BatchScriptExecutionStatusFunc
	BatchScriptExecutionStatusFuncInvoked bool

	BatchScriptExecutionHostResultsFunc        BatchScriptExecutionHostResultsFunc
	BatchScriptExecutionHostResultsFuncInvoked bool

	BatchScriptExecutionListFunc        BatchScriptExecutionListFunc
	BatchScriptExecutionListFuncInvoked bool

	BatchScriptCancelFunc        BatchScriptCancelFunc
	BatchScriptCancelFuncInvoked bool

	LockHostFunc        LockHostFunc
	LockHostFuncInvoked bool

	UnlockHostFunc        UnlockHostFunc
	UnlockHostFuncInvoked bool

	WipeHostFunc        WipeHostFunc
	WipeHostFuncInvoked bool

	UploadSoftwareInstallerFunc        UploadSoftwareInstallerFunc
	UploadSoftwareInstallerFuncInvoked bool

	UpdateSoftwareInstallerFunc        UpdateSoftwareInstallerFunc
	UpdateSoftwareInstallerFuncInvoked bool

	DeleteSoftwareInstallerFunc        DeleteSoftwareInstallerFunc
	DeleteSoftwareInstallerFuncInvoked bool

	GenerateSoftwareInstallerTokenFunc        GenerateSoftwareInstallerTokenFunc
	GenerateSoftwareInstallerTokenFuncInvoked bool

	GetSoftwareInstallerTokenMetadataFunc        GetSoftwareInstallerTokenMetadataFunc
	GetSoftwareInstallerTokenMetadataFuncInvoked bool

	GetSoftwareInstallerMetadataFunc        GetSoftwareInstallerMetadataFunc
	GetSoftwareInstallerMetadataFuncInvoked bool

	DownloadSoftwareInstallerFunc        DownloadSoftwareInstallerFunc
	DownloadSoftwareInstallerFuncInvoked bool

	OrbitDownloadSoftwareInstallerFunc        OrbitDownloadSoftwareInstallerFunc
	OrbitDownloadSoftwareInstallerFuncInvoked bool

	GetSoftwareTitleIconFunc        GetSoftwareTitleIconFunc
	GetSoftwareTitleIconFuncInvoked bool

	UploadSoftwareTitleIconFunc        UploadSoftwareTitleIconFunc
	UploadSoftwareTitleIconFuncInvoked bool

	DeleteSoftwareTitleIconFunc        DeleteSoftwareTitleIconFunc
	DeleteSoftwareTitleIconFuncInvoked bool

	SetSetupExperienceSoftwareFunc        SetSetupExperienceSoftwareFunc
	SetSetupExperienceSoftwareFuncInvoked bool

	ListSetupExperienceSoftwareFunc        ListSetupExperienceSoftwareFunc
	ListSetupExperienceSoftwareFuncInvoked bool

	GetOrbitSetupExperienceStatusFunc        GetOrbitSetupExperienceStatusFunc
	GetOrbitSetupExperienceStatusFuncInvoked bool

	GetSetupExperienceScriptFunc        GetSetupExperienceScriptFunc
	GetSetupExperienceScriptFuncInvoked bool

	SetSetupExperienceScriptFunc        SetSetupExperienceScriptFunc
	SetSetupExperienceScriptFuncInvoked bool

	DeleteSetupExperienceScriptFunc        DeleteSetupExperienceScriptFunc
	DeleteSetupExperienceScriptFuncInvoked bool

	SetupExperienceNextStepFunc        SetupExperienceNextStepFunc
	SetupExperienceNextStepFuncInvoked bool

	SetupExperienceInitFunc        SetupExperienceInitFunc
	SetupExperienceInitFuncInvoked bool

	GetDeviceSetupExperienceStatusFunc        GetDeviceSetupExperienceStatusFunc
	GetDeviceSetupExperienceStatusFuncInvoked bool

	AddFleetMaintainedAppFunc        AddFleetMaintainedAppFunc
	AddFleetMaintainedAppFuncInvoked bool

	ListFleetMaintainedAppsFunc        ListFleetMaintainedAppsFunc
	ListFleetMaintainedAppsFuncInvoked bool

	GetFleetMaintainedAppFunc        GetFleetMaintainedAppFunc
	GetFleetMaintainedAppFuncInvoked bool

	CalendarWebhookFunc        CalendarWebhookFunc
	CalendarWebhookFuncInvoked bool

	CreateSecretVariablesFunc        CreateSecretVariablesFunc
	CreateSecretVariablesFuncInvoked bool

	CreateSecretVariableFunc        CreateSecretVariableFunc
	CreateSecretVariableFuncInvoked bool

	ListSecretVariablesFunc        ListSecretVariablesFunc
	ListSecretVariablesFuncInvoked bool

	DeleteSecretVariableFunc        DeleteSecretVariableFunc
	DeleteSecretVariableFuncInvoked bool

	ScimDetailsFunc        ScimDetailsFunc
	ScimDetailsFuncInvoked bool

	ConditionalAccessMicrosoftCreateIntegrationFunc        ConditionalAccessMicrosoftCreateIntegrationFunc
	ConditionalAccessMicrosoftCreateIntegrationFuncInvoked bool

	ConditionalAccessMicrosoftGetFunc        ConditionalAccessMicrosoftGetFunc
	ConditionalAccessMicrosoftGetFuncInvoked bool

	ConditionalAccessMicrosoftConfirmFunc        ConditionalAccessMicrosoftConfirmFunc
	ConditionalAccessMicrosoftConfirmFuncInvoked bool

	ConditionalAccessMicrosoftDeleteFunc        ConditionalAccessMicrosoftDeleteFunc
	ConditionalAccessMicrosoftDeleteFuncInvoked bool

	ListCertificateAuthoritiesFunc        ListCertificateAuthoritiesFunc
	ListCertificateAuthoritiesFuncInvoked bool

	GetCertificateAuthorityFunc        GetCertificateAuthorityFunc
	GetCertificateAuthorityFuncInvoked bool

	NewCertificateAuthorityFunc        NewCertificateAuthorityFunc
	NewCertificateAuthorityFuncInvoked bool

	DeleteCertificateAuthorityFunc        DeleteCertificateAuthorityFunc
	DeleteCertificateAuthorityFuncInvoked bool

	UpdateCertificateAuthorityFunc        UpdateCertificateAuthorityFunc
	UpdateCertificateAuthorityFuncInvoked bool

	RequestCertificateFunc        RequestCertificateFunc
	RequestCertificateFuncInvoked bool

	BatchApplyCertificateAuthoritiesFunc        BatchApplyCertificateAuthoritiesFunc
	BatchApplyCertificateAuthoritiesFuncInvoked bool

	GetGroupedCertificateAuthoritiesFunc        GetGroupedCertificateAuthoritiesFunc
	GetGroupedCertificateAuthoritiesFuncInvoked bool

	mu sync.Mutex
}

func (s *Service) EnrollOsquery(ctx context.Context, enrollSecret string, hostIdentifier string, hostDetails map[string](map[string]string)) (nodeKey string, err error) {
	s.mu.Lock()
	s.EnrollOsqueryFuncInvoked = true
	s.mu.Unlock()
	return s.EnrollOsqueryFunc(ctx, enrollSecret, hostIdentifier, hostDetails)
}

func (s *Service) AuthenticateHost(ctx context.Context, nodeKey string) (host *fleet.Host, debug bool, err error) {
	s.mu.Lock()
	s.AuthenticateHostFuncInvoked = true
	s.mu.Unlock()
	return s.AuthenticateHostFunc(ctx, nodeKey)
}

func (s *Service) GetClientConfig(ctx context.Context) (config map[string]interface{}, err error) {
	s.mu.Lock()
	s.GetClientConfigFuncInvoked = true
	s.mu.Unlock()
	return s.GetClientConfigFunc(ctx)
}

func (s *Service) GetDistributedQueries(ctx context.Context) (queries map[string]string, discovery map[string]string, accelerate uint, err error) {
	s.mu.Lock()
	s.GetDistributedQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.GetDistributedQueriesFunc(ctx)
}

func (s *Service) SubmitDistributedQueryResults(ctx context.Context, results fleet.OsqueryDistributedQueryResults, statuses map[string]fleet.OsqueryStatus, messages map[string]string, stats map[string]*fleet.Stats) (err error) {
	s.mu.Lock()
	s.SubmitDistributedQueryResultsFuncInvoked = true
	s.mu.Unlock()
	return s.SubmitDistributedQueryResultsFunc(ctx, results, statuses, messages, stats)
}

func (s *Service) SubmitStatusLogs(ctx context.Context, logs []json.RawMessage) (err error) {
	s.mu.Lock()
	s.SubmitStatusLogsFuncInvoked = true
	s.mu.Unlock()
	return s.SubmitStatusLogsFunc(ctx, logs)
}

func (s *Service) SubmitResultLogs(ctx context.Context, logs []json.RawMessage) (err error) {
	s.mu.Lock()
	s.SubmitResultLogsFuncInvoked = true
	s.mu.Unlock()
	return s.SubmitResultLogsFunc(ctx, logs)
}

func (s *Service) YaraRuleByName(ctx context.Context, name string) (*fleet.YaraRule, error) {
	s.mu.Lock()
	s.YaraRuleByNameFuncInvoked = true
	s.mu.Unlock()
	return s.YaraRuleByNameFunc(ctx, name)
}

func (s *Service) GetTransparencyURL(ctx context.Context) (string, error) {
	s.mu.Lock()
	s.GetTransparencyURLFuncInvoked = true
	s.mu.Unlock()
	return s.GetTransparencyURLFunc(ctx)
}

func (s *Service) AuthenticateOrbitHost(ctx context.Context, nodeKey string) (host *fleet.Host, debug bool, err error) {
	s.mu.Lock()
	s.AuthenticateOrbitHostFuncInvoked = true
	s.mu.Unlock()
	return s.AuthenticateOrbitHostFunc(ctx, nodeKey)
}

func (s *Service) EnrollOrbit(ctx context.Context, hostInfo fleet.OrbitHostInfo, enrollSecret string) (orbitNodeKey string, err error) {
	s.mu.Lock()
	s.EnrollOrbitFuncInvoked = true
	s.mu.Unlock()
	return s.EnrollOrbitFunc(ctx, hostInfo, enrollSecret)
}

func (s *Service) GetOrbitConfig(ctx context.Context) (fleet.OrbitConfig, error) {
	s.mu.Lock()
	s.GetOrbitConfigFuncInvoked = true
	s.mu.Unlock()
	return s.GetOrbitConfigFunc(ctx)
}

func (s *Service) LogFleetdError(ctx context.Context, errData fleet.FleetdError) error {
	s.mu.Lock()
	s.LogFleetdErrorFuncInvoked = true
	s.mu.Unlock()
	return s.LogFleetdErrorFunc(ctx, errData)
}

func (s *Service) SetOrUpdateDeviceAuthToken(ctx context.Context, authToken string) error {
	s.mu.Lock()
	s.SetOrUpdateDeviceAuthTokenFuncInvoked = true
	s.mu.Unlock()
	return s.SetOrUpdateDeviceAuthTokenFunc(ctx, authToken)
}

func (s *Service) GetFleetDesktopSummary(ctx context.Context) (fleet.DesktopSummary, error) {
	s.mu.Lock()
	s.GetFleetDesktopSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetFleetDesktopSummaryFunc(ctx)
}

func (s *Service) SetEnterpriseOverrides(overrides fleet.EnterpriseOverrides) {
	s.mu.Lock()
	s.SetEnterpriseOverridesFuncInvoked = true
	s.mu.Unlock()
	s.SetEnterpriseOverridesFunc(overrides)
}

func (s *Service) CreateUserFromInvite(ctx context.Context, p fleet.UserPayload) (user *fleet.User, err error) {
	s.mu.Lock()
	s.CreateUserFromInviteFuncInvoked = true
	s.mu.Unlock()
	return s.CreateUserFromInviteFunc(ctx, p)
}

func (s *Service) CreateUser(ctx context.Context, p fleet.UserPayload) (user *fleet.User, sessionKey *string, err error) {
	s.mu.Lock()
	s.CreateUserFuncInvoked = true
	s.mu.Unlock()
	return s.CreateUserFunc(ctx, p)
}

func (s *Service) CreateInitialUser(ctx context.Context, p fleet.UserPayload) (user *fleet.User, err error) {
	s.mu.Lock()
	s.CreateInitialUserFuncInvoked = true
	s.mu.Unlock()
	return s.CreateInitialUserFunc(ctx, p)
}

func (s *Service) User(ctx context.Context, id uint) (user *fleet.User, err error) {
	s.mu.Lock()
	s.UserFuncInvoked = true
	s.mu.Unlock()
	return s.UserFunc(ctx, id)
}

func (s *Service) NewUser(ctx context.Context, p fleet.UserPayload) (*fleet.User, error) {
	s.mu.Lock()
	s.NewUserFuncInvoked = true
	s.mu.Unlock()
	return s.NewUserFunc(ctx, p)
}

func (s *Service) UserUnauthorized(ctx context.Context, id uint) (user *fleet.User, err error) {
	s.mu.Lock()
	s.UserUnauthorizedFuncInvoked = true
	s.mu.Unlock()
	return s.UserUnauthorizedFunc(ctx, id)
}

func (s *Service) AuthenticatedUser(ctx context.Context) (user *fleet.User, err error) {
	s.mu.Lock()
	s.AuthenticatedUserFuncInvoked = true
	s.mu.Unlock()
	return s.AuthenticatedUserFunc(ctx)
}

func (s *Service) ListUsers(ctx context.Context, opt fleet.UserListOptions) (users []*fleet.User, err error) {
	s.mu.Lock()
	s.ListUsersFuncInvoked = true
	s.mu.Unlock()
	return s.ListUsersFunc(ctx, opt)
}

func (s *Service) ChangePassword(ctx context.Context, oldPass string, newPass string) error {
	s.mu.Lock()
	s.ChangePasswordFuncInvoked = true
	s.mu.Unlock()
	return s.ChangePasswordFunc(ctx, oldPass, newPass)
}

func (s *Service) RequestPasswordReset(ctx context.Context, email string) (err error) {
	s.mu.Lock()
	s.RequestPasswordResetFuncInvoked = true
	s.mu.Unlock()
	return s.RequestPasswordResetFunc(ctx, email)
}

func (s *Service) RequirePasswordReset(ctx context.Context, uid uint, require bool) (*fleet.User, error) {
	s.mu.Lock()
	s.RequirePasswordResetFuncInvoked = true
	s.mu.Unlock()
	return s.RequirePasswordResetFunc(ctx, uid, require)
}

func (s *Service) PerformRequiredPasswordReset(ctx context.Context, password string) (*fleet.User, error) {
	s.mu.Lock()
	s.PerformRequiredPasswordResetFuncInvoked = true
	s.mu.Unlock()
	return s.PerformRequiredPasswordResetFunc(ctx, password)
}

func (s *Service) ResetPassword(ctx context.Context, token string, password string) (err error) {
	s.mu.Lock()
	s.ResetPasswordFuncInvoked = true
	s.mu.Unlock()
	return s.ResetPasswordFunc(ctx, token, password)
}

func (s *Service) ModifyUser(ctx context.Context, userID uint, p fleet.UserPayload) (user *fleet.User, err error) {
	s.mu.Lock()
	s.ModifyUserFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyUserFunc(ctx, userID, p)
}

func (s *Service) DeleteUser(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteUserFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteUserFunc(ctx, id)
}

func (s *Service) ChangeUserEmail(ctx context.Context, token string) (string, error) {
	s.mu.Lock()
	s.ChangeUserEmailFuncInvoked = true
	s.mu.Unlock()
	return s.ChangeUserEmailFunc(ctx, token)
}

func (s *Service) GetUserSettings(ctx context.Context, id uint) (settings *fleet.UserSettings, err error) {
	s.mu.Lock()
	s.GetUserSettingsFuncInvoked = true
	s.mu.Unlock()
	return s.GetUserSettingsFunc(ctx, id)
}

func (s *Service) InitiateSSO(ctx context.Context, redirectURL string) (sessionID string, sessionDurationSeconds int, idpURL string, err error) {
	s.mu.Lock()
	s.InitiateSSOFuncInvoked = true
	s.mu.Unlock()
	return s.InitiateSSOFunc(ctx, redirectURL)
}

func (s *Service) InitiateMDMSSO(ctx context.Context, initiator string, customOriginalURL string) (sessionID string, sessionDurationSeconds int, idpURL string, err error) {
	s.mu.Lock()
	s.InitiateMDMSSOFuncInvoked = true
	s.mu.Unlock()
	return s.InitiateMDMSSOFunc(ctx, initiator, customOriginalURL)
}

func (s *Service) InitSSOCallback(ctx context.Context, sessionID string, samlResponse []byte) (auth fleet.Auth, redirectURL string, err error) {
	s.mu.Lock()
	s.InitSSOCallbackFuncInvoked = true
	s.mu.Unlock()
	return s.InitSSOCallbackFunc(ctx, sessionID, samlResponse)
}

func (s *Service) MDMSSOCallback(ctx context.Context, sessionID string, samlResponse []byte) (redirectURL string, byodCookieValue string) {
	s.mu.Lock()
	s.MDMSSOCallbackFuncInvoked = true
	s.mu.Unlock()
	return s.MDMSSOCallbackFunc(ctx, sessionID, samlResponse)
}

func (s *Service) GetMDMAccountDrivenEnrollmentSSOURL(ctx context.Context) (string, error) {
	s.mu.Lock()
	s.GetMDMAccountDrivenEnrollmentSSOURLFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAccountDrivenEnrollmentSSOURLFunc(ctx)
}

func (s *Service) GetSSOUser(ctx context.Context, auth fleet.Auth) (*fleet.User, error) {
	s.mu.Lock()
	s.GetSSOUserFuncInvoked = true
	s.mu.Unlock()
	return s.GetSSOUserFunc(ctx, auth)
}

func (s *Service) LoginSSOUser(ctx context.Context, user *fleet.User, redirectURL string) (*fleet.SSOSession, error) {
	s.mu.Lock()
	s.LoginSSOUserFuncInvoked = true
	s.mu.Unlock()
	return s.LoginSSOUserFunc(ctx, user, redirectURL)
}

func (s *Service) SSOSettings(ctx context.Context) (*fleet.SessionSSOSettings, error) {
	s.mu.Lock()
	s.SSOSettingsFuncInvoked = true
	s.mu.Unlock()
	return s.SSOSettingsFunc(ctx)
}

func (s *Service) Login(ctx context.Context, email string, password string, supportsEmailVerification bool) (user *fleet.User, session *fleet.Session, err error) {
	s.mu.Lock()
	s.LoginFuncInvoked = true
	s.mu.Unlock()
	return s.LoginFunc(ctx, email, password, supportsEmailVerification)
}

func (s *Service) Logout(ctx context.Context) (err error) {
	s.mu.Lock()
	s.LogoutFuncInvoked = true
	s.mu.Unlock()
	return s.LogoutFunc(ctx)
}

func (s *Service) CompleteMFA(ctx context.Context, token string) (*fleet.Session, *fleet.User, error) {
	s.mu.Lock()
	s.CompleteMFAFuncInvoked = true
	s.mu.Unlock()
	return s.CompleteMFAFunc(ctx, token)
}

func (s *Service) DestroySession(ctx context.Context) (err error) {
	s.mu.Lock()
	s.DestroySessionFuncInvoked = true
	s.mu.Unlock()
	return s.DestroySessionFunc(ctx)
}

func (s *Service) GetInfoAboutSessionsForUser(ctx context.Context, id uint) (sessions []*fleet.Session, err error) {
	s.mu.Lock()
	s.GetInfoAboutSessionsForUserFuncInvoked = true
	s.mu.Unlock()
	return s.GetInfoAboutSessionsForUserFunc(ctx, id)
}

func (s *Service) DeleteSessionsForUser(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteSessionsForUserFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSessionsForUserFunc(ctx, id)
}

func (s *Service) GetInfoAboutSession(ctx context.Context, id uint) (session *fleet.Session, err error) {
	s.mu.Lock()
	s.GetInfoAboutSessionFuncInvoked = true
	s.mu.Unlock()
	return s.GetInfoAboutSessionFunc(ctx, id)
}

func (s *Service) GetSessionByKey(ctx context.Context, key string) (session *fleet.Session, err error) {
	s.mu.Lock()
	s.GetSessionByKeyFuncInvoked = true
	s.mu.Unlock()
	return s.GetSessionByKeyFunc(ctx, key)
}

func (s *Service) DeleteSession(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteSessionFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSessionFunc(ctx, id)
}

func (s *Service) ApplyPackSpecs(ctx context.Context, specs []*fleet.PackSpec) ([]*fleet.PackSpec, error) {
	s.mu.Lock()
	s.ApplyPackSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyPackSpecsFunc(ctx, specs)
}

func (s *Service) GetPackSpecs(ctx context.Context) ([]*fleet.PackSpec, error) {
	s.mu.Lock()
	s.GetPackSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.GetPackSpecsFunc(ctx)
}

func (s *Service) GetPackSpec(ctx context.Context, name string) (*fleet.PackSpec, error) {
	s.mu.Lock()
	s.GetPackSpecFuncInvoked = true
	s.mu.Unlock()
	return s.GetPackSpecFunc(ctx, name)
}

func (s *Service) NewPack(ctx context.Context, p fleet.PackPayload) (pack *fleet.Pack, err error) {
	s.mu.Lock()
	s.NewPackFuncInvoked = true
	s.mu.Unlock()
	return s.NewPackFunc(ctx, p)
}

func (s *Service) ModifyPack(ctx context.Context, id uint, p fleet.PackPayload) (pack *fleet.Pack, err error) {
	s.mu.Lock()
	s.ModifyPackFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyPackFunc(ctx, id, p)
}

func (s *Service) ListPacks(ctx context.Context, opt fleet.PackListOptions) (packs []*fleet.Pack, err error) {
	s.mu.Lock()
	s.ListPacksFuncInvoked = true
	s.mu.Unlock()
	return s.ListPacksFunc(ctx, opt)
}

func (s *Service) GetPack(ctx context.Context, id uint) (pack *fleet.Pack, err error) {
	s.mu.Lock()
	s.GetPackFuncInvoked = true
	s.mu.Unlock()
	return s.GetPackFunc(ctx, id)
}

func (s *Service) DeletePack(ctx context.Context, name string) (err error) {
	s.mu.Lock()
	s.DeletePackFuncInvoked = true
	s.mu.Unlock()
	return s.DeletePackFunc(ctx, name)
}

func (s *Service) DeletePackByID(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeletePackByIDFuncInvoked = true
	s.mu.Unlock()
	return s.DeletePackByIDFunc(ctx, id)
}

func (s *Service) ListPacksForHost(ctx context.Context, hid uint) (packs []*fleet.Pack, err error) {
	s.mu.Lock()
	s.ListPacksForHostFuncInvoked = true
	s.mu.Unlock()
	return s.ListPacksForHostFunc(ctx, hid)
}

func (s *Service) ApplyLabelSpecs(ctx context.Context, specs []*fleet.LabelSpec) error {
	s.mu.Lock()
	s.ApplyLabelSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyLabelSpecsFunc(ctx, specs)
}

func (s *Service) GetLabelSpecs(ctx context.Context) ([]*fleet.LabelSpec, error) {
	s.mu.Lock()
	s.GetLabelSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.GetLabelSpecsFunc(ctx)
}

func (s *Service) GetLabelSpec(ctx context.Context, name string) (*fleet.LabelSpec, error) {
	s.mu.Lock()
	s.GetLabelSpecFuncInvoked = true
	s.mu.Unlock()
	return s.GetLabelSpecFunc(ctx, name)
}

func (s *Service) NewLabel(ctx context.Context, p fleet.LabelPayload) (label *fleet.Label, hostIDs []uint, err error) {
	s.mu.Lock()
	s.NewLabelFuncInvoked = true
	s.mu.Unlock()
	return s.NewLabelFunc(ctx, p)
}

func (s *Service) ModifyLabel(ctx context.Context, id uint, payload fleet.ModifyLabelPayload) (*fleet.Label, []uint, error) {
	s.mu.Lock()
	s.ModifyLabelFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyLabelFunc(ctx, id, payload)
}

func (s *Service) ListLabels(ctx context.Context, opt fleet.ListOptions) (labels []*fleet.Label, err error) {
	s.mu.Lock()
	s.ListLabelsFuncInvoked = true
	s.mu.Unlock()
	return s.ListLabelsFunc(ctx, opt)
}

func (s *Service) LabelsSummary(ctx context.Context) (labels []*fleet.LabelSummary, err error) {
	s.mu.Lock()
	s.LabelsSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.LabelsSummaryFunc(ctx)
}

func (s *Service) GetLabel(ctx context.Context, id uint) (label *fleet.Label, hostIDs []uint, err error) {
	s.mu.Lock()
	s.GetLabelFuncInvoked = true
	s.mu.Unlock()
	return s.GetLabelFunc(ctx, id)
}

func (s *Service) DeleteLabel(ctx context.Context, name string) (err error) {
	s.mu.Lock()
	s.DeleteLabelFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteLabelFunc(ctx, name)
}

func (s *Service) DeleteLabelByID(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteLabelByIDFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteLabelByIDFunc(ctx, id)
}

func (s *Service) ListHostsInLabel(ctx context.Context, lid uint, opt fleet.HostListOptions) ([]*fleet.Host, error) {
	s.mu.Lock()
	s.ListHostsInLabelFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostsInLabelFunc(ctx, lid, opt)
}

func (s *Service) ListLabelsForHost(ctx context.Context, hostID uint) ([]*fleet.Label, error) {
	s.mu.Lock()
	s.ListLabelsForHostFuncInvoked = true
	s.mu.Unlock()
	return s.ListLabelsForHostFunc(ctx, hostID)
}

func (s *Service) BatchValidateLabels(ctx context.Context, labelNames []string) (map[string]fleet.LabelIdent, error) {
	s.mu.Lock()
	s.BatchValidateLabelsFuncInvoked = true
	s.mu.Unlock()
	return s.BatchValidateLabelsFunc(ctx, labelNames)
}

func (s *Service) ApplyQuerySpecs(ctx context.Context, specs []*fleet.QuerySpec) error {
	s.mu.Lock()
	s.ApplyQuerySpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyQuerySpecsFunc(ctx, specs)
}

func (s *Service) GetQuerySpecs(ctx context.Context, teamID *uint) ([]*fleet.QuerySpec, error) {
	s.mu.Lock()
	s.GetQuerySpecsFuncInvoked = true
	s.mu.Unlock()
	return s.GetQuerySpecsFunc(ctx, teamID)
}

func (s *Service) GetQuerySpec(ctx context.Context, teamID *uint, name string) (*fleet.QuerySpec, error) {
	s.mu.Lock()
	s.GetQuerySpecFuncInvoked = true
	s.mu.Unlock()
	return s.GetQuerySpecFunc(ctx, teamID, name)
}

func (s *Service) ListQueries(ctx context.Context, opt fleet.ListOptions, teamID *uint, scheduled *bool, mergeInherited bool, platform *string) ([]*fleet.Query, int, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.ListQueriesFunc(ctx, opt, teamID, scheduled, mergeInherited, platform)
}

func (s *Service) GetQuery(ctx context.Context, id uint) (*fleet.Query, error) {
	s.mu.Lock()
	s.GetQueryFuncInvoked = true
	s.mu.Unlock()
	return s.GetQueryFunc(ctx, id)
}

func (s *Service) GetQueryReportResults(ctx context.Context, id uint, teamID *uint) ([]fleet.HostQueryResultRow, bool, error) {
	s.mu.Lock()
	s.GetQueryReportResultsFuncInvoked = true
	s.mu.Unlock()
	return s.GetQueryReportResultsFunc(ctx, id, teamID)
}

func (s *Service) GetHostQueryReportResults(ctx context.Context, hid uint, queryID uint) (rows []fleet.HostQueryReportResult, lastFetched *time.Time, err error) {
	s.mu.Lock()
	s.GetHostQueryReportResultsFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostQueryReportResultsFunc(ctx, hid, queryID)
}

func (s *Service) QueryReportIsClipped(ctx context.Context, queryID uint, maxQueryReportRows int) (bool, error) {
	s.mu.Lock()
	s.QueryReportIsClippedFuncInvoked = true
	s.mu.Unlock()
	return s.QueryReportIsClippedFunc(ctx, queryID, maxQueryReportRows)
}

func (s *Service) NewQuery(ctx context.Context, p fleet.QueryPayload) (*fleet.Query, error) {
	s.mu.Lock()
	s.NewQueryFuncInvoked = true
	s.mu.Unlock()
	return s.NewQueryFunc(ctx, p)
}

func (s *Service) ModifyQuery(ctx context.Context, id uint, p fleet.QueryPayload) (*fleet.Query, error) {
	s.mu.Lock()
	s.ModifyQueryFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyQueryFunc(ctx, id, p)
}

func (s *Service) DeleteQuery(ctx context.Context, teamID *uint, name string) error {
	s.mu.Lock()
	s.DeleteQueryFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteQueryFunc(ctx, teamID, name)
}

func (s *Service) DeleteQueryByID(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteQueryByIDFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteQueryByIDFunc(ctx, id)
}

func (s *Service) DeleteQueries(ctx context.Context, ids []uint) (uint, error) {
	s.mu.Lock()
	s.DeleteQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteQueriesFunc(ctx, ids)
}

func (s *Service) NewDistributedQueryCampaignByIdentifiers(ctx context.Context, queryString string, queryID *uint, hosts []string, labels []string) (*fleet.DistributedQueryCampaign, error) {
	s.mu.Lock()
	s.NewDistributedQueryCampaignByIdentifiersFuncInvoked = true
	s.mu.Unlock()
	return s.NewDistributedQueryCampaignByIdentifiersFunc(ctx, queryString, queryID, hosts, labels)
}

func (s *Service) NewDistributedQueryCampaign(ctx context.Context, queryString string, queryID *uint, targets fleet.HostTargets) (*fleet.DistributedQueryCampaign, error) {
	s.mu.Lock()
	s.NewDistributedQueryCampaignFuncInvoked = true
	s.mu.Unlock()
	return s.NewDistributedQueryCampaignFunc(ctx, queryString, queryID, targets)
}

func (s *Service) StreamCampaignResults(ctx context.Context, conn *websocket.Conn, campaignID uint) {
	s.mu.Lock()
	s.StreamCampaignResultsFuncInvoked = true
	s.mu.Unlock()
	s.StreamCampaignResultsFunc(ctx, conn, campaignID)
}

func (s *Service) GetCampaignReader(ctx context.Context, campaign *fleet.DistributedQueryCampaign) (<-chan interface{}, context.CancelFunc, error) {
	s.mu.Lock()
	s.GetCampaignReaderFuncInvoked = true
	s.mu.Unlock()
	return s.GetCampaignReaderFunc(ctx, campaign)
}

func (s *Service) CompleteCampaign(ctx context.Context, campaign *fleet.DistributedQueryCampaign) error {
	s.mu.Lock()
	s.CompleteCampaignFuncInvoked = true
	s.mu.Unlock()
	return s.CompleteCampaignFunc(ctx, campaign)
}

func (s *Service) RunLiveQueryDeadline(ctx context.Context, queryIDs []uint, query string, hostIDs []uint, deadline time.Duration) ([]fleet.QueryCampaignResult, int, error) {
	s.mu.Lock()
	s.RunLiveQueryDeadlineFuncInvoked = true
	s.mu.Unlock()
	return s.RunLiveQueryDeadlineFunc(ctx, queryIDs, query, hostIDs, deadline)
}

func (s *Service) AgentOptionsForHost(ctx context.Context, hostTeamID *uint, hostPlatform string) (json.RawMessage, error) {
	s.mu.Lock()
	s.AgentOptionsForHostFuncInvoked = true
	s.mu.Unlock()
	return s.AgentOptionsForHostFunc(ctx, hostTeamID, hostPlatform)
}

func (s *Service) AuthenticateDevice(ctx context.Context, authToken string) (host *fleet.Host, debug bool, err error) {
	s.mu.Lock()
	s.AuthenticateDeviceFuncInvoked = true
	s.mu.Unlock()
	return s.AuthenticateDeviceFunc(ctx, authToken)
}

func (s *Service) ListHosts(ctx context.Context, opt fleet.HostListOptions) (hosts []*fleet.Host, err error) {
	s.mu.Lock()
	s.ListHostsFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostsFunc(ctx, opt)
}

func (s *Service) GetHost(ctx context.Context, id uint, opts fleet.HostDetailOptions) (host *fleet.HostDetail, err error) {
	s.mu.Lock()
	s.GetHostFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostFunc(ctx, id, opts)
}

func (s *Service) GetHostLite(ctx context.Context, id uint) (host *fleet.Host, err error) {
	s.mu.Lock()
	s.GetHostLiteFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostLiteFunc(ctx, id)
}

func (s *Service) GetHostHealth(ctx context.Context, id uint) (hostHealth *fleet.HostHealth, err error) {
	s.mu.Lock()
	s.GetHostHealthFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostHealthFunc(ctx, id)
}

func (s *Service) GetHostSummary(ctx context.Context, teamID *uint, platform *string, lowDiskSpace *int) (summary *fleet.HostSummary, err error) {
	s.mu.Lock()
	s.GetHostSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostSummaryFunc(ctx, teamID, platform, lowDiskSpace)
}

func (s *Service) DeleteHost(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteHostFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteHostFunc(ctx, id)
}

func (s *Service) HostByIdentifier(ctx context.Context, identifier string, opts fleet.HostDetailOptions) (*fleet.HostDetail, error) {
	s.mu.Lock()
	s.HostByIdentifierFuncInvoked = true
	s.mu.Unlock()
	return s.HostByIdentifierFunc(ctx, identifier, opts)
}

func (s *Service) RefetchHost(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.RefetchHostFuncInvoked = true
	s.mu.Unlock()
	return s.RefetchHostFunc(ctx, id)
}

func (s *Service) AddHostsToTeam(ctx context.Context, teamID *uint, hostIDs []uint, skipBulkPending bool) error {
	s.mu.Lock()
	s.AddHostsToTeamFuncInvoked = true
	s.mu.Unlock()
	return s.AddHostsToTeamFunc(ctx, teamID, hostIDs, skipBulkPending)
}

func (s *Service) AddHostsToTeamByFilter(ctx context.Context, teamID *uint, filter *map[string]interface{}) error {
	s.mu.Lock()
	s.AddHostsToTeamByFilterFuncInvoked = true
	s.mu.Unlock()
	return s.AddHostsToTeamByFilterFunc(ctx, teamID, filter)
}

func (s *Service) DeleteHosts(ctx context.Context, ids []uint, filters *map[string]interface{}) error {
	s.mu.Lock()
	s.DeleteHostsFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteHostsFunc(ctx, ids, filters)
}

func (s *Service) CountHosts(ctx context.Context, labelID *uint, opts fleet.HostListOptions) (int, error) {
	s.mu.Lock()
	s.CountHostsFuncInvoked = true
	s.mu.Unlock()
	return s.CountHostsFunc(ctx, labelID, opts)
}

func (s *Service) SearchHosts(ctx context.Context, matchQuery string, queryID *uint, excludedHostIDs []uint) ([]*fleet.Host, error) {
	s.mu.Lock()
	s.SearchHostsFuncInvoked = true
	s.mu.Unlock()
	return s.SearchHostsFunc(ctx, matchQuery, queryID, excludedHostIDs)
}

func (s *Service) ListHostDeviceMapping(ctx context.Context, id uint) ([]*fleet.HostDeviceMapping, error) {
	s.mu.Lock()
	s.ListHostDeviceMappingFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostDeviceMappingFunc(ctx, id)
}

func (s *Service) SetCustomHostDeviceMapping(ctx context.Context, hostID uint, email string) ([]*fleet.HostDeviceMapping, error) {
	s.mu.Lock()
	s.SetCustomHostDeviceMappingFuncInvoked = true
	s.mu.Unlock()
	return s.SetCustomHostDeviceMappingFunc(ctx, hostID, email)
}

func (s *Service) HostLiteByIdentifier(ctx context.Context, identifier string) (*fleet.HostLite, error) {
	s.mu.Lock()
	s.HostLiteByIdentifierFuncInvoked = true
	s.mu.Unlock()
	return s.HostLiteByIdentifierFunc(ctx, identifier)
}

func (s *Service) HostLiteByID(ctx context.Context, id uint) (*fleet.HostLite, error) {
	s.mu.Lock()
	s.HostLiteByIDFuncInvoked = true
	s.mu.Unlock()
	return s.HostLiteByIDFunc(ctx, id)
}

func (s *Service) ListDevicePolicies(ctx context.Context, host *fleet.Host) ([]*fleet.HostPolicy, error) {
	s.mu.Lock()
	s.ListDevicePoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.ListDevicePoliciesFunc(ctx, host)
}

func (s *Service) GetDeviceSoftwareIconsTitleIcon(ctx context.Context, teamID uint, titleID uint) ([]byte, int64, string, error) {
	s.mu.Lock()
	s.GetDeviceSoftwareIconsTitleIconFuncInvoked = true
	s.mu.Unlock()
	return s.GetDeviceSoftwareIconsTitleIconFunc(ctx, teamID, titleID)
}

func (s *Service) DisableAuthForPing(ctx context.Context) {
	s.mu.Lock()
	s.DisableAuthForPingFuncInvoked = true
	s.mu.Unlock()
	s.DisableAuthForPingFunc(ctx)
}

func (s *Service) MacadminsData(ctx context.Context, id uint) (*fleet.MacadminsData, error) {
	s.mu.Lock()
	s.MacadminsDataFuncInvoked = true
	s.mu.Unlock()
	return s.MacadminsDataFunc(ctx, id)
}

func (s *Service) MDMData(ctx context.Context, id uint) (*fleet.HostMDM, error) {
	s.mu.Lock()
	s.MDMDataFuncInvoked = true
	s.mu.Unlock()
	return s.MDMDataFunc(ctx, id)
}

func (s *Service) AggregatedMacadminsData(ctx context.Context, teamID *uint) (*fleet.AggregatedMacadminsData, error) {
	s.mu.Lock()
	s.AggregatedMacadminsDataFuncInvoked = true
	s.mu.Unlock()
	return s.AggregatedMacadminsDataFunc(ctx, teamID)
}

func (s *Service) AggregatedMDMData(ctx context.Context, id *uint, platform string) (fleet.AggregatedMDMData, error) {
	s.mu.Lock()
	s.AggregatedMDMDataFuncInvoked = true
	s.mu.Unlock()
	return s.AggregatedMDMDataFunc(ctx, id, platform)
}

func (s *Service) GetMDMSolution(ctx context.Context, mdmID uint) (*fleet.MDMSolution, error) {
	s.mu.Lock()
	s.GetMDMSolutionFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMSolutionFunc(ctx, mdmID)
}

func (s *Service) GetMunkiIssue(ctx context.Context, munkiIssueID uint) (*fleet.MunkiIssue, error) {
	s.mu.Lock()
	s.GetMunkiIssueFuncInvoked = true
	s.mu.Unlock()
	return s.GetMunkiIssueFunc(ctx, munkiIssueID)
}

func (s *Service) HostEncryptionKey(ctx context.Context, id uint) (*fleet.HostDiskEncryptionKey, error) {
	s.mu.Lock()
	s.HostEncryptionKeyFuncInvoked = true
	s.mu.Unlock()
	return s.HostEncryptionKeyFunc(ctx, id)
}

func (s *Service) EscrowLUKSData(ctx context.Context, passphrase string, salt string, keySlot *uint, clientError string) error {
	s.mu.Lock()
	s.EscrowLUKSDataFuncInvoked = true
	s.mu.Unlock()
	return s.EscrowLUKSDataFunc(ctx, passphrase, salt, keySlot, clientError)
}

func (s *Service) AddLabelsToHost(ctx context.Context, id uint, labels []string) error {
	s.mu.Lock()
	s.AddLabelsToHostFuncInvoked = true
	s.mu.Unlock()
	return s.AddLabelsToHostFunc(ctx, id, labels)
}

func (s *Service) RemoveLabelsFromHost(ctx context.Context, id uint, labels []string) error {
	s.mu.Lock()
	s.RemoveLabelsFromHostFuncInvoked = true
	s.mu.Unlock()
	return s.RemoveLabelsFromHostFunc(ctx, id, labels)
}

func (s *Service) OSVersions(ctx context.Context, teamID *uint, platform *string, name *string, version *string, opts fleet.ListOptions, includeCVSS bool) (*fleet.OSVersions, int, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.OSVersionsFuncInvoked = true
	s.mu.Unlock()
	return s.OSVersionsFunc(ctx, teamID, platform, name, version, opts, includeCVSS)
}

func (s *Service) OSVersion(ctx context.Context, osVersionID uint, teamID *uint, includeCVSS bool) (*fleet.OSVersion, *time.Time, error) {
	s.mu.Lock()
	s.OSVersionFuncInvoked = true
	s.mu.Unlock()
	return s.OSVersionFunc(ctx, osVersionID, teamID, includeCVSS)
}

func (s *Service) ListHostSoftware(ctx context.Context, hostID uint, opts fleet.HostSoftwareTitleListOptions) ([]*fleet.HostSoftwareWithInstaller, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListHostSoftwareFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostSoftwareFunc(ctx, hostID, opts)
}

func (s *Service) UpdateSoftwareName(ctx context.Context, titleID uint, name string) error {
	s.mu.Lock()
	s.UpdateSoftwareNameFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateSoftwareNameFunc(ctx, titleID, name)
}

func (s *Service) ListHostCertificates(ctx context.Context, hostID uint, opts fleet.ListOptions) ([]*fleet.HostCertificatePayload, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListHostCertificatesFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostCertificatesFunc(ctx, hostID, opts)
}

func (s *Service) NewAppConfig(ctx context.Context, p fleet.AppConfig) (info *fleet.AppConfig, err error) {
	s.mu.Lock()
	s.NewAppConfigFuncInvoked = true
	s.mu.Unlock()
	return s.NewAppConfigFunc(ctx, p)
}

func (s *Service) AppConfigObfuscated(ctx context.Context) (info *fleet.AppConfig, err error) {
	s.mu.Lock()
	s.AppConfigObfuscatedFuncInvoked = true
	s.mu.Unlock()
	return s.AppConfigObfuscatedFunc(ctx)
}

func (s *Service) ModifyAppConfig(ctx context.Context, p []byte, applyOpts fleet.ApplySpecOptions) (info *fleet.AppConfig, err error) {
	s.mu.Lock()
	s.ModifyAppConfigFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyAppConfigFunc(ctx, p, applyOpts)
}

func (s *Service) SandboxEnabled() bool {
	s.mu.Lock()
	s.SandboxEnabledFuncInvoked = true
	s.mu.Unlock()
	return s.SandboxEnabledFunc()
}

func (s *Service) ApplyEnrollSecretSpec(ctx context.Context, spec *fleet.EnrollSecretSpec, applyOpts fleet.ApplySpecOptions) error {
	s.mu.Lock()
	s.ApplyEnrollSecretSpecFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyEnrollSecretSpecFunc(ctx, spec, applyOpts)
}

func (s *Service) GetEnrollSecretSpec(ctx context.Context) (*fleet.EnrollSecretSpec, error) {
	s.mu.Lock()
	s.GetEnrollSecretSpecFuncInvoked = true
	s.mu.Unlock()
	return s.GetEnrollSecretSpecFunc(ctx)
}

func (s *Service) CertificateChain(ctx context.Context) (cert []byte, err error) {
	s.mu.Lock()
	s.CertificateChainFuncInvoked = true
	s.mu.Unlock()
	return s.CertificateChainFunc(ctx)
}

func (s *Service) SetupRequired(ctx context.Context) (bool, error) {
	s.mu.Lock()
	s.SetupRequiredFuncInvoked = true
	s.mu.Unlock()
	return s.SetupRequiredFunc(ctx)
}

func (s *Service) Version(ctx context.Context) (*version.Info, error) {
	s.mu.Lock()
	s.VersionFuncInvoked = true
	s.mu.Unlock()
	return s.VersionFunc(ctx)
}

func (s *Service) License(ctx context.Context) (*fleet.LicenseInfo, error) {
	s.mu.Lock()
	s.LicenseFuncInvoked = true
	s.mu.Unlock()
	return s.LicenseFunc(ctx)
}

func (s *Service) PartnershipsConfig(ctx context.Context) (*fleet.Partnerships, error) {
	s.mu.Lock()
	s.PartnershipsConfigFuncInvoked = true
	s.mu.Unlock()
	return s.PartnershipsConfigFunc(ctx)
}

func (s *Service) LoggingConfig(ctx context.Context) (*fleet.Logging, error) {
	s.mu.Lock()
	s.LoggingConfigFuncInvoked = true
	s.mu.Unlock()
	return s.LoggingConfigFunc(ctx)
}

func (s *Service) EmailConfig(ctx context.Context) (*fleet.EmailConfig, error) {
	s.mu.Lock()
	s.EmailConfigFuncInvoked = true
	s.mu.Unlock()
	return s.EmailConfigFunc(ctx)
}

func (s *Service) UpdateIntervalConfig(ctx context.Context) (*fleet.UpdateIntervalConfig, error) {
	s.mu.Lock()
	s.UpdateIntervalConfigFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateIntervalConfigFunc(ctx)
}

func (s *Service) VulnerabilitiesConfig(ctx context.Context) (*fleet.VulnerabilitiesConfig, error) {
	s.mu.Lock()
	s.VulnerabilitiesConfigFuncInvoked = true
	s.mu.Unlock()
	return s.VulnerabilitiesConfigFunc(ctx)
}

func (s *Service) InviteNewUser(ctx context.Context, payload fleet.InvitePayload) (invite *fleet.Invite, err error) {
	s.mu.Lock()
	s.InviteNewUserFuncInvoked = true
	s.mu.Unlock()
	return s.InviteNewUserFunc(ctx, payload)
}

func (s *Service) DeleteInvite(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteInviteFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteInviteFunc(ctx, id)
}

func (s *Service) ListInvites(ctx context.Context, opt fleet.ListOptions) (invites []*fleet.Invite, err error) {
	s.mu.Lock()
	s.ListInvitesFuncInvoked = true
	s.mu.Unlock()
	return s.ListInvitesFunc(ctx, opt)
}

func (s *Service) VerifyInvite(ctx context.Context, token string) (invite *fleet.Invite, err error) {
	s.mu.Lock()
	s.VerifyInviteFuncInvoked = true
	s.mu.Unlock()
	return s.VerifyInviteFunc(ctx, token)
}

func (s *Service) UpdateInvite(ctx context.Context, id uint, payload fleet.InvitePayload) (*fleet.Invite, error) {
	s.mu.Lock()
	s.UpdateInviteFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateInviteFunc(ctx, id, payload)
}

func (s *Service) SearchTargets(ctx context.Context, searchQuery string, queryID *uint, targets fleet.HostTargets) (*fleet.TargetSearchResults, error) {
	s.mu.Lock()
	s.SearchTargetsFuncInvoked = true
	s.mu.Unlock()
	return s.SearchTargetsFunc(ctx, searchQuery, queryID, targets)
}

func (s *Service) CountHostsInTargets(ctx context.Context, queryID *uint, targets fleet.HostTargets) (*fleet.TargetMetrics, error) {
	s.mu.Lock()
	s.CountHostsInTargetsFuncInvoked = true
	s.mu.Unlock()
	return s.CountHostsInTargetsFunc(ctx, queryID, targets)
}

func (s *Service) GetScheduledQueriesInPack(ctx context.Context, id uint, opts fleet.ListOptions) (queries []*fleet.ScheduledQuery, err error) {
	s.mu.Lock()
	s.GetScheduledQueriesInPackFuncInvoked = true
	s.mu.Unlock()
	return s.GetScheduledQueriesInPackFunc(ctx, id, opts)
}

func (s *Service) GetScheduledQuery(ctx context.Context, id uint) (query *fleet.ScheduledQuery, err error) {
	s.mu.Lock()
	s.GetScheduledQueryFuncInvoked = true
	s.mu.Unlock()
	return s.GetScheduledQueryFunc(ctx, id)
}

func (s *Service) ScheduleQuery(ctx context.Context, sq *fleet.ScheduledQuery) (query *fleet.ScheduledQuery, err error) {
	s.mu.Lock()
	s.ScheduleQueryFuncInvoked = true
	s.mu.Unlock()
	return s.ScheduleQueryFunc(ctx, sq)
}

func (s *Service) DeleteScheduledQuery(ctx context.Context, id uint) (err error) {
	s.mu.Lock()
	s.DeleteScheduledQueryFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteScheduledQueryFunc(ctx, id)
}

func (s *Service) ModifyScheduledQuery(ctx context.Context, id uint, p fleet.ScheduledQueryPayload) (query *fleet.ScheduledQuery, err error) {
	s.mu.Lock()
	s.ModifyScheduledQueryFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyScheduledQueryFunc(ctx, id, p)
}

func (s *Service) StatusResultStore(ctx context.Context) error {
	s.mu.Lock()
	s.StatusResultStoreFuncInvoked = true
	s.mu.Unlock()
	return s.StatusResultStoreFunc(ctx)
}

func (s *Service) StatusLiveQuery(ctx context.Context) error {
	s.mu.Lock()
	s.StatusLiveQueryFuncInvoked = true
	s.mu.Unlock()
	return s.StatusLiveQueryFunc(ctx)
}

func (s *Service) CarveBegin(ctx context.Context, payload fleet.CarveBeginPayload) (*fleet.CarveMetadata, error) {
	s.mu.Lock()
	s.CarveBeginFuncInvoked = true
	s.mu.Unlock()
	return s.CarveBeginFunc(ctx, payload)
}

func (s *Service) CarveBlock(ctx context.Context, payload fleet.CarveBlockPayload) error {
	s.mu.Lock()
	s.CarveBlockFuncInvoked = true
	s.mu.Unlock()
	return s.CarveBlockFunc(ctx, payload)
}

func (s *Service) GetCarve(ctx context.Context, id int64) (*fleet.CarveMetadata, error) {
	s.mu.Lock()
	s.GetCarveFuncInvoked = true
	s.mu.Unlock()
	return s.GetCarveFunc(ctx, id)
}

func (s *Service) ListCarves(ctx context.Context, opt fleet.CarveListOptions) ([]*fleet.CarveMetadata, error) {
	s.mu.Lock()
	s.ListCarvesFuncInvoked = true
	s.mu.Unlock()
	return s.ListCarvesFunc(ctx, opt)
}

func (s *Service) GetBlock(ctx context.Context, carveId int64, blockId int64) ([]byte, error) {
	s.mu.Lock()
	s.GetBlockFuncInvoked = true
	s.mu.Unlock()
	return s.GetBlockFunc(ctx, carveId, blockId)
}

func (s *Service) NewTeam(ctx context.Context, p fleet.TeamPayload) (*fleet.Team, error) {
	s.mu.Lock()
	s.NewTeamFuncInvoked = true
	s.mu.Unlock()
	return s.NewTeamFunc(ctx, p)
}

func (s *Service) GetTeam(ctx context.Context, id uint) (*fleet.Team, error) {
	s.mu.Lock()
	s.GetTeamFuncInvoked = true
	s.mu.Unlock()
	return s.GetTeamFunc(ctx, id)
}

func (s *Service) ModifyTeam(ctx context.Context, id uint, payload fleet.TeamPayload) (*fleet.Team, error) {
	s.mu.Lock()
	s.ModifyTeamFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyTeamFunc(ctx, id, payload)
}

func (s *Service) ModifyTeamAgentOptions(ctx context.Context, id uint, teamOptions json.RawMessage, applyOptions fleet.ApplySpecOptions) (*fleet.Team, error) {
	s.mu.Lock()
	s.ModifyTeamAgentOptionsFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyTeamAgentOptionsFunc(ctx, id, teamOptions, applyOptions)
}

func (s *Service) AddTeamUsers(ctx context.Context, teamID uint, users []fleet.TeamUser) (*fleet.Team, error) {
	s.mu.Lock()
	s.AddTeamUsersFuncInvoked = true
	s.mu.Unlock()
	return s.AddTeamUsersFunc(ctx, teamID, users)
}

func (s *Service) DeleteTeamUsers(ctx context.Context, teamID uint, users []fleet.TeamUser) (*fleet.Team, error) {
	s.mu.Lock()
	s.DeleteTeamUsersFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteTeamUsersFunc(ctx, teamID, users)
}

func (s *Service) DeleteTeam(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteTeamFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteTeamFunc(ctx, id)
}

func (s *Service) ListTeams(ctx context.Context, opt fleet.ListOptions) ([]*fleet.Team, error) {
	s.mu.Lock()
	s.ListTeamsFuncInvoked = true
	s.mu.Unlock()
	return s.ListTeamsFunc(ctx, opt)
}

func (s *Service) ListTeamUsers(ctx context.Context, teamID uint, opt fleet.ListOptions) ([]*fleet.User, error) {
	s.mu.Lock()
	s.ListTeamUsersFuncInvoked = true
	s.mu.Unlock()
	return s.ListTeamUsersFunc(ctx, teamID, opt)
}

func (s *Service) ListAvailableTeamsForUser(ctx context.Context, user *fleet.User) ([]*fleet.TeamSummary, error) {
	s.mu.Lock()
	s.ListAvailableTeamsForUserFuncInvoked = true
	s.mu.Unlock()
	return s.ListAvailableTeamsForUserFunc(ctx, user)
}

func (s *Service) TeamEnrollSecrets(ctx context.Context, teamID uint) ([]*fleet.EnrollSecret, error) {
	s.mu.Lock()
	s.TeamEnrollSecretsFuncInvoked = true
	s.mu.Unlock()
	return s.TeamEnrollSecretsFunc(ctx, teamID)
}

func (s *Service) ModifyTeamEnrollSecrets(ctx context.Context, teamID uint, secrets []fleet.EnrollSecret) ([]*fleet.EnrollSecret, error) {
	s.mu.Lock()
	s.ModifyTeamEnrollSecretsFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyTeamEnrollSecretsFunc(ctx, teamID, secrets)
}

func (s *Service) ApplyTeamSpecs(ctx context.Context, specs []*fleet.TeamSpec, applyOpts fleet.ApplyTeamSpecOptions) (map[string]uint, error) {
	s.mu.Lock()
	s.ApplyTeamSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyTeamSpecsFunc(ctx, specs, applyOpts)
}

func (s *Service) NewActivity(ctx context.Context, user *fleet.User, activity fleet.ActivityDetails) error {
	s.mu.Lock()
	s.NewActivityFuncInvoked = true
	s.mu.Unlock()
	return s.NewActivityFunc(ctx, user, activity)
}

func (s *Service) ListActivities(ctx context.Context, opt fleet.ListActivitiesOptions) ([]*fleet.Activity, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListActivitiesFuncInvoked = true
	s.mu.Unlock()
	return s.ListActivitiesFunc(ctx, opt)
}

func (s *Service) ListHostUpcomingActivities(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.UpcomingActivity, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListHostUpcomingActivitiesFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostUpcomingActivitiesFunc(ctx, hostID, opt)
}

func (s *Service) ListHostPastActivities(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.Activity, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListHostPastActivitiesFuncInvoked = true
	s.mu.Unlock()
	return s.ListHostPastActivitiesFunc(ctx, hostID, opt)
}

func (s *Service) CancelHostUpcomingActivity(ctx context.Context, hostID uint, executionID string) error {
	s.mu.Lock()
	s.CancelHostUpcomingActivityFuncInvoked = true
	s.mu.Unlock()
	return s.CancelHostUpcomingActivityFunc(ctx, hostID, executionID)
}

func (s *Service) ApplyUserRolesSpecs(ctx context.Context, specs fleet.UsersRoleSpec) error {
	s.mu.Lock()
	s.ApplyUserRolesSpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyUserRolesSpecsFunc(ctx, specs)
}

func (s *Service) GlobalScheduleQuery(ctx context.Context, sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.GlobalScheduleQueryFuncInvoked = true
	s.mu.Unlock()
	return s.GlobalScheduleQueryFunc(ctx, sq)
}

func (s *Service) GetGlobalScheduledQueries(ctx context.Context, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.GetGlobalScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.GetGlobalScheduledQueriesFunc(ctx, opts)
}

func (s *Service) ModifyGlobalScheduledQueries(ctx context.Context, id uint, q fleet.ScheduledQueryPayload) (*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.ModifyGlobalScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyGlobalScheduledQueriesFunc(ctx, id, q)
}

func (s *Service) DeleteGlobalScheduledQueries(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteGlobalScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteGlobalScheduledQueriesFunc(ctx, id)
}

func (s *Service) Translate(ctx context.Context, payloads []fleet.TranslatePayload) ([]fleet.TranslatePayload, error) {
	s.mu.Lock()
	s.TranslateFuncInvoked = true
	s.mu.Unlock()
	return s.TranslateFunc(ctx, payloads)
}

func (s *Service) TeamScheduleQuery(ctx context.Context, teamID uint, sq *fleet.ScheduledQuery) (*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.TeamScheduleQueryFuncInvoked = true
	s.mu.Unlock()
	return s.TeamScheduleQueryFunc(ctx, teamID, sq)
}

func (s *Service) GetTeamScheduledQueries(ctx context.Context, teamID uint, opts fleet.ListOptions) ([]*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.GetTeamScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.GetTeamScheduledQueriesFunc(ctx, teamID, opts)
}

func (s *Service) ModifyTeamScheduledQueries(ctx context.Context, teamID uint, scheduledQueryID uint, q fleet.ScheduledQueryPayload) (*fleet.ScheduledQuery, error) {
	s.mu.Lock()
	s.ModifyTeamScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyTeamScheduledQueriesFunc(ctx, teamID, scheduledQueryID, q)
}

func (s *Service) DeleteTeamScheduledQueries(ctx context.Context, teamID uint, id uint) error {
	s.mu.Lock()
	s.DeleteTeamScheduledQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteTeamScheduledQueriesFunc(ctx, teamID, id)
}

func (s *Service) NewGlobalPolicy(ctx context.Context, p fleet.PolicyPayload) (*fleet.Policy, error) {
	s.mu.Lock()
	s.NewGlobalPolicyFuncInvoked = true
	s.mu.Unlock()
	return s.NewGlobalPolicyFunc(ctx, p)
}

func (s *Service) ListGlobalPolicies(ctx context.Context, opts fleet.ListOptions) ([]*fleet.Policy, error) {
	s.mu.Lock()
	s.ListGlobalPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.ListGlobalPoliciesFunc(ctx, opts)
}

func (s *Service) DeleteGlobalPolicies(ctx context.Context, ids []uint) ([]uint, error) {
	s.mu.Lock()
	s.DeleteGlobalPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteGlobalPoliciesFunc(ctx, ids)
}

func (s *Service) ModifyGlobalPolicy(ctx context.Context, id uint, p fleet.ModifyPolicyPayload) (*fleet.Policy, error) {
	s.mu.Lock()
	s.ModifyGlobalPolicyFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyGlobalPolicyFunc(ctx, id, p)
}

func (s *Service) GetPolicyByIDQueries(ctx context.Context, policyID uint) (*fleet.Policy, error) {
	s.mu.Lock()
	s.GetPolicyByIDQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.GetPolicyByIDQueriesFunc(ctx, policyID)
}

func (s *Service) ApplyPolicySpecs(ctx context.Context, policies []*fleet.PolicySpec) error {
	s.mu.Lock()
	s.ApplyPolicySpecsFuncInvoked = true
	s.mu.Unlock()
	return s.ApplyPolicySpecsFunc(ctx, policies)
}

func (s *Service) CountGlobalPolicies(ctx context.Context, matchQuery string) (int, error) {
	s.mu.Lock()
	s.CountGlobalPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.CountGlobalPoliciesFunc(ctx, matchQuery)
}

func (s *Service) AutofillPolicySql(ctx context.Context, sql string) (description string, resolution string, err error) {
	s.mu.Lock()
	s.AutofillPolicySqlFuncInvoked = true
	s.mu.Unlock()
	return s.AutofillPolicySqlFunc(ctx, sql)
}

func (s *Service) ListSoftware(ctx context.Context, opt fleet.SoftwareListOptions) ([]fleet.Software, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListSoftwareFuncInvoked = true
	s.mu.Unlock()
	return s.ListSoftwareFunc(ctx, opt)
}

func (s *Service) SoftwareByID(ctx context.Context, id uint, teamID *uint, includeCVEScores bool) (*fleet.Software, error) {
	s.mu.Lock()
	s.SoftwareByIDFuncInvoked = true
	s.mu.Unlock()
	return s.SoftwareByIDFunc(ctx, id, teamID, includeCVEScores)
}

func (s *Service) CountSoftware(ctx context.Context, opt fleet.SoftwareListOptions) (int, error) {
	s.mu.Lock()
	s.CountSoftwareFuncInvoked = true
	s.mu.Unlock()
	return s.CountSoftwareFunc(ctx, opt)
}

func (s *Service) SaveHostSoftwareInstallResult(ctx context.Context, result *fleet.HostSoftwareInstallResultPayload) error {
	s.mu.Lock()
	s.SaveHostSoftwareInstallResultFuncInvoked = true
	s.mu.Unlock()
	return s.SaveHostSoftwareInstallResultFunc(ctx, result)
}

func (s *Service) ListSoftwareTitles(ctx context.Context, opt fleet.SoftwareTitleListOptions) ([]fleet.SoftwareTitleListResult, int, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListSoftwareTitlesFuncInvoked = true
	s.mu.Unlock()
	return s.ListSoftwareTitlesFunc(ctx, opt)
}

func (s *Service) SoftwareTitleByID(ctx context.Context, id uint, teamID *uint) (*fleet.SoftwareTitle, error) {
	s.mu.Lock()
	s.SoftwareTitleByIDFuncInvoked = true
	s.mu.Unlock()
	return s.SoftwareTitleByIDFunc(ctx, id, teamID)
}

func (s *Service) InstallSoftwareTitle(ctx context.Context, hostID uint, softwareTitleID uint) error {
	s.mu.Lock()
	s.InstallSoftwareTitleFuncInvoked = true
	s.mu.Unlock()
	return s.InstallSoftwareTitleFunc(ctx, hostID, softwareTitleID)
}

func (s *Service) GetVPPTokenIfCanInstallVPPApps(ctx context.Context, appleDevice bool, host *fleet.Host) (string, error) {
	s.mu.Lock()
	s.GetVPPTokenIfCanInstallVPPAppsFuncInvoked = true
	s.mu.Unlock()
	return s.GetVPPTokenIfCanInstallVPPAppsFunc(ctx, appleDevice, host)
}

func (s *Service) InstallVPPAppPostValidation(ctx context.Context, host *fleet.Host, vppApp *fleet.VPPApp, token string, opts fleet.HostSoftwareInstallOptions) (string, error) {
	s.mu.Lock()
	s.InstallVPPAppPostValidationFuncInvoked = true
	s.mu.Unlock()
	return s.InstallVPPAppPostValidationFunc(ctx, host, vppApp, token, opts)
}

func (s *Service) UninstallSoftwareTitle(ctx context.Context, hostID uint, softwareTitleID uint) error {
	s.mu.Lock()
	s.UninstallSoftwareTitleFuncInvoked = true
	s.mu.Unlock()
	return s.UninstallSoftwareTitleFunc(ctx, hostID, softwareTitleID)
}

func (s *Service) GetSoftwareInstallResults(ctx context.Context, installUUID string) (*fleet.HostSoftwareInstallerResult, error) {
	s.mu.Lock()
	s.GetSoftwareInstallResultsFuncInvoked = true
	s.mu.Unlock()
	return s.GetSoftwareInstallResultsFunc(ctx, installUUID)
}

func (s *Service) BatchSetSoftwareInstallers(ctx context.Context, tmName string, payloads []*fleet.SoftwareInstallerPayload, dryRun bool) (string, error) {
	s.mu.Lock()
	s.BatchSetSoftwareInstallersFuncInvoked = true
	s.mu.Unlock()
	return s.BatchSetSoftwareInstallersFunc(ctx, tmName, payloads, dryRun)
}

func (s *Service) GetBatchSetSoftwareInstallersResult(ctx context.Context, tmName string, requestUUID string, dryRun bool) (status string, message string, packages []fleet.SoftwarePackageResponse, err error) {
	s.mu.Lock()
	s.GetBatchSetSoftwareInstallersResultFuncInvoked = true
	s.mu.Unlock()
	return s.GetBatchSetSoftwareInstallersResultFunc(ctx, tmName, requestUUID, dryRun)
}

func (s *Service) SelfServiceInstallSoftwareTitle(ctx context.Context, host *fleet.Host, softwareTitleID uint) error {
	s.mu.Lock()
	s.SelfServiceInstallSoftwareTitleFuncInvoked = true
	s.mu.Unlock()
	return s.SelfServiceInstallSoftwareTitleFunc(ctx, host, softwareTitleID)
}

func (s *Service) HasSelfServiceSoftwareInstallers(ctx context.Context, host *fleet.Host) (bool, error) {
	s.mu.Lock()
	s.HasSelfServiceSoftwareInstallersFuncInvoked = true
	s.mu.Unlock()
	return s.HasSelfServiceSoftwareInstallersFunc(ctx, host)
}

func (s *Service) GetAppStoreApps(ctx context.Context, teamID *uint) ([]*fleet.VPPApp, error) {
	s.mu.Lock()
	s.GetAppStoreAppsFuncInvoked = true
	s.mu.Unlock()
	return s.GetAppStoreAppsFunc(ctx, teamID)
}

func (s *Service) AddAppStoreApp(ctx context.Context, teamID *uint, appTeam fleet.VPPAppTeam) (uint, error) {
	s.mu.Lock()
	s.AddAppStoreAppFuncInvoked = true
	s.mu.Unlock()
	return s.AddAppStoreAppFunc(ctx, teamID, appTeam)
}

func (s *Service) UpdateAppStoreApp(ctx context.Context, titleID uint, teamID *uint, selfService bool, labelsIncludeAny []string, labelsExcludeAny []string, categories []string) (*fleet.VPPAppStoreApp, error) {
	s.mu.Lock()
	s.UpdateAppStoreAppFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateAppStoreAppFunc(ctx, titleID, teamID, selfService, labelsIncludeAny, labelsExcludeAny, categories)
}

func (s *Service) MDMAppleProcessOTAEnrollment(ctx context.Context, certificates []*x509.Certificate, rootSigner *x509.Certificate, enrollSecret string, idpUUID string, deviceInfo fleet.MDMAppleMachineInfo) ([]byte, error) {
	s.mu.Lock()
	s.MDMAppleProcessOTAEnrollmentFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleProcessOTAEnrollmentFunc(ctx, certificates, rootSigner, enrollSecret, idpUUID, deviceInfo)
}

func (s *Service) ListVulnerabilities(ctx context.Context, opt fleet.VulnListOptions) ([]fleet.VulnerabilityWithMetadata, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListVulnerabilitiesFuncInvoked = true
	s.mu.Unlock()
	return s.ListVulnerabilitiesFunc(ctx, opt)
}

func (s *Service) Vulnerability(ctx context.Context, cve string, teamID *uint, useCVSScores bool) (vuln *fleet.VulnerabilityWithMetadata, known bool, err error) {
	s.mu.Lock()
	s.VulnerabilityFuncInvoked = true
	s.mu.Unlock()
	return s.VulnerabilityFunc(ctx, cve, teamID, useCVSScores)
}

func (s *Service) CountVulnerabilities(ctx context.Context, opt fleet.VulnListOptions) (uint, error) {
	s.mu.Lock()
	s.CountVulnerabilitiesFuncInvoked = true
	s.mu.Unlock()
	return s.CountVulnerabilitiesFunc(ctx, opt)
}

func (s *Service) ListOSVersionsByCVE(ctx context.Context, cve string, teamID *uint) (result []*fleet.VulnerableOS, updatedAt time.Time, err error) {
	s.mu.Lock()
	s.ListOSVersionsByCVEFuncInvoked = true
	s.mu.Unlock()
	return s.ListOSVersionsByCVEFunc(ctx, cve, teamID)
}

func (s *Service) ListSoftwareByCVE(ctx context.Context, cve string, teamID *uint) (result []*fleet.VulnerableSoftware, updatedAt time.Time, err error) {
	s.mu.Lock()
	s.ListSoftwareByCVEFuncInvoked = true
	s.mu.Unlock()
	return s.ListSoftwareByCVEFunc(ctx, cve, teamID)
}

func (s *Service) NewTeamPolicy(ctx context.Context, teamID uint, p fleet.NewTeamPolicyPayload) (*fleet.Policy, error) {
	s.mu.Lock()
	s.NewTeamPolicyFuncInvoked = true
	s.mu.Unlock()
	return s.NewTeamPolicyFunc(ctx, teamID, p)
}

func (s *Service) ListTeamPolicies(ctx context.Context, teamID uint, opts fleet.ListOptions, iopts fleet.ListOptions, mergeInherited bool) (teamPolicies []*fleet.Policy, inheritedPolicies []*fleet.Policy, err error) {
	s.mu.Lock()
	s.ListTeamPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.ListTeamPoliciesFunc(ctx, teamID, opts, iopts, mergeInherited)
}

func (s *Service) DeleteTeamPolicies(ctx context.Context, teamID uint, ids []uint) ([]uint, error) {
	s.mu.Lock()
	s.DeleteTeamPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteTeamPoliciesFunc(ctx, teamID, ids)
}

func (s *Service) ModifyTeamPolicy(ctx context.Context, teamID uint, id uint, p fleet.ModifyPolicyPayload) (*fleet.Policy, error) {
	s.mu.Lock()
	s.ModifyTeamPolicyFuncInvoked = true
	s.mu.Unlock()
	return s.ModifyTeamPolicyFunc(ctx, teamID, id, p)
}

func (s *Service) GetTeamPolicyByIDQueries(ctx context.Context, teamID uint, policyID uint) (*fleet.Policy, error) {
	s.mu.Lock()
	s.GetTeamPolicyByIDQueriesFuncInvoked = true
	s.mu.Unlock()
	return s.GetTeamPolicyByIDQueriesFunc(ctx, teamID, policyID)
}

func (s *Service) CountTeamPolicies(ctx context.Context, teamID uint, matchQuery string, mergeInherited bool) (int, error) {
	s.mu.Lock()
	s.CountTeamPoliciesFuncInvoked = true
	s.mu.Unlock()
	return s.CountTeamPoliciesFunc(ctx, teamID, matchQuery, mergeInherited)
}

func (s *Service) LookupGeoIP(ctx context.Context, ip string) *fleet.GeoLocation {
	s.mu.Lock()
	s.LookupGeoIPFuncInvoked = true
	s.mu.Unlock()
	return s.LookupGeoIPFunc(ctx, ip)
}

func (s *Service) GetSoftwareInstallDetails(ctx context.Context, installUUID string) (*fleet.SoftwareInstallDetails, error) {
	s.mu.Lock()
	s.GetSoftwareInstallDetailsFuncInvoked = true
	s.mu.Unlock()
	return s.GetSoftwareInstallDetailsFunc(ctx, installUUID)
}

func (s *Service) GetAppleMDM(ctx context.Context) (*fleet.AppleMDM, error) {
	s.mu.Lock()
	s.GetAppleMDMFuncInvoked = true
	s.mu.Unlock()
	return s.GetAppleMDMFunc(ctx)
}

func (s *Service) GetAppleBM(ctx context.Context) (*fleet.AppleBM, error) {
	s.mu.Lock()
	s.GetAppleBMFuncInvoked = true
	s.mu.Unlock()
	return s.GetAppleBMFunc(ctx)
}

func (s *Service) RequestMDMAppleCSR(ctx context.Context, email string, org string) (*fleet.AppleCSR, error) {
	s.mu.Lock()
	s.RequestMDMAppleCSRFuncInvoked = true
	s.mu.Unlock()
	return s.RequestMDMAppleCSRFunc(ctx, email, org)
}

func (s *Service) GetMDMAppleCSR(ctx context.Context) ([]byte, error) {
	s.mu.Lock()
	s.GetMDMAppleCSRFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleCSRFunc(ctx)
}

func (s *Service) UploadMDMAppleAPNSCert(ctx context.Context, cert io.ReadSeeker) error {
	s.mu.Lock()
	s.UploadMDMAppleAPNSCertFuncInvoked = true
	s.mu.Unlock()
	return s.UploadMDMAppleAPNSCertFunc(ctx, cert)
}

func (s *Service) DeleteMDMAppleAPNSCert(ctx context.Context) error {
	s.mu.Lock()
	s.DeleteMDMAppleAPNSCertFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleAPNSCertFunc(ctx)
}

func (s *Service) UploadVPPToken(ctx context.Context, token io.ReadSeeker) (*fleet.VPPTokenDB, error) {
	s.mu.Lock()
	s.UploadVPPTokenFuncInvoked = true
	s.mu.Unlock()
	return s.UploadVPPTokenFunc(ctx, token)
}

func (s *Service) UpdateVPPToken(ctx context.Context, id uint, token io.ReadSeeker) (*fleet.VPPTokenDB, error) {
	s.mu.Lock()
	s.UpdateVPPTokenFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateVPPTokenFunc(ctx, id, token)
}

func (s *Service) UpdateVPPTokenTeams(ctx context.Context, tokenID uint, teamIDs []uint) (*fleet.VPPTokenDB, error) {
	s.mu.Lock()
	s.UpdateVPPTokenTeamsFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateVPPTokenTeamsFunc(ctx, tokenID, teamIDs)
}

func (s *Service) GetVPPTokens(ctx context.Context) ([]*fleet.VPPTokenDB, error) {
	s.mu.Lock()
	s.GetVPPTokensFuncInvoked = true
	s.mu.Unlock()
	return s.GetVPPTokensFunc(ctx)
}

func (s *Service) DeleteVPPToken(ctx context.Context, tokenID uint) error {
	s.mu.Lock()
	s.DeleteVPPTokenFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteVPPTokenFunc(ctx, tokenID)
}

func (s *Service) BatchAssociateVPPApps(ctx context.Context, teamName string, payloads []fleet.VPPBatchPayload, dryRun bool) ([]fleet.VPPAppResponse, error) {
	s.mu.Lock()
	s.BatchAssociateVPPAppsFuncInvoked = true
	s.mu.Unlock()
	return s.BatchAssociateVPPAppsFunc(ctx, teamName, payloads, dryRun)
}

func (s *Service) GetHostDEPAssignment(ctx context.Context, host *fleet.Host) (*fleet.HostDEPAssignment, error) {
	s.mu.Lock()
	s.GetHostDEPAssignmentFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostDEPAssignmentFunc(ctx, host)
}

func (s *Service) NewMDMAppleConfigProfile(ctx context.Context, teamID uint, r io.Reader, labels []string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMAppleConfigProfile, error) {
	s.mu.Lock()
	s.NewMDMAppleConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.NewMDMAppleConfigProfileFunc(ctx, teamID, r, labels, labelsMembershipMode)
}

func (s *Service) NewMDMAppleDeclaration(ctx context.Context, teamID uint, r io.Reader, labels []string, name string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMAppleDeclaration, error) {
	s.mu.Lock()
	s.NewMDMAppleDeclarationFuncInvoked = true
	s.mu.Unlock()
	return s.NewMDMAppleDeclarationFunc(ctx, teamID, r, labels, name, labelsMembershipMode)
}

func (s *Service) GetMDMAppleConfigProfileByDeprecatedID(ctx context.Context, profileID uint) (*fleet.MDMAppleConfigProfile, error) {
	s.mu.Lock()
	s.GetMDMAppleConfigProfileByDeprecatedIDFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleConfigProfileByDeprecatedIDFunc(ctx, profileID)
}

func (s *Service) GetMDMAppleConfigProfile(ctx context.Context, profileUUID string) (*fleet.MDMAppleConfigProfile, error) {
	s.mu.Lock()
	s.GetMDMAppleConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleConfigProfileFunc(ctx, profileUUID)
}

func (s *Service) GetMDMAppleDeclaration(ctx context.Context, declarationUUID string) (*fleet.MDMAppleDeclaration, error) {
	s.mu.Lock()
	s.GetMDMAppleDeclarationFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleDeclarationFunc(ctx, declarationUUID)
}

func (s *Service) DeleteMDMAppleConfigProfileByDeprecatedID(ctx context.Context, profileID uint) error {
	s.mu.Lock()
	s.DeleteMDMAppleConfigProfileByDeprecatedIDFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleConfigProfileByDeprecatedIDFunc(ctx, profileID)
}

func (s *Service) DeleteMDMAppleConfigProfile(ctx context.Context, profileUUID string) error {
	s.mu.Lock()
	s.DeleteMDMAppleConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleConfigProfileFunc(ctx, profileUUID)
}

func (s *Service) DeleteMDMAppleDeclaration(ctx context.Context, declarationUUID string) error {
	s.mu.Lock()
	s.DeleteMDMAppleDeclarationFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleDeclarationFunc(ctx, declarationUUID)
}

func (s *Service) ListMDMAppleConfigProfiles(ctx context.Context, teamID uint) ([]*fleet.MDMAppleConfigProfile, error) {
	s.mu.Lock()
	s.ListMDMAppleConfigProfilesFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMAppleConfigProfilesFunc(ctx, teamID)
}

func (s *Service) GetMDMAppleFileVaultSummary(ctx context.Context, teamID *uint) (*fleet.MDMAppleFileVaultSummary, error) {
	s.mu.Lock()
	s.GetMDMAppleFileVaultSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleFileVaultSummaryFunc(ctx, teamID)
}

func (s *Service) GetMDMAppleProfilesSummary(ctx context.Context, teamID *uint) (*fleet.MDMProfilesSummary, error) {
	s.mu.Lock()
	s.GetMDMAppleProfilesSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleProfilesSummaryFunc(ctx, teamID)
}

func (s *Service) GetMDMAppleEnrollmentProfileByToken(ctx context.Context, enrollmentToken string, enrollmentRef string) (profile []byte, err error) {
	s.mu.Lock()
	s.GetMDMAppleEnrollmentProfileByTokenFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleEnrollmentProfileByTokenFunc(ctx, enrollmentToken, enrollmentRef)
}

func (s *Service) GetMDMAppleAccountEnrollmentProfile(ctx context.Context, enrollReference string) (profile []byte, err error) {
	s.mu.Lock()
	s.GetMDMAppleAccountEnrollmentProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleAccountEnrollmentProfileFunc(ctx, enrollReference)
}

func (s *Service) SkipAuth(ctx context.Context) {
	s.mu.Lock()
	s.SkipAuthFuncInvoked = true
	s.mu.Unlock()
	s.SkipAuthFunc(ctx)
}

func (s *Service) ReconcileMDMAppleEnrollRef(ctx context.Context, enrollRef string, machineInfo *fleet.MDMAppleMachineInfo) (string, error) {
	s.mu.Lock()
	s.ReconcileMDMAppleEnrollRefFuncInvoked = true
	s.mu.Unlock()
	return s.ReconcileMDMAppleEnrollRefFunc(ctx, enrollRef, machineInfo)
}

func (s *Service) GetDeviceMDMAppleEnrollmentProfile(ctx context.Context) ([]byte, error) {
	s.mu.Lock()
	s.GetDeviceMDMAppleEnrollmentProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetDeviceMDMAppleEnrollmentProfileFunc(ctx)
}

func (s *Service) GetMDMAppleCommandResults(ctx context.Context, commandUUID string) ([]*fleet.MDMCommandResult, error) {
	s.mu.Lock()
	s.GetMDMAppleCommandResultsFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleCommandResultsFunc(ctx, commandUUID)
}

func (s *Service) ListMDMAppleCommands(ctx context.Context, opts *fleet.MDMCommandListOptions) ([]*fleet.MDMAppleCommand, error) {
	s.mu.Lock()
	s.ListMDMAppleCommandsFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMAppleCommandsFunc(ctx, opts)
}

func (s *Service) UploadMDMAppleInstaller(ctx context.Context, name string, size int64, installer io.Reader) (*fleet.MDMAppleInstaller, error) {
	s.mu.Lock()
	s.UploadMDMAppleInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.UploadMDMAppleInstallerFunc(ctx, name, size, installer)
}

func (s *Service) GetMDMAppleInstallerByID(ctx context.Context, id uint) (*fleet.MDMAppleInstaller, error) {
	s.mu.Lock()
	s.GetMDMAppleInstallerByIDFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleInstallerByIDFunc(ctx, id)
}

func (s *Service) DeleteMDMAppleInstaller(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteMDMAppleInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleInstallerFunc(ctx, id)
}

func (s *Service) GetMDMAppleInstallerByToken(ctx context.Context, token string) (*fleet.MDMAppleInstaller, error) {
	s.mu.Lock()
	s.GetMDMAppleInstallerByTokenFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleInstallerByTokenFunc(ctx, token)
}

func (s *Service) GetMDMAppleInstallerDetailsByToken(ctx context.Context, token string) (*fleet.MDMAppleInstaller, error) {
	s.mu.Lock()
	s.GetMDMAppleInstallerDetailsByTokenFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleInstallerDetailsByTokenFunc(ctx, token)
}

func (s *Service) ListMDMAppleInstallers(ctx context.Context) ([]fleet.MDMAppleInstaller, error) {
	s.mu.Lock()
	s.ListMDMAppleInstallersFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMAppleInstallersFunc(ctx)
}

func (s *Service) ListMDMAppleDevices(ctx context.Context) ([]fleet.MDMAppleDevice, error) {
	s.mu.Lock()
	s.ListMDMAppleDevicesFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMAppleDevicesFunc(ctx)
}

func (s *Service) NewMDMAppleDEPKeyPair(ctx context.Context) (*fleet.MDMAppleDEPKeyPair, error) {
	s.mu.Lock()
	s.NewMDMAppleDEPKeyPairFuncInvoked = true
	s.mu.Unlock()
	return s.NewMDMAppleDEPKeyPairFunc(ctx)
}

func (s *Service) GenerateABMKeyPair(ctx context.Context) (*fleet.MDMAppleDEPKeyPair, error) {
	s.mu.Lock()
	s.GenerateABMKeyPairFuncInvoked = true
	s.mu.Unlock()
	return s.GenerateABMKeyPairFunc(ctx)
}

func (s *Service) UploadABMToken(ctx context.Context, token io.Reader) (*fleet.ABMToken, error) {
	s.mu.Lock()
	s.UploadABMTokenFuncInvoked = true
	s.mu.Unlock()
	return s.UploadABMTokenFunc(ctx, token)
}

func (s *Service) ListABMTokens(ctx context.Context) ([]*fleet.ABMToken, error) {
	s.mu.Lock()
	s.ListABMTokensFuncInvoked = true
	s.mu.Unlock()
	return s.ListABMTokensFunc(ctx)
}

func (s *Service) CountABMTokens(ctx context.Context) (int, error) {
	s.mu.Lock()
	s.CountABMTokensFuncInvoked = true
	s.mu.Unlock()
	return s.CountABMTokensFunc(ctx)
}

func (s *Service) UpdateABMTokenTeams(ctx context.Context, tokenID uint, macOSTeamID *uint, iOSTeamID *uint, iPadOSTeamID *uint) (*fleet.ABMToken, error) {
	s.mu.Lock()
	s.UpdateABMTokenTeamsFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateABMTokenTeamsFunc(ctx, tokenID, macOSTeamID, iOSTeamID, iPadOSTeamID)
}

func (s *Service) DeleteABMToken(ctx context.Context, tokenID uint) error {
	s.mu.Lock()
	s.DeleteABMTokenFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteABMTokenFunc(ctx, tokenID)
}

func (s *Service) RenewABMToken(ctx context.Context, token io.Reader, tokenID uint) (*fleet.ABMToken, error) {
	s.mu.Lock()
	s.RenewABMTokenFuncInvoked = true
	s.mu.Unlock()
	return s.RenewABMTokenFunc(ctx, token, tokenID)
}

func (s *Service) EnqueueMDMAppleCommand(ctx context.Context, rawBase64Cmd string, deviceIDs []string) (result *fleet.CommandEnqueueResult, err error) {
	s.mu.Lock()
	s.EnqueueMDMAppleCommandFuncInvoked = true
	s.mu.Unlock()
	return s.EnqueueMDMAppleCommandFunc(ctx, rawBase64Cmd, deviceIDs)
}

func (s *Service) EnqueueMDMAppleCommandRemoveEnrollmentProfile(ctx context.Context, hostID uint) error {
	s.mu.Lock()
	s.EnqueueMDMAppleCommandRemoveEnrollmentProfileFuncInvoked = true
	s.mu.Unlock()
	return s.EnqueueMDMAppleCommandRemoveEnrollmentProfileFunc(ctx, hostID)
}

func (s *Service) BatchSetMDMAppleProfiles(ctx context.Context, teamID *uint, teamName *string, profiles [][]byte, dryRun bool, skipBulkPending bool) error {
	s.mu.Lock()
	s.BatchSetMDMAppleProfilesFuncInvoked = true
	s.mu.Unlock()
	return s.BatchSetMDMAppleProfilesFunc(ctx, teamID, teamName, profiles, dryRun, skipBulkPending)
}

func (s *Service) MDMApplePreassignProfile(ctx context.Context, payload fleet.MDMApplePreassignProfilePayload) error {
	s.mu.Lock()
	s.MDMApplePreassignProfileFuncInvoked = true
	s.mu.Unlock()
	return s.MDMApplePreassignProfileFunc(ctx, payload)
}

func (s *Service) MDMAppleMatchPreassignment(ctx context.Context, externalHostIdentifier string) error {
	s.mu.Lock()
	s.MDMAppleMatchPreassignmentFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleMatchPreassignmentFunc(ctx, externalHostIdentifier)
}

func (s *Service) MDMAppleDeviceLock(ctx context.Context, hostID uint) error {
	s.mu.Lock()
	s.MDMAppleDeviceLockFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleDeviceLockFunc(ctx, hostID)
}

func (s *Service) MDMAppleEraseDevice(ctx context.Context, hostID uint) error {
	s.mu.Lock()
	s.MDMAppleEraseDeviceFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleEraseDeviceFunc(ctx, hostID)
}

func (s *Service) MDMListHostConfigurationProfiles(ctx context.Context, hostID uint) ([]*fleet.MDMAppleConfigProfile, error) {
	s.mu.Lock()
	s.MDMListHostConfigurationProfilesFuncInvoked = true
	s.mu.Unlock()
	return s.MDMListHostConfigurationProfilesFunc(ctx, hostID)
}

func (s *Service) MDMAppleEnableFileVaultAndEscrow(ctx context.Context, teamID *uint) error {
	s.mu.Lock()
	s.MDMAppleEnableFileVaultAndEscrowFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleEnableFileVaultAndEscrowFunc(ctx, teamID)
}

func (s *Service) MDMAppleDisableFileVaultAndEscrow(ctx context.Context, teamID *uint) error {
	s.mu.Lock()
	s.MDMAppleDisableFileVaultAndEscrowFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleDisableFileVaultAndEscrowFunc(ctx, teamID)
}

func (s *Service) UpdateMDMDiskEncryption(ctx context.Context, teamID *uint, enableDiskEncryption *bool, requireBitLockerPIN *bool) error {
	s.mu.Lock()
	s.UpdateMDMDiskEncryptionFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateMDMDiskEncryptionFunc(ctx, teamID, enableDiskEncryption, requireBitLockerPIN)
}

func (s *Service) VerifyMDMAppleConfigured(ctx context.Context) error {
	s.mu.Lock()
	s.VerifyMDMAppleConfiguredFuncInvoked = true
	s.mu.Unlock()
	return s.VerifyMDMAppleConfiguredFunc(ctx)
}

func (s *Service) VerifyMDMWindowsConfigured(ctx context.Context) error {
	s.mu.Lock()
	s.VerifyMDMWindowsConfiguredFuncInvoked = true
	s.mu.Unlock()
	return s.VerifyMDMWindowsConfiguredFunc(ctx)
}

func (s *Service) VerifyMDMAppleOrWindowsConfigured(ctx context.Context) error {
	s.mu.Lock()
	s.VerifyMDMAppleOrWindowsConfiguredFuncInvoked = true
	s.mu.Unlock()
	return s.VerifyMDMAppleOrWindowsConfiguredFunc(ctx)
}

func (s *Service) MDMAppleUploadBootstrapPackage(ctx context.Context, name string, pkg io.Reader, teamID uint, dryRun bool) error {
	s.mu.Lock()
	s.MDMAppleUploadBootstrapPackageFuncInvoked = true
	s.mu.Unlock()
	return s.MDMAppleUploadBootstrapPackageFunc(ctx, name, pkg, teamID, dryRun)
}

func (s *Service) GetMDMAppleBootstrapPackageBytes(ctx context.Context, token string) (*fleet.MDMAppleBootstrapPackage, error) {
	s.mu.Lock()
	s.GetMDMAppleBootstrapPackageBytesFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleBootstrapPackageBytesFunc(ctx, token)
}

func (s *Service) GetMDMAppleBootstrapPackageMetadata(ctx context.Context, teamID uint, forUpdate bool) (*fleet.MDMAppleBootstrapPackage, error) {
	s.mu.Lock()
	s.GetMDMAppleBootstrapPackageMetadataFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleBootstrapPackageMetadataFunc(ctx, teamID, forUpdate)
}

func (s *Service) DeleteMDMAppleBootstrapPackage(ctx context.Context, teamID *uint, dryRun bool) error {
	s.mu.Lock()
	s.DeleteMDMAppleBootstrapPackageFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleBootstrapPackageFunc(ctx, teamID, dryRun)
}

func (s *Service) GetMDMAppleBootstrapPackageSummary(ctx context.Context, teamID *uint) (*fleet.MDMAppleBootstrapPackageSummary, error) {
	s.mu.Lock()
	s.GetMDMAppleBootstrapPackageSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleBootstrapPackageSummaryFunc(ctx, teamID)
}

func (s *Service) MDMGetEULABytes(ctx context.Context, token string) (*fleet.MDMEULA, error) {
	s.mu.Lock()
	s.MDMGetEULABytesFuncInvoked = true
	s.mu.Unlock()
	return s.MDMGetEULABytesFunc(ctx, token)
}

func (s *Service) MDMGetEULAMetadata(ctx context.Context) (*fleet.MDMEULA, error) {
	s.mu.Lock()
	s.MDMGetEULAMetadataFuncInvoked = true
	s.mu.Unlock()
	return s.MDMGetEULAMetadataFunc(ctx)
}

func (s *Service) MDMCreateEULA(ctx context.Context, name string, file io.ReadSeeker, dryRun bool) error {
	s.mu.Lock()
	s.MDMCreateEULAFuncInvoked = true
	s.mu.Unlock()
	return s.MDMCreateEULAFunc(ctx, name, file, dryRun)
}

func (s *Service) MDMDeleteEULA(ctx context.Context, token string, dryRun bool) error {
	s.mu.Lock()
	s.MDMDeleteEULAFuncInvoked = true
	s.mu.Unlock()
	return s.MDMDeleteEULAFunc(ctx, token, dryRun)
}

func (s *Service) SetOrUpdateMDMAppleSetupAssistant(ctx context.Context, asst *fleet.MDMAppleSetupAssistant) (*fleet.MDMAppleSetupAssistant, error) {
	s.mu.Lock()
	s.SetOrUpdateMDMAppleSetupAssistantFuncInvoked = true
	s.mu.Unlock()
	return s.SetOrUpdateMDMAppleSetupAssistantFunc(ctx, asst)
}

func (s *Service) GetMDMAppleSetupAssistant(ctx context.Context, teamID *uint) (*fleet.MDMAppleSetupAssistant, error) {
	s.mu.Lock()
	s.GetMDMAppleSetupAssistantFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMAppleSetupAssistantFunc(ctx, teamID)
}

func (s *Service) DeleteMDMAppleSetupAssistant(ctx context.Context, teamID *uint) error {
	s.mu.Lock()
	s.DeleteMDMAppleSetupAssistantFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMAppleSetupAssistantFunc(ctx, teamID)
}

func (s *Service) HasCustomSetupAssistantConfigurationWebURL(ctx context.Context, teamID *uint) (bool, error) {
	s.mu.Lock()
	s.HasCustomSetupAssistantConfigurationWebURLFuncInvoked = true
	s.mu.Unlock()
	return s.HasCustomSetupAssistantConfigurationWebURLFunc(ctx, teamID)
}

func (s *Service) UpdateMDMAppleSetup(ctx context.Context, payload fleet.MDMAppleSetupPayload) error {
	s.mu.Lock()
	s.UpdateMDMAppleSetupFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateMDMAppleSetupFunc(ctx, payload)
}

func (s *Service) TriggerMigrateMDMDevice(ctx context.Context, host *fleet.Host) error {
	s.mu.Lock()
	s.TriggerMigrateMDMDeviceFuncInvoked = true
	s.mu.Unlock()
	return s.TriggerMigrateMDMDeviceFunc(ctx, host)
}

func (s *Service) GetMDMManualEnrollmentProfile(ctx context.Context) ([]byte, error) {
	s.mu.Lock()
	s.GetMDMManualEnrollmentProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMManualEnrollmentProfileFunc(ctx)
}

func (s *Service) TriggerLinuxDiskEncryptionEscrow(ctx context.Context, host *fleet.Host) error {
	s.mu.Lock()
	s.TriggerLinuxDiskEncryptionEscrowFuncInvoked = true
	s.mu.Unlock()
	return s.TriggerLinuxDiskEncryptionEscrowFunc(ctx, host)
}

func (s *Service) CheckMDMAppleEnrollmentWithMinimumOSVersion(ctx context.Context, m *fleet.MDMAppleMachineInfo) (*fleet.MDMAppleSoftwareUpdateRequired, error) {
	s.mu.Lock()
	s.CheckMDMAppleEnrollmentWithMinimumOSVersionFuncInvoked = true
	s.mu.Unlock()
	return s.CheckMDMAppleEnrollmentWithMinimumOSVersionFunc(ctx, m)
}

func (s *Service) GetOTAProfile(ctx context.Context, enrollSecret string, idpUUID string) ([]byte, error) {
	s.mu.Lock()
	s.GetOTAProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetOTAProfileFunc(ctx, enrollSecret, idpUUID)
}

func (s *Service) TriggerCronSchedule(ctx context.Context, name string) error {
	s.mu.Lock()
	s.TriggerCronScheduleFuncInvoked = true
	s.mu.Unlock()
	return s.TriggerCronScheduleFunc(ctx, name)
}

func (s *Service) ResetAutomation(ctx context.Context, teamIDs []uint, policyIDs []uint) error {
	s.mu.Lock()
	s.ResetAutomationFuncInvoked = true
	s.mu.Unlock()
	return s.ResetAutomationFunc(ctx, teamIDs, policyIDs)
}

func (s *Service) ProcessMDMMicrosoftDiscovery(ctx context.Context, req *fleet.SoapRequest) (*fleet.SoapResponse, error) {
	s.mu.Lock()
	s.ProcessMDMMicrosoftDiscoveryFuncInvoked = true
	s.mu.Unlock()
	return s.ProcessMDMMicrosoftDiscoveryFunc(ctx, req)
}

func (s *Service) GetMDMMicrosoftDiscoveryResponse(ctx context.Context, upnEmail string) (*fleet.DiscoverResponse, error) {
	s.mu.Lock()
	s.GetMDMMicrosoftDiscoveryResponseFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMMicrosoftDiscoveryResponseFunc(ctx, upnEmail)
}

func (s *Service) GetMDMMicrosoftSTSAuthResponse(ctx context.Context, appru string, loginHint string) (string, error) {
	s.mu.Lock()
	s.GetMDMMicrosoftSTSAuthResponseFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMMicrosoftSTSAuthResponseFunc(ctx, appru, loginHint)
}

func (s *Service) GetMDMWindowsPolicyResponse(ctx context.Context, authToken *fleet.HeaderBinarySecurityToken) (*fleet.GetPoliciesResponse, error) {
	s.mu.Lock()
	s.GetMDMWindowsPolicyResponseFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsPolicyResponseFunc(ctx, authToken)
}

func (s *Service) GetMDMWindowsEnrollResponse(ctx context.Context, secTokenMsg *fleet.RequestSecurityToken, authToken *fleet.HeaderBinarySecurityToken) (*fleet.RequestSecurityTokenResponseCollection, error) {
	s.mu.Lock()
	s.GetMDMWindowsEnrollResponseFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsEnrollResponseFunc(ctx, secTokenMsg, authToken)
}

func (s *Service) GetAuthorizedSoapFault(ctx context.Context, eType string, origMsg int, errorMsg error) *fleet.SoapFault {
	s.mu.Lock()
	s.GetAuthorizedSoapFaultFuncInvoked = true
	s.mu.Unlock()
	return s.GetAuthorizedSoapFaultFunc(ctx, eType, origMsg, errorMsg)
}

func (s *Service) SignMDMMicrosoftClientCSR(ctx context.Context, subject string, csr *x509.CertificateRequest) ([]byte, string, error) {
	s.mu.Lock()
	s.SignMDMMicrosoftClientCSRFuncInvoked = true
	s.mu.Unlock()
	return s.SignMDMMicrosoftClientCSRFunc(ctx, subject, csr)
}

func (s *Service) GetMDMWindowsManagementResponse(ctx context.Context, reqSyncML *fleet.SyncML, reqCerts []*x509.Certificate) (*fleet.SyncML, error) {
	s.mu.Lock()
	s.GetMDMWindowsManagementResponseFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsManagementResponseFunc(ctx, reqSyncML, reqCerts)
}

func (s *Service) GetMDMWindowsTOSContent(ctx context.Context, redirectUri string, reqID string) (string, error) {
	s.mu.Lock()
	s.GetMDMWindowsTOSContentFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsTOSContentFunc(ctx, redirectUri, reqID)
}

func (s *Service) RunMDMCommand(ctx context.Context, rawBase64Cmd string, deviceIDs []string) (result *fleet.CommandEnqueueResult, err error) {
	s.mu.Lock()
	s.RunMDMCommandFuncInvoked = true
	s.mu.Unlock()
	return s.RunMDMCommandFunc(ctx, rawBase64Cmd, deviceIDs)
}

func (s *Service) GetMDMCommandResults(ctx context.Context, commandUUID string) ([]*fleet.MDMCommandResult, error) {
	s.mu.Lock()
	s.GetMDMCommandResultsFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMCommandResultsFunc(ctx, commandUUID)
}

func (s *Service) ListMDMCommands(ctx context.Context, opts *fleet.MDMCommandListOptions) ([]*fleet.MDMCommand, error) {
	s.mu.Lock()
	s.ListMDMCommandsFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMCommandsFunc(ctx, opts)
}

func (s *Service) SetOrUpdateDiskEncryptionKey(ctx context.Context, encryptionKey string, clientError string) error {
	s.mu.Lock()
	s.SetOrUpdateDiskEncryptionKeyFuncInvoked = true
	s.mu.Unlock()
	return s.SetOrUpdateDiskEncryptionKeyFunc(ctx, encryptionKey, clientError)
}

func (s *Service) GetMDMWindowsConfigProfile(ctx context.Context, profileUUID string) (*fleet.MDMWindowsConfigProfile, error) {
	s.mu.Lock()
	s.GetMDMWindowsConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsConfigProfileFunc(ctx, profileUUID)
}

func (s *Service) DeleteMDMWindowsConfigProfile(ctx context.Context, profileUUID string) error {
	s.mu.Lock()
	s.DeleteMDMWindowsConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteMDMWindowsConfigProfileFunc(ctx, profileUUID)
}

func (s *Service) GetMDMWindowsProfilesSummary(ctx context.Context, teamID *uint) (*fleet.MDMProfilesSummary, error) {
	s.mu.Lock()
	s.GetMDMWindowsProfilesSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMWindowsProfilesSummaryFunc(ctx, teamID)
}

func (s *Service) NewMDMWindowsConfigProfile(ctx context.Context, teamID uint, profileName string, r io.Reader, labels []string, labelsMembershipMode fleet.MDMLabelsMode) (*fleet.MDMWindowsConfigProfile, error) {
	s.mu.Lock()
	s.NewMDMWindowsConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.NewMDMWindowsConfigProfileFunc(ctx, teamID, profileName, r, labels, labelsMembershipMode)
}

func (s *Service) NewMDMUnsupportedConfigProfile(ctx context.Context, teamID uint, filename string) error {
	s.mu.Lock()
	s.NewMDMUnsupportedConfigProfileFuncInvoked = true
	s.mu.Unlock()
	return s.NewMDMUnsupportedConfigProfileFunc(ctx, teamID, filename)
}

func (s *Service) ListMDMConfigProfiles(ctx context.Context, teamID *uint, opt fleet.ListOptions) ([]*fleet.MDMConfigProfilePayload, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListMDMConfigProfilesFuncInvoked = true
	s.mu.Unlock()
	return s.ListMDMConfigProfilesFunc(ctx, teamID, opt)
}

func (s *Service) BatchSetMDMProfiles(ctx context.Context, teamID *uint, teamName *string, profiles []fleet.MDMProfileBatchPayload, dryRun bool, skipBulkPending bool, assumeEnabled *bool, noCache bool) error {
	s.mu.Lock()
	s.BatchSetMDMProfilesFuncInvoked = true
	s.mu.Unlock()
	return s.BatchSetMDMProfilesFunc(ctx, teamID, teamName, profiles, dryRun, skipBulkPending, assumeEnabled, noCache)
}

func (s *Service) LinuxHostDiskEncryptionStatus(ctx context.Context, host fleet.Host) (fleet.HostMDMDiskEncryption, error) {
	s.mu.Lock()
	s.LinuxHostDiskEncryptionStatusFuncInvoked = true
	s.mu.Unlock()
	return s.LinuxHostDiskEncryptionStatusFunc(ctx, host)
}

func (s *Service) GetMDMLinuxProfilesSummary(ctx context.Context, teamId *uint) (fleet.MDMProfilesSummary, error) {
	s.mu.Lock()
	s.GetMDMLinuxProfilesSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMLinuxProfilesSummaryFunc(ctx, teamId)
}

func (s *Service) GetMDMDiskEncryptionSummary(ctx context.Context, teamID *uint) (*fleet.MDMDiskEncryptionSummary, error) {
	s.mu.Lock()
	s.GetMDMDiskEncryptionSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMDiskEncryptionSummaryFunc(ctx, teamID)
}

func (s *Service) ResendHostMDMProfile(ctx context.Context, hostID uint, profileUUID string) error {
	s.mu.Lock()
	s.ResendHostMDMProfileFuncInvoked = true
	s.mu.Unlock()
	return s.ResendHostMDMProfileFunc(ctx, hostID, profileUUID)
}

func (s *Service) ResendDeviceHostMDMProfile(ctx context.Context, host *fleet.Host, profileUUID string) error {
	s.mu.Lock()
	s.ResendDeviceHostMDMProfileFuncInvoked = true
	s.mu.Unlock()
	return s.ResendDeviceHostMDMProfileFunc(ctx, host, profileUUID)
}

func (s *Service) BatchResendMDMProfileToHosts(ctx context.Context, profileUUID string, filters fleet.BatchResendMDMProfileFilters) error {
	s.mu.Lock()
	s.BatchResendMDMProfileToHostsFuncInvoked = true
	s.mu.Unlock()
	return s.BatchResendMDMProfileToHostsFunc(ctx, profileUUID, filters)
}

func (s *Service) GetMDMConfigProfileStatus(ctx context.Context, profileUUID string) (fleet.MDMConfigProfileStatus, error) {
	s.mu.Lock()
	s.GetMDMConfigProfileStatusFuncInvoked = true
	s.mu.Unlock()
	return s.GetMDMConfigProfileStatusFunc(ctx, profileUUID)
}

func (s *Service) RunHostScript(ctx context.Context, request *fleet.HostScriptRequestPayload, waitForResult time.Duration) (*fleet.HostScriptResult, error) {
	s.mu.Lock()
	s.RunHostScriptFuncInvoked = true
	s.mu.Unlock()
	return s.RunHostScriptFunc(ctx, request, waitForResult)
}

func (s *Service) GetScriptIDByName(ctx context.Context, name string, teamID *uint) (uint, error) {
	s.mu.Lock()
	s.GetScriptIDByNameFuncInvoked = true
	s.mu.Unlock()
	return s.GetScriptIDByNameFunc(ctx, name, teamID)
}

func (s *Service) GetHostScript(ctx context.Context, execID string) (*fleet.HostScriptResult, error) {
	s.mu.Lock()
	s.GetHostScriptFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostScriptFunc(ctx, execID)
}

func (s *Service) SaveHostScriptResult(ctx context.Context, result *fleet.HostScriptResultPayload) error {
	s.mu.Lock()
	s.SaveHostScriptResultFuncInvoked = true
	s.mu.Unlock()
	return s.SaveHostScriptResultFunc(ctx, result)
}

func (s *Service) GetScriptResult(ctx context.Context, execID string) (*fleet.HostScriptResult, error) {
	s.mu.Lock()
	s.GetScriptResultFuncInvoked = true
	s.mu.Unlock()
	return s.GetScriptResultFunc(ctx, execID)
}

func (s *Service) GetSelfServiceUninstallScriptResult(ctx context.Context, host *fleet.Host, execID string) (*fleet.HostScriptResult, error) {
	s.mu.Lock()
	s.GetSelfServiceUninstallScriptResultFuncInvoked = true
	s.mu.Unlock()
	return s.GetSelfServiceUninstallScriptResultFunc(ctx, host, execID)
}

func (s *Service) NewScript(ctx context.Context, teamID *uint, name string, r io.Reader) (*fleet.Script, error) {
	s.mu.Lock()
	s.NewScriptFuncInvoked = true
	s.mu.Unlock()
	return s.NewScriptFunc(ctx, teamID, name, r)
}

func (s *Service) UpdateScript(ctx context.Context, scriptID uint, r io.Reader) (*fleet.Script, error) {
	s.mu.Lock()
	s.UpdateScriptFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateScriptFunc(ctx, scriptID, r)
}

func (s *Service) DeleteScript(ctx context.Context, scriptID uint) error {
	s.mu.Lock()
	s.DeleteScriptFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteScriptFunc(ctx, scriptID)
}

func (s *Service) ListScripts(ctx context.Context, teamID *uint, opt fleet.ListOptions) ([]*fleet.Script, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListScriptsFuncInvoked = true
	s.mu.Unlock()
	return s.ListScriptsFunc(ctx, teamID, opt)
}

func (s *Service) GetScript(ctx context.Context, scriptID uint, downloadRequested bool) (*fleet.Script, []byte, error) {
	s.mu.Lock()
	s.GetScriptFuncInvoked = true
	s.mu.Unlock()
	return s.GetScriptFunc(ctx, scriptID, downloadRequested)
}

func (s *Service) GetHostScriptDetails(ctx context.Context, hostID uint, opt fleet.ListOptions) ([]*fleet.HostScriptDetail, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.GetHostScriptDetailsFuncInvoked = true
	s.mu.Unlock()
	return s.GetHostScriptDetailsFunc(ctx, hostID, opt)
}

func (s *Service) BatchSetScripts(ctx context.Context, maybeTmID *uint, maybeTmName *string, payloads []fleet.ScriptPayload, dryRun bool) ([]fleet.ScriptResponse, error) {
	s.mu.Lock()
	s.BatchSetScriptsFuncInvoked = true
	s.mu.Unlock()
	return s.BatchSetScriptsFunc(ctx, maybeTmID, maybeTmName, payloads, dryRun)
}

func (s *Service) BatchScriptExecute(ctx context.Context, scriptID uint, hostIDs []uint, filters *map[string]any, notBefore *time.Time) (string, error) {
	s.mu.Lock()
	s.BatchScriptExecuteFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptExecuteFunc(ctx, scriptID, hostIDs, filters, notBefore)
}

func (s *Service) BatchScriptExecutionSummary(ctx context.Context, batchExecutionID string) (*fleet.BatchActivity, error) {
	s.mu.Lock()
	s.BatchScriptExecutionSummaryFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptExecutionSummaryFunc(ctx, batchExecutionID)
}

func (s *Service) BatchScriptExecutionStatus(ctx context.Context, batchExecutionID string) (*fleet.BatchActivity, error) {
	s.mu.Lock()
	s.BatchScriptExecutionStatusFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptExecutionStatusFunc(ctx, batchExecutionID)
}

func (s *Service) BatchScriptExecutionHostResults(ctx context.Context, batchExecutionID string, status fleet.BatchScriptExecutionStatus, opt fleet.ListOptions) ([]fleet.BatchScriptHost, *fleet.PaginationMetadata, uint, error) {
	s.mu.Lock()
	s.BatchScriptExecutionHostResultsFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptExecutionHostResultsFunc(ctx, batchExecutionID, status, opt)
}

func (s *Service) BatchScriptExecutionList(ctx context.Context, filter fleet.BatchExecutionStatusFilter) ([]fleet.BatchActivity, int64, error) {
	s.mu.Lock()
	s.BatchScriptExecutionListFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptExecutionListFunc(ctx, filter)
}

func (s *Service) BatchScriptCancel(ctx context.Context, batchExecutionID string) error {
	s.mu.Lock()
	s.BatchScriptCancelFuncInvoked = true
	s.mu.Unlock()
	return s.BatchScriptCancelFunc(ctx, batchExecutionID)
}

func (s *Service) LockHost(ctx context.Context, hostID uint, viewPIN bool) (unlockPIN string, err error) {
	s.mu.Lock()
	s.LockHostFuncInvoked = true
	s.mu.Unlock()
	return s.LockHostFunc(ctx, hostID, viewPIN)
}

func (s *Service) UnlockHost(ctx context.Context, hostID uint) (unlockPIN string, err error) {
	s.mu.Lock()
	s.UnlockHostFuncInvoked = true
	s.mu.Unlock()
	return s.UnlockHostFunc(ctx, hostID)
}

func (s *Service) WipeHost(ctx context.Context, hostID uint, metadata *fleet.MDMWipeMetadata) error {
	s.mu.Lock()
	s.WipeHostFuncInvoked = true
	s.mu.Unlock()
	return s.WipeHostFunc(ctx, hostID, metadata)
}

func (s *Service) UploadSoftwareInstaller(ctx context.Context, payload *fleet.UploadSoftwareInstallerPayload) (*fleet.SoftwareInstaller, error) {
	s.mu.Lock()
	s.UploadSoftwareInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.UploadSoftwareInstallerFunc(ctx, payload)
}

func (s *Service) UpdateSoftwareInstaller(ctx context.Context, payload *fleet.UpdateSoftwareInstallerPayload) (*fleet.SoftwareInstaller, error) {
	s.mu.Lock()
	s.UpdateSoftwareInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateSoftwareInstallerFunc(ctx, payload)
}

func (s *Service) DeleteSoftwareInstaller(ctx context.Context, titleID uint, teamID *uint) error {
	s.mu.Lock()
	s.DeleteSoftwareInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSoftwareInstallerFunc(ctx, titleID, teamID)
}

func (s *Service) GenerateSoftwareInstallerToken(ctx context.Context, alt string, titleID uint, teamID *uint) (string, error) {
	s.mu.Lock()
	s.GenerateSoftwareInstallerTokenFuncInvoked = true
	s.mu.Unlock()
	return s.GenerateSoftwareInstallerTokenFunc(ctx, alt, titleID, teamID)
}

func (s *Service) GetSoftwareInstallerTokenMetadata(ctx context.Context, token string, titleID uint) (*fleet.SoftwareInstallerTokenMetadata, error) {
	s.mu.Lock()
	s.GetSoftwareInstallerTokenMetadataFuncInvoked = true
	s.mu.Unlock()
	return s.GetSoftwareInstallerTokenMetadataFunc(ctx, token, titleID)
}

func (s *Service) GetSoftwareInstallerMetadata(ctx context.Context, skipAuthz bool, titleID uint, teamID *uint) (*fleet.SoftwareInstaller, error) {
	s.mu.Lock()
	s.GetSoftwareInstallerMetadataFuncInvoked = true
	s.mu.Unlock()
	return s.GetSoftwareInstallerMetadataFunc(ctx, skipAuthz, titleID, teamID)
}

func (s *Service) DownloadSoftwareInstaller(ctx context.Context, skipAuthz bool, alt string, titleID uint, teamID *uint) (*fleet.DownloadSoftwareInstallerPayload, error) {
	s.mu.Lock()
	s.DownloadSoftwareInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.DownloadSoftwareInstallerFunc(ctx, skipAuthz, alt, titleID, teamID)
}

func (s *Service) OrbitDownloadSoftwareInstaller(ctx context.Context, installerID uint) (*fleet.DownloadSoftwareInstallerPayload, error) {
	s.mu.Lock()
	s.OrbitDownloadSoftwareInstallerFuncInvoked = true
	s.mu.Unlock()
	return s.OrbitDownloadSoftwareInstallerFunc(ctx, installerID)
}

func (s *Service) GetSoftwareTitleIcon(ctx context.Context, teamID uint, titleID uint) ([]byte, int64, string, error) {
	s.mu.Lock()
	s.GetSoftwareTitleIconFuncInvoked = true
	s.mu.Unlock()
	return s.GetSoftwareTitleIconFunc(ctx, teamID, titleID)
}

func (s *Service) UploadSoftwareTitleIcon(ctx context.Context, payload *fleet.UploadSoftwareTitleIconPayload) (fleet.SoftwareTitleIcon, error) {
	s.mu.Lock()
	s.UploadSoftwareTitleIconFuncInvoked = true
	s.mu.Unlock()
	return s.UploadSoftwareTitleIconFunc(ctx, payload)
}

func (s *Service) DeleteSoftwareTitleIcon(ctx context.Context, teamID uint, titleID uint) error {
	s.mu.Lock()
	s.DeleteSoftwareTitleIconFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSoftwareTitleIconFunc(ctx, teamID, titleID)
}

func (s *Service) SetSetupExperienceSoftware(ctx context.Context, platform string, teamID uint, titleIDs []uint) error {
	s.mu.Lock()
	s.SetSetupExperienceSoftwareFuncInvoked = true
	s.mu.Unlock()
	return s.SetSetupExperienceSoftwareFunc(ctx, platform, teamID, titleIDs)
}

func (s *Service) ListSetupExperienceSoftware(ctx context.Context, platform string, teamID uint, opts fleet.ListOptions) ([]fleet.SoftwareTitleListResult, int, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListSetupExperienceSoftwareFuncInvoked = true
	s.mu.Unlock()
	return s.ListSetupExperienceSoftwareFunc(ctx, platform, teamID, opts)
}

func (s *Service) GetOrbitSetupExperienceStatus(ctx context.Context, orbitNodeKey string, forceRelease bool) (*fleet.SetupExperienceStatusPayload, error) {
	s.mu.Lock()
	s.GetOrbitSetupExperienceStatusFuncInvoked = true
	s.mu.Unlock()
	return s.GetOrbitSetupExperienceStatusFunc(ctx, orbitNodeKey, forceRelease)
}

func (s *Service) GetSetupExperienceScript(ctx context.Context, teamID *uint, downloadRequested bool) (*fleet.Script, []byte, error) {
	s.mu.Lock()
	s.GetSetupExperienceScriptFuncInvoked = true
	s.mu.Unlock()
	return s.GetSetupExperienceScriptFunc(ctx, teamID, downloadRequested)
}

func (s *Service) SetSetupExperienceScript(ctx context.Context, teamID *uint, name string, r io.Reader) error {
	s.mu.Lock()
	s.SetSetupExperienceScriptFuncInvoked = true
	s.mu.Unlock()
	return s.SetSetupExperienceScriptFunc(ctx, teamID, name, r)
}

func (s *Service) DeleteSetupExperienceScript(ctx context.Context, teamID *uint) error {
	s.mu.Lock()
	s.DeleteSetupExperienceScriptFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSetupExperienceScriptFunc(ctx, teamID)
}

func (s *Service) SetupExperienceNextStep(ctx context.Context, host *fleet.Host) (bool, error) {
	s.mu.Lock()
	s.SetupExperienceNextStepFuncInvoked = true
	s.mu.Unlock()
	return s.SetupExperienceNextStepFunc(ctx, host)
}

func (s *Service) SetupExperienceInit(ctx context.Context) (*fleet.SetupExperienceInitResult, error) {
	s.mu.Lock()
	s.SetupExperienceInitFuncInvoked = true
	s.mu.Unlock()
	return s.SetupExperienceInitFunc(ctx)
}

func (s *Service) GetDeviceSetupExperienceStatus(ctx context.Context) (*fleet.DeviceSetupExperienceStatusPayload, error) {
	s.mu.Lock()
	s.GetDeviceSetupExperienceStatusFuncInvoked = true
	s.mu.Unlock()
	return s.GetDeviceSetupExperienceStatusFunc(ctx)
}

func (s *Service) AddFleetMaintainedApp(ctx context.Context, teamID *uint, appID uint, installScript string, preInstallQuery string, postInstallScript string, uninstallScript string, selfService bool, automaticInstall bool, labelsIncludeAny []string, labelsExcludeAny []string) (uint, error) {
	s.mu.Lock()
	s.AddFleetMaintainedAppFuncInvoked = true
	s.mu.Unlock()
	return s.AddFleetMaintainedAppFunc(ctx, teamID, appID, installScript, preInstallQuery, postInstallScript, uninstallScript, selfService, automaticInstall, labelsIncludeAny, labelsExcludeAny)
}

func (s *Service) ListFleetMaintainedApps(ctx context.Context, teamID *uint, opts fleet.ListOptions) ([]fleet.MaintainedApp, *fleet.PaginationMetadata, error) {
	s.mu.Lock()
	s.ListFleetMaintainedAppsFuncInvoked = true
	s.mu.Unlock()
	return s.ListFleetMaintainedAppsFunc(ctx, teamID, opts)
}

func (s *Service) GetFleetMaintainedApp(ctx context.Context, appID uint, teamID *uint) (*fleet.MaintainedApp, error) {
	s.mu.Lock()
	s.GetFleetMaintainedAppFuncInvoked = true
	s.mu.Unlock()
	return s.GetFleetMaintainedAppFunc(ctx, appID, teamID)
}

func (s *Service) CalendarWebhook(ctx context.Context, eventUUID string, channelID string, resourceState string) error {
	s.mu.Lock()
	s.CalendarWebhookFuncInvoked = true
	s.mu.Unlock()
	return s.CalendarWebhookFunc(ctx, eventUUID, channelID, resourceState)
}

func (s *Service) CreateSecretVariables(ctx context.Context, secretVariables []fleet.SecretVariable, dryRun bool) error {
	s.mu.Lock()
	s.CreateSecretVariablesFuncInvoked = true
	s.mu.Unlock()
	return s.CreateSecretVariablesFunc(ctx, secretVariables, dryRun)
}

func (s *Service) CreateSecretVariable(ctx context.Context, name string, value string) (id uint, err error) {
	s.mu.Lock()
	s.CreateSecretVariableFuncInvoked = true
	s.mu.Unlock()
	return s.CreateSecretVariableFunc(ctx, name, value)
}

func (s *Service) ListSecretVariables(ctx context.Context, opts fleet.ListOptions) (secretVariables []fleet.SecretVariableIdentifier, meta *fleet.PaginationMetadata, count int, err error) {
	s.mu.Lock()
	s.ListSecretVariablesFuncInvoked = true
	s.mu.Unlock()
	return s.ListSecretVariablesFunc(ctx, opts)
}

func (s *Service) DeleteSecretVariable(ctx context.Context, id uint) error {
	s.mu.Lock()
	s.DeleteSecretVariableFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteSecretVariableFunc(ctx, id)
}

func (s *Service) ScimDetails(ctx context.Context) (fleet.ScimDetails, error) {
	s.mu.Lock()
	s.ScimDetailsFuncInvoked = true
	s.mu.Unlock()
	return s.ScimDetailsFunc(ctx)
}

func (s *Service) ConditionalAccessMicrosoftCreateIntegration(ctx context.Context, tenantID string) (adminConsentURL string, err error) {
	s.mu.Lock()
	s.ConditionalAccessMicrosoftCreateIntegrationFuncInvoked = true
	s.mu.Unlock()
	return s.ConditionalAccessMicrosoftCreateIntegrationFunc(ctx, tenantID)
}

func (s *Service) ConditionalAccessMicrosoftGet(ctx context.Context) (*fleet.ConditionalAccessMicrosoftIntegration, error) {
	s.mu.Lock()
	s.ConditionalAccessMicrosoftGetFuncInvoked = true
	s.mu.Unlock()
	return s.ConditionalAccessMicrosoftGetFunc(ctx)
}

func (s *Service) ConditionalAccessMicrosoftConfirm(ctx context.Context) (configurationCompleted bool, err error) {
	s.mu.Lock()
	s.ConditionalAccessMicrosoftConfirmFuncInvoked = true
	s.mu.Unlock()
	return s.ConditionalAccessMicrosoftConfirmFunc(ctx)
}

func (s *Service) ConditionalAccessMicrosoftDelete(ctx context.Context) error {
	s.mu.Lock()
	s.ConditionalAccessMicrosoftDeleteFuncInvoked = true
	s.mu.Unlock()
	return s.ConditionalAccessMicrosoftDeleteFunc(ctx)
}

func (s *Service) ListCertificateAuthorities(ctx context.Context) ([]*fleet.CertificateAuthoritySummary, error) {
	s.mu.Lock()
	s.ListCertificateAuthoritiesFuncInvoked = true
	s.mu.Unlock()
	return s.ListCertificateAuthoritiesFunc(ctx)
}

func (s *Service) GetCertificateAuthority(ctx context.Context, id uint) (*fleet.CertificateAuthority, error) {
	s.mu.Lock()
	s.GetCertificateAuthorityFuncInvoked = true
	s.mu.Unlock()
	return s.GetCertificateAuthorityFunc(ctx, id)
}

func (s *Service) NewCertificateAuthority(ctx context.Context, p fleet.CertificateAuthorityPayload) (*fleet.CertificateAuthority, error) {
	s.mu.Lock()
	s.NewCertificateAuthorityFuncInvoked = true
	s.mu.Unlock()
	return s.NewCertificateAuthorityFunc(ctx, p)
}

func (s *Service) DeleteCertificateAuthority(ctx context.Context, certificateAuthorityID uint) error {
	s.mu.Lock()
	s.DeleteCertificateAuthorityFuncInvoked = true
	s.mu.Unlock()
	return s.DeleteCertificateAuthorityFunc(ctx, certificateAuthorityID)
}

func (s *Service) UpdateCertificateAuthority(ctx context.Context, id uint, p fleet.CertificateAuthorityUpdatePayload) error {
	s.mu.Lock()
	s.UpdateCertificateAuthorityFuncInvoked = true
	s.mu.Unlock()
	return s.UpdateCertificateAuthorityFunc(ctx, id, p)
}

func (s *Service) RequestCertificate(ctx context.Context, p fleet.RequestCertificatePayload) (*string, error) {
	s.mu.Lock()
	s.RequestCertificateFuncInvoked = true
	s.mu.Unlock()
	return s.RequestCertificateFunc(ctx, p)
}

func (s *Service) BatchApplyCertificateAuthorities(ctx context.Context, groupedCAs fleet.GroupedCertificateAuthorities, dryRun bool, viaGitOps bool) error {
	s.mu.Lock()
	s.BatchApplyCertificateAuthoritiesFuncInvoked = true
	s.mu.Unlock()
	return s.BatchApplyCertificateAuthoritiesFunc(ctx, groupedCAs, dryRun, viaGitOps)
}

func (s *Service) GetGroupedCertificateAuthorities(ctx context.Context, includeSecrets bool) (*fleet.GroupedCertificateAuthorities, error) {
	s.mu.Lock()
	s.GetGroupedCertificateAuthoritiesFuncInvoked = true
	s.mu.Unlock()
	return s.GetGroupedCertificateAuthoritiesFunc(ctx, includeSecrets)
}
