// Automatically generated by mockimpl. DO NOT EDIT!

package mock

import "github.com/fleetdm/fleet/server/kolide"

var _ kolide.QueryStore = (*QueryStore)(nil)

type ApplyQueriesFunc func(authorID uint, queries []*kolide.Query) error

type NewQueryFunc func(query *kolide.Query, opts ...kolide.OptionalArg) (*kolide.Query, error)

type SaveQueryFunc func(query *kolide.Query) error

type DeleteQueryFunc func(name string) error

type DeleteQueriesFunc func(ids []uint) (uint, error)

type QueryFunc func(id uint) (*kolide.Query, error)

type ListQueriesFunc func(opt kolide.ListOptions) ([]*kolide.Query, error)

type QueryByNameFunc func(name string, opts ...kolide.OptionalArg) (*kolide.Query, error)

type QueryStore struct {
	ApplyQueriesFunc        ApplyQueriesFunc
	ApplyQueriesFuncInvoked bool

	NewQueryFunc        NewQueryFunc
	NewQueryFuncInvoked bool

	SaveQueryFunc        SaveQueryFunc
	SaveQueryFuncInvoked bool

	DeleteQueryFunc        DeleteQueryFunc
	DeleteQueryFuncInvoked bool

	DeleteQueriesFunc        DeleteQueriesFunc
	DeleteQueriesFuncInvoked bool

	QueryFunc        QueryFunc
	QueryFuncInvoked bool

	ListQueriesFunc        ListQueriesFunc
	ListQueriesFuncInvoked bool

	QueryByNameFunc        QueryByNameFunc
	QueryByNameFuncInvoked bool
}

func (s *QueryStore) ApplyQueries(authorID uint, queries []*kolide.Query) error {
	s.ApplyQueriesFuncInvoked = true
	return s.ApplyQueriesFunc(authorID, queries)
}

func (s *QueryStore) NewQuery(query *kolide.Query, opts ...kolide.OptionalArg) (*kolide.Query, error) {
	s.NewQueryFuncInvoked = true
	return s.NewQueryFunc(query, opts...)
}

func (s *QueryStore) SaveQuery(query *kolide.Query) error {
	s.SaveQueryFuncInvoked = true
	return s.SaveQueryFunc(query)
}

func (s *QueryStore) DeleteQuery(name string) error {
	s.DeleteQueryFuncInvoked = true
	return s.DeleteQueryFunc(name)
}

func (s *QueryStore) DeleteQueries(ids []uint) (uint, error) {
	s.DeleteQueriesFuncInvoked = true
	return s.DeleteQueriesFunc(ids)
}

func (s *QueryStore) Query(id uint) (*kolide.Query, error) {
	s.QueryFuncInvoked = true
	return s.QueryFunc(id)
}

func (s *QueryStore) ListQueries(opt kolide.ListOptions) ([]*kolide.Query, error) {
	s.ListQueriesFuncInvoked = true
	return s.ListQueriesFunc(opt)
}

func (s *QueryStore) QueryByName(name string, opts ...kolide.OptionalArg) (*kolide.Query, error) {
	s.QueryByNameFuncInvoked = true
	return s.QueryByNameFunc(name, opts...)
}
