/** software/vulnerabilities/:cve */

import React, { useCallback, useContext } from "react";
import { useQuery } from "react-query";
import { useErrorHandler } from "react-error-boundary";
import { RouteComponentProps } from "react-router";
import { AxiosError } from "axios";

import useTeamIdParam from "hooks/useTeamIdParam";

import { AppContext } from "context/app";

import { IVulnerability } from "interfaces/vulnerability";
import softwareVulnAPI, {
  IGetVulnerabilityQueryKey,
  IVulnerabilityResponse,
} from "services/entities/vulnerabilities";

import Spinner from "components/Spinner";
import DataError from "components/DataError";
import MainContent from "components/MainContent";
import TeamsHeader from "components/TeamsHeader";
import Card from "components/Card";

import SoftwareVulnSummary from "./SoftwareVulnSummary/SoftwareVulnSummary";
import SoftwareVulnOSVersions from "./SoftwareVulnOSVersions";
import SoftwareVulnSoftwareVersions from "./SoftwareVulnSoftwareVersions";

const baseClass = "software-vulnerability-details-page";

interface ISoftwareVulnerabilityDetailsRouteParams {
  cve: string;
  team_id?: string;
}

type ISoftwareVulnerabilityDetailsPageProps = RouteComponentProps<
  undefined,
  ISoftwareVulnerabilityDetailsRouteParams
>;

const SoftwareVulnerabilityDetailsPage = ({
  router,
  routeParams,
  location,
}: ISoftwareVulnerabilityDetailsPageProps) => {
  const { isPremiumTier, isOnGlobalTeam } = useContext(AppContext);
  const handlePageError = useErrorHandler();

  const {
    currentTeamId,
    teamIdForApi,
    userTeams,
    handleTeamChange,
  } = useTeamIdParam({
    location,
    router,
    includeAllTeams: true,
    includeNoTeam: false,
  });

  const {
    data: vuln,
    isLoading: isVulnLoading,
    isError: isVulnError,
  } = useQuery<
    IVulnerabilityResponse,
    AxiosError,
    IVulnerability,
    IGetVulnerabilityQueryKey[]
  >(
    [
      {
        scope: "softwareVulnByCVE",
        cve: routeParams.cve,
        teamId: teamIdForApi,
      },
    ],
    ({ queryKey }) => {
      return softwareVulnAPI.getVulnerability(queryKey[0]);
    },
    {
      select: (data) => data.vulnerability,
      onError: (error) => handlePageError(error),
    }
  );

  const onTeamChange = useCallback(
    (teamId: number) => {
      handleTeamChange(teamId);
    },
    [handleTeamChange]
  );

  const renderVulnTables = () => {
    // always the case, just for typing
    if (vuln) {
      if (vuln.hosts_count === 0) {
        return (
          <Card borderRadiusSize="large" includeShadow className="not-detected">
            <h2>Vulnerability not detected</h2>
            <p>
              No host {!!teamIdForApi && "on this team "}is affected by{" "}
              {vuln.cve}.
            </p>
          </Card>
        );
      }
      return (
        <>
          {!!vuln.os_versions && vuln.os_versions.length > 0 && (
            <SoftwareVulnOSVersions
              osVersions={vuln.os_versions}
              isPremiumTier={isPremiumTier ?? false}
              router={router}
              teamIdForApi={teamIdForApi}
            />
          )}
          {!!vuln.software && vuln.software.length > 0 && (
            <SoftwareVulnSoftwareVersions
              vulnSoftware={vuln.software}
              isPremiumTier={isPremiumTier ?? false}
              router={router}
              teamIdForApi={teamIdForApi}
            />
          )}
        </>
      );
    }
  };

  const renderContent = () => {
    if (isVulnLoading || !vuln) {
      return <Spinner />;
    }
    if (isVulnError) {
      return <DataError />;
    }
    return (
      <>
        {isPremiumTier && (
          <TeamsHeader
            isOnGlobalTeam={isOnGlobalTeam}
            currentTeamId={currentTeamId}
            userTeams={userTeams}
            onTeamChange={onTeamChange}
          />
        )}
        <SoftwareVulnSummary
          vuln={vuln}
          isPremiumTier={isPremiumTier ?? false}
          teamIdForApi={teamIdForApi}
        />
        {renderVulnTables()}
      </>
    );
  };

  return (
    <MainContent className={baseClass}>
      <>{renderContent()}</>
    </MainContent>
  );
};

export default SoftwareVulnerabilityDetailsPage;
