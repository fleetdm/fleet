import React, { useContext } from "react";
import { useQuery } from "react-query";
import { RouteComponentProps } from "react-router";

import { AxiosError } from "axios";

import { AppContext } from "context/app";

import { IVulnerability } from "interfaces/vulnerability";

import softwareVulnAPI, {
  IVulnerabilityResponse,
} from "services/entities/vulnerabilities";

import Spinner from "components/Spinner";
import DataError from "components/DataError";
import Fleet404 from "pages/errors/Fleet404";
import MainContent from "components/MainContent";

import SoftwareVulnSummary from "./SoftwareVulnSummary/SoftwareVulnSummary";
import SoftwareVulnOSVersions from "./SoftwareVulnOSVersions";

const baseClass = "software-vulnerability-details-page";

interface ISoftwareVulnerabilityDetailsRouteParams {
  cve: string;
}

type ISoftwareVulnerabilityDetailsPageProps = RouteComponentProps<
  undefined,
  ISoftwareVulnerabilityDetailsRouteParams
>;

const SoftwareVulnerabilityDetailsPage = ({
  router,
  routeParams,
}: ISoftwareVulnerabilityDetailsPageProps) => {
  const { isPremiumTier } = useContext(AppContext);

  const cve = routeParams.cve;

  // fetch data
  const {
    data: vuln,
    isLoading: isVulnLoading,
    isError: isVulnError,
    error: vulnError,
    // TODO - confirm okay to cast to AxiosError like this
  } = useQuery<IVulnerabilityResponse, AxiosError, IVulnerability>(
    ["softwareVulnByCVE", cve],
    () => softwareVulnAPI.getVulnerability(cve),
    {
      select: (data) => data.vulnerability,
    }
  );

  // render content
  const renderContent = () => {
    if (isVulnLoading || !vuln) {
      return <Spinner />;
    }
    if (isVulnError) {
      // confirm okay to cast to AxiosError like this
      if (vulnError.status === 404) {
        return <Fleet404 />;
      }
      return <DataError />;
    }
    return (
      <>
        <SoftwareVulnSummary
          vuln={vuln}
          isPremiumTier={isPremiumTier ?? false}
        />
        {!!vuln.os_versions && (
          <SoftwareVulnOSVersions
            osVersions={vuln.os_versions}
            isPremiumTier={isPremiumTier ?? false}
          />
        )}
        {/* <SoftwareVulnSoftwareVersions vuln={vuln} /> */}
      </>
    );
  };

  return (
    <MainContent className={baseClass}>
      <>{renderContent()}</>
    </MainContent>
  );
};

export default SoftwareVulnerabilityDetailsPage;
