import React, { useCallback, useContext } from "react";

import { useQuery } from "react-query";
import { InjectedRouter } from "react-router";
import { AxiosError } from "axios";

import useTeamIdParam from "hooks/useTeamIdParam";

import { AppContext } from "context/app";

import { IVulnerability } from "interfaces/vulnerability";
import softwareVulnAPI, {
  IGetVulnerabilityQueryKey,
  IVulnerabilityResponse,
} from "services/entities/vulnerabilities";

import Spinner from "components/Spinner";
import DataError from "components/DataError";
import Fleet404 from "pages/errors/Fleet404";
import MainContent from "components/MainContent";
import TeamsHeader from "components/TeamsHeader";

import SoftwareVulnSummary from "./SoftwareVulnSummary/SoftwareVulnSummary";
import SoftwareVulnOSVersions from "./SoftwareVulnOSVersions";
import SoftwareVulnSoftwareVersions from "./SoftwareVulnSoftwareVersions";

const baseClass = "software-vulnerability-details-page";

interface ISoftwareVulnerabilityDetailsPageProps {
  router: InjectedRouter;
  location: {
    pathname: string;
    search: string;
    query: {
      cve: string;
      team_id?: string;
    };
    hash?: string;
  };
}

const SoftwareVulnerabilityDetailsPage = ({
  router,
  location,
}: ISoftwareVulnerabilityDetailsPageProps) => {
  const { isPremiumTier, isOnGlobalTeam } = useContext(AppContext);

  const {
    currentTeamId,
    teamIdForApi,
    userTeams,
    handleTeamChange,
  } = useTeamIdParam({
    location,
    router,
    includeAllTeams: true,
    includeNoTeam: false,
  });

  const {
    data: vuln,
    isLoading: isVulnLoading,
    isError: isVulnError,
    error: vulnError,
  } = useQuery<
    IVulnerabilityResponse,
    AxiosError,
    IVulnerability,
    IGetVulnerabilityQueryKey[]
  >(
    [
      {
        scope: "softwareVulnByCVE",
        cve: location.query.cve,
        teamId: teamIdForApi,
      },
    ],
    ({ queryKey }) => {
      return softwareVulnAPI.getVulnerability(queryKey[0]);
    },
    {
      select: (data) => data.vulnerability,
    }
  );

  const onTeamChange = useCallback(
    (teamId: number) => {
      handleTeamChange(teamId);
    },
    [handleTeamChange]
  );

  const renderContent = () => {
    if (isVulnLoading || !vuln) {
      return <Spinner />;
    }
    if (isVulnError) {
      // confirm okay to cast to AxiosError like this
      if (vulnError.status === 404) {
        return <Fleet404 />;
      }
      return <DataError />;
    }
    return (
      <>
        {isPremiumTier && (
          <TeamsHeader
            isOnGlobalTeam={isOnGlobalTeam}
            currentTeamId={currentTeamId}
            userTeams={userTeams}
            onTeamChange={onTeamChange}
          />
        )}
        <SoftwareVulnSummary
          vuln={vuln}
          isPremiumTier={isPremiumTier ?? false}
        />
        {!!vuln.os_versions && vuln.os_versions.length > 0 && (
          <SoftwareVulnOSVersions
            osVersions={vuln.os_versions}
            isPremiumTier={isPremiumTier ?? false}
            router={router}
          />
        )}
        {!!vuln.software && vuln.software.length > 0 && (
          <SoftwareVulnSoftwareVersions
            vulnSoftware={vuln.software}
            isPremiumTier={isPremiumTier ?? false}
            router={router}
          />
        )}
      </>
    );
  };

  return (
    <MainContent className={baseClass}>
      <>{renderContent()}</>
    </MainContent>
  );
};

export default SoftwareVulnerabilityDetailsPage;
