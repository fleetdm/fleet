/** software/vulnerabilities/:cve > Vulnerable software section */

import React, { useCallback, useMemo } from "react";

import { InjectedRouter } from "react-router";

import { IVulnerability } from "interfaces/vulnerability";

import PATHS from "router/paths";
import { buildQueryStringFromParams } from "utilities/url";

import Card from "components/Card";
import TableContainer from "components/TableContainer";

import generateColumnConfigs from "./SwVulnSwTableConfig";

const baseClass = "software-vuln-software-versions";

interface ISoftwareVulnSoftwareVersions {
  vulnSoftware: IVulnerability["software"];
  isPremiumTier: boolean;
  router: InjectedRouter;
}

const SoftwareVulnSoftwareVersions = ({
  vulnSoftware,
  isPremiumTier,
  router,
}: ISoftwareVulnSoftwareVersions) => {
  const columnConfigs = useMemo(() => generateColumnConfigs(isPremiumTier), [
    isPremiumTier,
  ]);

  const onSelectSingleRow = useCallback(
    ({ original: { id: software_title_id } }) => {
      if (!software_title_id) {
        return;
      }

      router.push(
        `${PATHS.MANAGE_HOSTS}?${buildQueryStringFromParams({
          software_title_id,
        })}`
      );
    },
    [router]
  );
  const renderVulnerableSoftwareTable = () => {
    return (
      <TableContainer
        columnConfigs={columnConfigs}
        data={vulnSoftware}
        defaultSortHeader="hosts"
        defaultSortDirection="desc"
        isClientSidePagination
        resultsTitle={vulnSoftware.length > 1 ? "items" : "item"}
        isLoading={false} // not rendered otherwise
        emptyComponent={() => <></>}
        showMarkAllPages={false}
        isAllPagesSelected={false}
        disableMultiRowSelect
        onSelectSingleRow={onSelectSingleRow}
      />
    );
  };
  return (
    <Card borderRadiusSize="large" includeShadow className={`${baseClass}`}>
      <h2>Vulnerable software</h2>
      {renderVulnerableSoftwareTable()}
    </Card>
  );
};

export default SoftwareVulnSoftwareVersions;
