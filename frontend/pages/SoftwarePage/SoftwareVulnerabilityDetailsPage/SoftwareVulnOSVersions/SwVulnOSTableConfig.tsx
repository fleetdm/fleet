import React from "react";

import { Column } from "react-table";

import { IVulnerabilityOSVersion } from "interfaces/operating_system";

import LinkCell from "components/TableContainer/DataTable/LinkCell";

import PATHS from "router/paths";
import SoftwareIcon from "pages/SoftwarePage/components/icons/SoftwareIcon";
import TextCell from "components/TableContainer/DataTable/TextCell";
import ViewAllHostsLink from "components/ViewAllHostsLink";

interface ICellProps {
  row: {
    original: IVulnerabilityOSVersion;
  };
}

interface INumberCellProps extends ICellProps {
  cell: {
    value: number;
  };
}

const generateColumnConfigs = (isPremiumTier: boolean): Column[] => {
  const configs = [
    {
      Header: "Name",
      disableSortBy: true,
      accessor: "name_only",
      Cell: ({ row }: ICellProps) => {
        const { name, os_version_id, platform } = row.original;
        return (
          <LinkCell
            path={PATHS.SOFTWARE_OS_DETAILS(os_version_id)}
            value={
              <>
                <SoftwareIcon name={platform} />
                <span className="os-version-name">{name}</span>
              </>
            }
          />
        );
      },
    },
    {
      Header: "Version",
      disableSortBy: true,
      accessor: "version",
      Cell: ({ cell }: INumberCellProps) => <TextCell value={cell.value} />,
    },
    {
      Header: () => (
        <>
          Resolved in <div className="resolved-suffix">version</div>
        </>
      ),
      disableSortBy: true,
      accessor: "resolved_in_version",
      Cell: ({ cell }: INumberCellProps) => <TextCell value={cell.value} />,
    },
    {
      Header: "Hosts",
      disableSortBy: true,
      accessor: "hosts_count",
      Cell: ({ row }: ICellProps) => {
        const { hosts_count, os_version_id } = row.original;
        return (
          <>
            <TextCell value={hosts_count} />
            <ViewAllHostsLink
              queryParams={{ os_version_id }}
              responsive
              rowHover
            />
          </>
        );
      },
    },
  ];

  if (!isPremiumTier) {
    return configs.filter(
      (header) => header.accessor !== "resolved_in_version"
    );
  }

  return configs;
};

export default generateColumnConfigs;
