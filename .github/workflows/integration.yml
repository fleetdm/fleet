name: Integration test updates

on:
  
  pull_request: #TODO Delete

  workflow_dispatch: # Manual
  schedule:
  - cron: '0 2 * * *' # Nightly 2AM UTC

env:
  EMAIL: admin@example.com
  PASSWORD: admin123#

jobs:
  gen-hostname:
    runs-on: ubuntu-latest
    outputs:
      uuid: ${{ steps.gen.outputs.uuid }}
    steps:
    - id: gen
      run: echo "::set-output name=uuid::$(uuidgen)"
  
  echo-hostname:
    runs-on: ubuntu-latest
    needs: gen-hostname
    steps:
    # Download fleet and fleetctl binaries from last successful build on main
    - name: Download binaries
      uses: dawidd6/action-download-artifact@09385b76de790122f4da9c82b17bccf858b9557c #v2.16.0
      with:
        workflow: build-binaries.yaml
        branch: main
        name: build
        path: build
        check_artifacts: true

    - name: Start tunnel
      run: |
        npm install -g localtunnel
        lt --port 1337 --subdomain fleet-preview-${{ needs.gen-hostname.outputs.uuid }} &

    - name: Start Fleet server
      timeout-minutes: 15
      run: |
        chmod +x ./build/fleetctl
        ./build/fleetctl preview --no-hosts
        ./build/fleetctl config set --address https://fleet-preview-${{ needs.gen-hostname.outputs.uuid }}.loca.lt
        ./build/fleetctl get enroll-secret
        sleep 3600

  wait-server:
   runs-on: ubuntu-latest
   needs: gen-hostname
   steps:
        # Download fleet and fleetctl binaries from last successful build on main
    - name: Download binaries
      uses: dawidd6/action-download-artifact@09385b76de790122f4da9c82b17bccf858b9557c #v2.16.0
      with:
        workflow: build-binaries.yaml
        branch: main
        name: build
        path: build
        check_artifacts: true
    
    - name: Attempt login
      timeout-minutes: 5
      run: |
        chmod +x ./build/fleetctl
        ./build/fleetctl config set --address https://fleet-preview-${{ needs.gen-hostname.outputs.uuid }}.loca.lt
        until ./build/fleetctl login
        do
          echo "Retry in 5s..."
          sleep 5
        done
      
  macos-job:
    runs-on: macos-latest
    needs: wait-server
    steps:
    - name: Install dependencies
      run: |
        npm install -g fleetctl
        brew install jq
    - name: Make package
      run: |
        hostname
        fleetctl config set --address https://fleet-preview-${{ needs.gen-hostname.outputs.uuid }}.loca.lt
        fleetctl login
        SECRET=$(fleetctl get enroll_secret --json | jq '.spec.secrets[0].secret')
        echo $SECRET
        fleetctl package --type pkg --fleet-url=https://fleet-preview-${{ needs.gen-hostname.outputs.uuid }}.loca.lt --enroll-secret=$SECRET
        sudo installer -pkg fleet-osquery.pkg -target /
