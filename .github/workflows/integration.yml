name: Integration test updates

on:
  
  pull_request: #TODO Delete

  workflow_dispatch: # Manual
  schedule:
  - cron: '0 2 * * *' # Nightly 2AM UTC

env:
  EMAIL: admin@example.com
  PASSWORD: admin123#

jobs:
  gen:
    runs-on: ubuntu-latest
    outputs:
      subdomain: ${{ steps.gen.outputs.subdomain }}
      address: ${{ steps.gen.outputs.address }}
    steps:
    - id: gen
      run: |
        UUID=$(uuidgen)
        echo "::set-output name=subdomain::fleet-preview-$UUID"
        echo "::set-output name=address::https://fleet-preview-$UUID.loca.lt"
  
  run-server:
    runs-on: ubuntu-latest
    needs: gen
    steps:
    # Download fleet and fleetctl binaries from last successful build on main
    - name: Download binaries
      uses: dawidd6/action-download-artifact@09385b76de790122f4da9c82b17bccf858b9557c #v2.16.0
      with:
        workflow: build-binaries.yaml
        branch: main
        name: build
        path: build
        check_artifacts: true

    - name: Start tunnel
      run: |
        npm install -g localtunnel
        lt --port 1337 --subdomain ${{ needs.gen.outputs.subdomain }} &

    - name: Start Fleet server
      run: |
        chmod +x ./build/fleetctl
        ./build/fleetctl preview --no-hosts
        ./build/fleetctl config set --address ${{ needs.gen.outputs.address }}
        ./build/fleetctl get enroll-secret
        sleep 900

  wait-server:
   runs-on: ubuntu-latest
   needs: gen
   steps:
        # Download fleet and fleetctl binaries from last successful build on main
    - name: Download binaries
      uses: dawidd6/action-download-artifact@09385b76de790122f4da9c82b17bccf858b9557c #v2.16.0
      with:
        workflow: build-binaries.yaml
        branch: main
        name: build
        path: build
        check_artifacts: true
    
    - name: Attempt login
      timeout-minutes: 5
      run: |
        chmod +x ./build/fleetctl
        ./build/fleetctl config set --address ${{ needs.gen.outputs.address }}
        until ./build/fleetctl login
        do
          echo "Retrying in 5s..."
          sleep 5
        done
      
      # 4203018E-580F-C1B5-9525-B745CECA79EB
  orbit-macos:
    strategy:
      matrix:
        orbit-channel: [ 'stable', 'edge' ]
        osqueryd-channel: ['stable', 'edge' ]
    runs-on: macos-latest
    needs: [gen, wait-server]
    steps:
    - name: Install dependencies
      run: |
        npm install -g fleetctl
    - name: Install Orbit
      run: |
        sudo hostname macos-orbit-${{ matrix.orbit-channel }}-osqueryd-${{ matrix.osqueryd-channel }}
        fleetctl config set --address ${{ needs.gen.outputs.address }}
        fleetctl login
        SECRET=$(fleetctl get enroll_secret --json | jq -r '.spec.secrets[0].secret')
        echo "Secret: $SECRET"
        echo "Hostname: $(hostname -s)"
        fleetctl package --type pkg --fleet-url=${{ needs.gen.outputs.address }} --enroll-secret=$SECRET --orbit-channel=${{ matrix.orbit-channel }} --osqueryd-channel=${{ matrix.osqueryd-channel }}
        sudo installer -pkg fleet-osquery.pkg -target /
        until fleetctl get hosts | grep -iF $(hostname -s);
        do
          echo "Awaiting enrollment..."
          sleep 1
        done

  orbit-ubuntu:
    strategy:
      matrix:
        orbit-channel: [ 'stable', 'edge' ]
        osqueryd-channel: ['stable', 'edge' ]
    runs-on: ubuntu-latest
    needs: [gen, wait-server]
    steps:
    - name: Install dependencies
      run: |
        npm install -g fleetctl
    - name: Download binaries
      uses: dawidd6/action-download-artifact@09385b76de790122f4da9c82b17bccf858b9557c #v2.16.0
      with:
        workflow: build-binaries.yaml
        branch: main
        name: build
        path: build
        check_artifacts: true
    - name: Install Orbit
      run: |
        sudo hostname ubuntu-orbit-${{ matrix.orbit-channel }}-osqueryd-${{ matrix.osqueryd-channel }}
        chmod +x ./build/fleetctl
        fleetctl config set --address ${{ needs.gen.outputs.address }}
        fleetctl login
        SECRET=$(fleetctl get enroll_secret --json | jq -r '.spec.secrets[0].secret')
        echo "Secret: $SECRET"
        echo "Hostname: $(hostname -s)"
        ./build/fleetctl package --type deb --fleet-url=${{ needs.gen.outputs.address }} --enroll-secret=$SECRET  --orbit-channel=${{ matrix.orbit-channel }} --osqueryd-channel=${{ matrix.osqueryd-channel }}
        sudo dpkg -i fleet-osquery*
        until fleetctl get hosts | grep -iF $(hostname -s);
        do
          echo "Awaiting enrollment..."
          sudo systemctl status orbit.service || true
          sleep 1
        done