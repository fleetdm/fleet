# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# And then more things

name: Deploy Fleet website

on:
  push:
    branches: [ website ]

jobs:
  build:

    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.6.8
      - name: test out akhileshns thing
        with:
          heroku_api_key: ${{secrets.HEROKU_API_TOKEN_FOR_BOT_USER}}
          heroku_app_name: "test-deploy-from-subdir"
          heroku_email: ${{secrets.HEROKU_EMAIL_FOR_BOT_USER}}
          justlogin: true
      - run: heroku auth:whoami

    # - uses: actions/checkout@v2
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: ${{ matrix.node-version }}

    # # Now start building!
    # # > ‚Ä¶but first, get a little crazy for a sec and delete the top-level package.json file
    # # > i.e. the one used by the Fleet server.  This is because require() in node will go
    # # > hunting in ancestral directories for missing dependencies, and since some of the
    # # > bundled transpiler tasks sniff for package availability using require(), this trips
    # # > up when it encounters another Node universe in the parent directory.
    # - run: rm -rf package.json package-lock.json node_modules/
    # # > Turns out there's a similar issue with how eslint plugins are looked up, so we
    # # > delete the top level .eslintrc file too.
    # - run: rm -f .eslintrc.js

    # # Get dependencies (including dev deps)
    # - run: cd website/ && npm install

    # # Run sanity checks
    # - run: cd website/ && npm test

    # # Compile assets
    # - run: cd website/ && npm run build

    # # Commit newly-built assets locally so we can push them to Heroku below.
    # # (This commit will never be pushed to GitHub- only to Heroku.)
    # # > The local config flags make this work in GitHub's environment.
    # - run: git add website/.www
    # - run: git -c "user.name=Fleetwood" -c "user.email=github@example.com" commit -am 'AUTOMATED COMMIT - Automatically bundling compiled assets as part of deploy, updating the EJS layout and .sailsrc file accordingly.'

    # # Configure the Heroku app we'll be deploying to
    # - run: git -c "user.name=Fleetwood" -c "user.email=github@example.com" remote add heroku https://git.heroku.com/test-deploy-from-subdir.git

    # # Configure our access credentials for Heroku
    # - name: Configure Heroku credentials
    #   env:
    #     HEROKU_EMAIL_FOR_BOT_USER: ${{ secrets.HEROKU_EMAIL_FOR_BOT_USER }}
    #     HEROKU_API_TOKEN_FOR_BOT_USER: ${{ secrets.HEROKU_API_TOKEN_FOR_BOT_USER }}
    #   run: node -e "console.log('machine git.heroku.com\n    login $HEROKU_EMAIL_FOR_BOT_USER\n    password $HEROKU_API_TOKEN_FOR_BOT_USER\n');" > ~/.netrc

    # # Deploy to Heroku (by pushing)
    # - run: echo "Deploying branch '${GITHUB_REF##*/}' to Heroku‚Ä¶"
    # # - run: cat ~/.netrc
    # # - run: git remote -v
    # - run: git push heroku HEAD:master

    # # Hooray!
    # - run: echo '' && echo '--' && echo 'OK, done.  It should be live momentarily.' && echo '(if you get impatient, check the Heroku dashboard for status)' && echo && echo ' üåê‚Äì‚Ä¢  https://fleetdm.com'
