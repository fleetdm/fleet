module.exports = {


  friendlyName: 'Update password and login',


  description: 'Finish the password recovery flow by setting the new password and '+
  'logging in the requesting user, based on the authenticity of their token.',


  inputs: {

    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      required: true
    },

    token: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      required: true
    }

  },


  exits: {

    success: {
      description: 'Password successfully updated, and requesting user agent is now logged in.'
    },

    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired'
    },

    couldNotChangeSandboxPassword: {
      description: 'An error occurred while resetting the password on this user\'s Fleet sandbox instance',
    },

  },


  fn: async function ({password, token}) {

    if(!token) {
      throw 'invalidToken';
    }

    // Look up the user with this reset token.
    var userRecord = await User.findOne({ passwordResetToken: token });

    // If no such user exists, or their token is expired, bail.
    if (!userRecord || userRecord.passwordResetTokenExpiresAt <= Date.now()) {
      throw 'invalidToken';
    }
    // Hash the new password.
    var hashed = await sails.helpers.passwords.hashPassword(password);


    // If this is a Fleet Sandbox user, we will need to update their password on their Fleet sandbox instance.
    if(userRecord.fleetSandboxURL) {

      // If the user's Fleet Sandbox instance is still valid, we'll use their old password to get the authorization token from the sandbox and use it to change their password.
      if(userRecord.fleetSandboxExpiresAt < Date.now()) {
        let authToken = await sails.helpers.http.post(userRecord.fleetSandboxURL+'/api/v1/fleet/login', {
          'email': userRecord.emailAddress,
          'password': userRecord.password
        }).intercept('non200Response', 'couldNotChangeSandboxPassword');

        if(!authToken.token) {
          throw 'couldNotChangeSandboxPassword';
        } else {
          // If we received a token from the fleet instance, we'll use that to update this users password.
          await sails.helpers.http.post(
            userRecord.fleetSandboxURL+'/api/v1/fleet/change_password',
            {
              'old_password': userRecord.password,
              'new_password': hashed,
            },
            {'Authorization': 'Bearer '+authToken.token},
          ).intercept('non200Response', 'couldNotChangeSandboxPassword');
        }
      }
    }
    // Store the user's new password and clear their reset token so it can't be used again.
    await User.updateOne({ id: userRecord.id })
    .set({
      password: hashed,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0
    });

    // Log the user in.
    // (This will be persisted when the response is sent.)
    this.req.session.userId = userRecord.id;

  }


};
